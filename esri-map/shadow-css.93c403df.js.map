{"mappings":"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","sources":["node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["/*\n Stencil Client Platform v2.13.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    let content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst injectScopingSelector = (selector, scopingSelector) => {\n    return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\n        return before + scopingSelector + colon + after;\n    });\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy))\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                scopedP = injectScopingSelector(t, className);\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map((shallowPart) => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') ||\n            rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') ||\n            rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule) => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') ||\n                rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') ||\n                rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector) => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"names":["$8TSCy","parcelRequire","$789721404f9a51cf$var$_polyfillHost","$789721404f9a51cf$var$_polyfillSlotted","$789721404f9a51cf$var$_polyfillHostContext","$789721404f9a51cf$var$_parenSuffix","$789721404f9a51cf$var$_cssColonHostRe","RegExp","$789721404f9a51cf$var$_cssColonHostContextRe","$789721404f9a51cf$var$_cssColonSlottedRe","$789721404f9a51cf$var$_polyfillHostNoCombinator","$789721404f9a51cf$var$_polyfillHostNoCombinatorRe","$789721404f9a51cf$var$_shadowDOMSelectorsRe","$789721404f9a51cf$var$_polyfillHostRe","$789721404f9a51cf$var$_colonHostRe","$789721404f9a51cf$var$_colonSlottedRe","$789721404f9a51cf$var$_colonHostContextRe","$789721404f9a51cf$var$_commentRe","$789721404f9a51cf$var$_commentWithHashRe","$789721404f9a51cf$var$_ruleRe","$789721404f9a51cf$var$_curlyRe","$789721404f9a51cf$var$_selectorPartsRe","$789721404f9a51cf$var$BLOCK_PLACEHOLDER","$789721404f9a51cf$var$processRules","input","ruleCallback","inputWithEscapedBlocks","$789721404f9a51cf$var$escapeBlocks","nextBlockIndex","escapedString","replace","m","Array","_len","_key","arguments","selector","content","suffix","contentPrefix","startsWith","blocks","substring","length","cssRule","rule","concat","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","$789721404f9a51cf$var$convertColonRule","cssText","regExp","partReplacer","parts","r","i","p","trim","$789721404f9a51cf$var$colonHostPartReplacer","host","$789721404f9a51cf$var$colonHostContextPartReplacer","indexOf","$789721404f9a51cf$var$selectorNeedsScoping","scopeSelector2","scopeSelector1","test","$789721404f9a51cf$var$injectScopingSelector","scopingSelector","_","before","colon","after","$789721404f9a51cf$var$applyStrictSelectorScope","scopeSelector4","hostSelector","res","className","_scopeSelectorPart","scopedP","selector1","scopeSelector3","lastIndex","replaceBy","$789721404f9a51cf$var$applySimpleSelectorScope","t","safeContent","placeholders","index","keep","pseudo","exp","$789721404f9a51cf$var$safeSelector","scopedSelector","startIndex","sep","shouldScope","exec","separator","slice","scopedPart","part1","$789721404f9a51cf$var$scopeSelectors","scopeSelectorText","slotSelector","commentOriginalSelector","map","shallowPart","$789721404f9a51cf$var$scopeSelector","$789721404f9a51cf$var$scopeCssText","scopeId","hostScopeId","slotScopeId","slotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","$789721404f9a51cf$var$convertColonSlotted","$789721404f9a51cf$var$convertColonHostContext","$789721404f9a51cf$var$convertColonHost","reduce","result","pattern","$789721404f9a51cf$var$convertShadowDOMSelectors","slottedSelectors","$789721404f9a51cf$export$59d377d2a2e0150a","commentsWithHash","match","$789721404f9a51cf$var$stripComments","orgSelectors","processCommentedSelector","placeholder","comment","scoped","toConsumableArray","forEach","param"],"version":3,"file":"shadow-css.93c403df.js.map"}