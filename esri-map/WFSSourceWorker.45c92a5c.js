function e(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}var t=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire594f;t.register("aWbDX",(function(n,r){e(n.exports,"WFS_OID_FIELD_NAME",(function(){return h})),e(n.exports,"getCapabilities",(function(){return G})),e(n.exports,"findFeatureType",(function(){return R})),e(n.exports,"getWFSLayerInfo",(function(){return L})),e(n.exports,"prepareWFSLayerFields",(function(){return k})),e(n.exports,"getFeature",(function(){return W})),t("ixrNB");var a=t("bYA0c"),o=t("bPmsI"),i=t("koW6G"),s=t("lHg4e"),u=t("7dRCe"),l=t("5cP7j"),p=t("fau59"),c=t("jaTH0"),f=t("1QUpr"),d=t("a8LgY"),y=t("6JGRv"),m=t("4VorL"),g=t("jaaCV"),w=t("2WnyR");const b="xlink:href",T="2.0.0",h="__esri_wfs_id__",S="wfs-layer:getWFSLayerTypeInfo-error",F="wfs-layer:empty-service",x="wfs-layer:feature-type-not-found",C="wfs-layer:unknown-geometry-type",P="wfs-layer:unknown-field-type",N="wfs-layer:unsupported-spatial-reference",E="wfs-layer:unsupported-wfs-version";async function G(e,t){const n=function(e){const t=O(e);(function(e){const t=e.firstElementChild?.getAttribute("version");if(t&&t!==T)throw new(0,o.default)(E,`Unsupported WFS version ${t}. Supported version: 2.0.0`)})(t),X(t);const n=t.firstElementChild,r=(0,i.cache)(function(e){return(0,y.iterateXML)(e,{FeatureTypeList:{FeatureType:e=>{const t={typeName:"undefined:undefined",name:"",title:"",description:"",extent:null,namespacePrefix:"",namespaceUri:"",supportedSpatialReferences:[]},n=new Set([4326]),r=e=>{const t=parseInt(e.textContent?.match(/(?<wkid>\d+$)/i)?.groups?.wkid??"",10);Number.isNaN(t)||n.add(t)};return(0,y.visitXML)(e,{Name:e=>{const{name:n,prefix:r}=j(e.textContent);t.typeName=`${r}:${n}`,t.name=n,t.namespacePrefix=r,t.namespaceUri=e.lookupNamespaceURI(r)},Abstract:e=>{t.description=e.textContent},Title:e=>{t.title=e.textContent},WGS84BoundingBox:e=>{t.extent=function(e){let t,n,r,a;for(const o of e.children)switch(o.localName){case"LowerCorner":[t,n]=o.textContent.split(" ").map((e=>Number.parseFloat(e)));break;case"UpperCorner":[r,a]=o.textContent.split(" ").map((e=>Number.parseFloat(e)))}return{xmin:t,ymin:n,xmax:r,ymax:a,spatialReference:p.WGS84}}(e)},DefaultSRS:r,DefaultCRS:r,OtherSRS:r,OtherCRS:r}),t.title||(t.title=t.name),t.supportedSpatialReferences.push(...n),t}}})}(n));return{operations:A(n),get featureTypes(){return Array.from(r())},readFeatureTypes:r}}((await(0,a.default)(e,{responseType:"text",query:{SERVICE:"WFS",REQUEST:"GetCapabilities",VERSION:T,...t?.customParameters},signal:t?.signal})).data);return function(e,t){(0,u.isHTTPSProtocol)(e)&&((0,u.hasSameOrigin)(e,t.operations.DescribeFeatureType.url,!0)&&(t.operations.DescribeFeatureType.url=(0,u.toHTTPS)(t.operations.DescribeFeatureType.url)),(0,u.hasSameOrigin)(e,t.operations.GetFeature.url,!0)&&(t.operations.GetFeature.url=(0,u.toHTTPS)(t.operations.GetFeature.url)))}(e,n),n}const v=new Set(["json","application/json","geojson","application/json; subtype=geojson"]);function A(e){let t=!1;const n={GetCapabilities:{url:""},DescribeFeatureType:{url:""},GetFeature:{url:"",outputFormat:null,supportsPagination:!1}};if((0,y.visitXML)(e,{OperationsMetadata:{Operation:e=>{switch(e.getAttribute("name")){case"GetCapabilities":return{DCP:{HTTP:{Get:e=>{n.GetCapabilities.url=e.getAttribute(b)}}}};case"DescribeFeatureType":return{DCP:{HTTP:{Get:e=>{n.DescribeFeatureType.url=e.getAttribute(b)}}}};case"GetFeature":return{DCP:{HTTP:{Get:e=>{n.GetFeature.url=e.getAttribute(b)}}},Parameter:e=>{if("outputFormat"===e.getAttribute("name"))return{AllowedValues:{Value:e=>{const t=e.textContent;t&&v.has(t.toLowerCase())&&(n.GetFeature.outputFormat=t)}}}}}}},Constraint:e=>{switch(e.getAttribute("name")){case"KVPEncoding":return{DefaultValue:e=>{t="true"===e.textContent.toLowerCase()}};case"ImplementsResultPaging":return{DefaultValue:e=>{n.GetFeature.supportsPagination="true"===e.textContent.toLowerCase()}}}}}}),!t)throw new(0,o.default)("wfs-layer:kvp-encoding-not-supported","WFS service doesn't support key/value pair (KVP) encoding");if(null==n.GetFeature.outputFormat)throw new(0,o.default)("wfs-layer:geojson-not-supported","WFS service doesn't support GeoJSON output format");return n}function R(e,t,n){return(0,i.find)(e,(e=>n?e.name===t&&e.namespaceUri===n:e.typeName===t||e.name===t))}async function L(e,t,n,r={}){const{featureType:a,extent:i}=await async function(e,t,n,r={}){const{spatialReference:a=g.default.WGS84}=r,i=e.readFeatureTypes(),s=t?R(i,t,n):i.next().value;if(null==s)throw t?new(0,o.default)(x,`The type '${t}' could not be found in the service`):new(0,o.default)(F,"The service is empty");let u=new(0,w.default)({...s.extent,spatialReference:a});if(!(0,p.equals)(a,p.WGS84))try{await(0,l.initializeProjection)(p.WGS84,a,void 0,r),u=(0,l.project)(u,p.WGS84)}catch{throw new(0,o.default)(N,"Projection not supported")}return{extent:u,spatialReference:a,featureType:s}}(e,t,n,r),{fields:u,geometryType:c,swapXY:f,objectIdField:d,geometryField:y}=await async function(e,t,n={}){const[r,a]=await(0,s.eachAlways)([M(e.operations.DescribeFeatureType.url,t,n),D(e,t,n)]);if(r.error||a.error)throw new(0,o.default)(S,`An error occurred while getting info about the feature type '${t}'`,{error:r.error||a.error});const{fields:i,errors:u}=r.value??{},l=r.value?.geometryType||a.value?.geometryType,p=a.value?.swapXY??!1;if(null==l)throw new(0,o.default)(C,`The geometry type could not be determined for type '${t}`,{typeName:t,geometryType:l,fields:i,errors:u});return{...k(i??[]),geometryType:l,swapXY:p}}(e,a.typeName,r);return{url:e.operations.GetCapabilities.url,name:a.name,namespaceUri:a.namespaceUri,fields:u,geometryField:y,geometryType:c,objectIdField:d,spatialReference:r.spatialReference??g.default.WGS84,extent:i,swapXY:f,wfsCapabilities:e,customParameters:r.customParameters}}function k(e){const t=e.find((e=>"geometry"===e.type));let n=e.find((e=>"oid"===e.type));return e=e.filter((e=>"geometry"!==e.type)),n||(n=new(0,m.default)({name:h,type:"oid",alias:h}),e.unshift(n)),{geometryField:t?.name??null,objectIdField:n.name,fields:e}}async function D(e,t,n={}){let r,o=!1;const[i,s]=await Promise.all([W(e.operations.GetFeature.url,t,e.operations.GetFeature.outputFormat,{...n,count:1}),(0,a.default)(e.operations.GetFeature.url,{responseType:"text",query:I(t,void 0,{...n,count:1}),signal:n?.signal})]),u="FeatureCollection"===i.type&&i.features[0]?.geometry;if(u){let e;switch(r=c.featureGeometryTypeKebabDictionary.fromJSON((0,f.getGeometryType)(u.type)),u.type){case"Point":e=u.coordinates;break;case"LineString":case"MultiPoint":e=u.coordinates[0];break;case"MultiLineString":case"Polygon":e=u.coordinates[0][0];break;case"MultiPolygon":e=u.coordinates[0][0][0]}const t=/<[^>]*pos[^>]*> *(-?\d+(?:\.\d+)?) (-?\d+(?:\.\d+)?)/.exec(s.data);if(t){const n=e[0].toFixed(3),r=e[1].toFixed(3),a=parseFloat(t[1]).toFixed(3);n===parseFloat(t[2]).toFixed(3)&&r===a&&(o=!0)}}return{geometryType:r,swapXY:o}}async function M(e,t,n){return function(e,t){const{name:n}=j(e),r=O(t);X(r);const a=(0,i.find)((0,y.iterateXML)(r.firstElementChild,{element:e=>({name:e.getAttribute("name"),typeName:j(e.getAttribute("type")).name})}),(({name:e})=>e===n));if(null!=a){const e=(0,i.find)((0,y.iterateXML)(r.firstElementChild,{complexType:e=>e}),(e=>e.getAttribute("name")===a.typeName));if(null!=e)return function(e){const t=[],n=[];let r;const a=(0,y.iterateXML)(e,{complexContent:{extension:{sequence:{element:e=>e}}}});for(const i of a){const a=i.getAttribute("name");if(!a)continue;let s,u;if(i.hasAttribute("type")?s=j(i.getAttribute("type")).name:(0,y.visitXML)(i,{simpleType:{restriction:e=>(s=j(e.getAttribute("base")).name,{maxLength:e=>{u=+e.getAttribute("value")}})}}),!s)continue;const l="true"===i.getAttribute("nillable");let p=!1;switch(s.toLowerCase()){case"integer":case"nonpositiveinteger":case"negativeinteger":case"long":case"int":case"short":case"byte":case"nonnegativeinteger":case"unsignedlong":case"unsignedint":case"unsignedshort":case"unsignedbyte":case"positiveinteger":n.push(new(0,m.default)({name:a,alias:a,type:"integer",nullable:l}));break;case"float":case"double":case"decimal":n.push(new(0,m.default)({name:a,alias:a,type:"double",nullable:l}));break;case"boolean":case"string":case"gyearmonth":case"gyear":case"gmonthday":case"gday":case"gmonth":case"anyuri":case"qname":case"notation":case"normalizedstring":case"token":case"language":case"idrefs":case"entities":case"nmtoken":case"nmtokens":case"name":case"ncname":case"id":case"idref":case"entity":case"duration":case"time":n.push(new(0,m.default)({name:a,alias:a,type:"string",nullable:l,length:u??255}));break;case"datetime":case"date":n.push(new(0,m.default)({name:a,alias:a,type:"date",nullable:l,length:u??36}));break;case"pointpropertytype":r="point",p=!0;break;case"multipointpropertytype":r="multipoint",p=!0;break;case"curvepropertytype":case"multicurvepropertytype":case"multilinestringpropertytype":r="polyline",p=!0;break;case"surfacepropertytype":case"multisurfacepropertytype":case"multipolygonpropertytype":r="polygon",p=!0;break;case"geometrypropertytype":case"multigeometrypropertytype":p=!0,t.push(new(0,o.default)(C,`geometry type '${s}' is not supported`,{type:(new XMLSerializer).serializeToString(e)}));break;default:t.push(new(0,o.default)(P,`Unknown field type '${s}'`,{type:(new XMLSerializer).serializeToString(e)}))}p&&n.push(new(0,m.default)({name:a,alias:a,type:"geometry",nullable:l}))}for(const e of n)if("integer"===e.type&&!e.nullable&&U.has(e.name.toLowerCase())){e.type="oid";break}return{geometryType:r,fields:n,errors:t}}(e)}throw new(0,o.default)(x,`Type '${e}' not found in document`,{document:(new XMLSerializer).serializeToString(r)})}(t,(await(0,a.default)(e,{responseType:"text",query:{SERVICE:"WFS",REQUEST:"DescribeFeatureType",VERSION:T,TYPENAME:t,...n?.customParameters},signal:n?.signal})).data)}const U=new Set(["objectid","fid"]);async function W(e,t,n,r){let{data:i}=await(0,a.default)(e,{responseType:"text",query:I(t,n,r),signal:r?.signal});i=i.replaceAll(/": +(-?\d+),(\d+)(,)?/g,'": $1.$2$3');try{if(r?.dateFields?.length){const e=new Set(r.dateFields);return JSON.parse(i,((t,n)=>e.has(t)?(0,d.parseDate)(n):n))}return JSON.parse(i)}catch(e){throw new(0,o.default)("wfs-layer:malformed-json","Error while parsing the response",{response:i,error:e})}}function I(e,t,n){return{SERVICE:"WFS",REQUEST:"GetFeature",VERSION:T,TYPENAMES:e,OUTPUTFORMAT:t,SRSNAME:"EPSG:4326",STARTINDEX:n?.startIndex,COUNT:n?.count,...n?.customParameters}}function O(e){return(new DOMParser).parseFromString(e.trim(),"text/xml")}function j(e){const[t,n]=e.split(":");return{prefix:n?t:"",name:n??t}}function X(e){let t="",n="";if((0,y.visitXML)(e.firstElementChild,{Exception:e=>(t=e.getAttribute("exceptionCode"),{ExceptionText:e=>{n=e.textContent}})}),t)throw new(0,o.default)(`wfs-layer:${t}`,n)}})),t.register("a8LgY",(function(t,n){function r(e){return function(e){const t=a.exec(e);if(!t?.groups)return null;const n=t.groups,r=+n.year,o=+n.month-1,i=+n.day,s=+(n.hours??"0"),u=+(n.minutes??"0"),l=+(n.seconds??"0");if(s>23)return null;if(u>59)return null;if(l>59)return null;const p=n.ms??"0",c=p?+p.padEnd(3,"0").substring(0,3):0;let f;if(n.isUTC)f=Date.UTC(r,o,i,s,u,l,c);else if(n.offsetSign){const e=+n.offsetHours,t=+n.offsetMinutes;f=6e4*("+"===n.offsetSign?-1:1)*(60*e+t)+Date.UTC(r,o,i,s,u,l,c)}else f=new Date(r,o,i,s,u,l,c).getTime();return Number.isNaN(f)?null:f}(e)??function(e){const t=new Date(e).getTime();return Number.isNaN(t)?null:t}(e)}e(t.exports,"parseDate",(function(){return r}));const a=/^(?:(?<year>-?\d{4,})-(?<month>\d{2})-(?<day>\d{2}))(?:T(?<hours>\d{2}):(?<minutes>\d{2}):(?<seconds>\d{2})(?:\.(?<ms>\d+))?)?(?:(?<isUTC>Z)|(?:(?<offsetSign>\+|-)(?<offsetHours>\d{2}):(?<offsetMinutes>\d{2})))?$/}));
//# sourceMappingURL=WFSSourceWorker.45c92a5c.js.map
