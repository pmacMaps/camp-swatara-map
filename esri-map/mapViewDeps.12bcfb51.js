function e(e,t,n,i){Object.defineProperty(e,t,{get:n,set:i,enumerable:!0,configurable:!0})}var t=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire594f;t.register("4ZNdX",(function(n,i){e(n.exports,"brushes",(function(){return y}));var o=t("itWlV"),a=t("dnRR5"),r=t("adROs"),s=t("lW9ux"),l=t("fygbE"),u=t("c48sV"),c=t("bVXM2"),f=t("3o8Fm"),d=t("fRnN2"),_=t("01Udp"),m=t("k3EOw"),v=t("5tmA1"),p=t("f6RQI"),g=t("hEqYM"),h=t("ffM10"),x=t("2rCUj"),T=t("b1gIk");const y={marker:x.default,line:h.default,fill:p.default,text:T.default,label:g.default,clip:l.default,stencil:c.default,bitmap:s.default,raster:a.default,rasterVF:r.default,flow:o.default,tileInfo:u.default,vtlBackground:f.WGLBrushVTLBackground,vtlFill:_.WGLBrushVTLFill,vtlLine:m.WGLBrushVTLLine,vtlCircle:d.WGLBrushVTLCircle,vtlSymbol:v.WGLBrushVTLSymbol};f.WGLBrushVTLBackground,_.WGLBrushVTLFill,m.WGLBrushVTLLine,d.WGLBrushVTLCircle,v.WGLBrushVTLSymbol})),t.register("itWlV",(function(n,i){e(n.exports,"default",(function(){return s}));var o=t("1CpCt"),a=t("kUF3z"),r=t("l3QXd");class s extends a.default{dispose(){}prepareState(e){const{context:t}=e;t.setColorMask(!0,!0,!0,!0),t.setStencilFunction(r.CompareFunction.EQUAL,0,255)}draw(e,t){const{context:n}=e,{displayData:i}=t;if((0,o.isNone)(i))return;if("loaded"===i.state.name&&i.prepareForRendering(n),"attached"!==i.state.name)return;const a=i.state.resources;n.setFaceCullingEnabled(!1),n.setBlendingEnabled(!0),n.setBlendFunctionSeparate(r.BlendFactor.ONE,r.BlendFactor.ONE_MINUS_SRC_ALPHA,r.BlendFactor.ONE,r.BlendFactor.ONE);const s=[];"ramp"===a.values.lineColor.kind&&s.push("vvLineColor"),"ramp"===a.values.lineOpacity.kind&&s.push("vvLineOpacity"),"ramp"===a.values.lineRenderWidth.kind&&s.push("vvLineRenderWidth");const l=e.painter.materialManager.getProgram(e,{vsPath:"raster/flow",fsPath:"raster/flow",attributes:a.locations},s);n.useProgram(l),l.setUniform1f("u_time",e.time/1e3),l.setUniform1f("u_fadeDuration",i.flowStyle.renderSettings.fadeDuration),l.setUniform1f("u_lineSpeed",i.flowStyle.renderSettings.lineSpeed),l.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),l.setUniformMatrix3fv("u_displayViewMat3",e.state.displayViewMat3),u(l,"lineColor","vec4",i.flowStyle.renderSettings.lineColor),u(l,"lineOpacity","float",i.flowStyle.renderSettings.lineOpacity),u(l,"lineRenderWidth","float",i.flowStyle.renderSettings.lineRenderWidth),n.bindVAO(a.vertexArray),n.drawElements(r.PrimitiveType.TRIANGLES,a.indexBuffer.size,r.DataType.UNSIGNED_INT,0),i.flowStyle.animated&&t.requestRender()}}function l(e,t,n,i){switch(t){case"int":e.setUniform1iv(n,i);break;case"float":e.setUniform1fv(n,i);break;case"vec2":e.setUniform2fv(n,i);break;case"vec3":e.setUniform3fv(n,i);break;case"vec4":e.setUniform4fv(n,i)}}function u(e,t,n,i){"constant"===i.kind?l(e,n,`u_${t}`,i.value):(l(e,"float",`u_${t}_stops`,i.stops),l(e,n,`u_${t}_values`,i.values),l(e,"int",`u_${t}_count`,[i.count]))}})),t.register("kUF3z",(function(t,n){e(t.exports,"default",(function(){return i}));class i{prepareState(e,t,n){}draw(e,t,n){}drawMany(e,t,n){for(const i of t)this.draw(e,i,n)}constructor(){this.name=this.constructor.name||"UnnamedBrush"}}})),t.register("dnRR5",(function(n,i){e(n.exports,"default",(function(){return u}));var o=t("e0kjQ"),a=t("jIYmG"),r=t("kUF3z"),s=t("l3QXd"),l=t("bUYsd");class u extends r.default{dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},t){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(s.BlendFactor.ONE,s.BlendFactor.ONE_MINUS_SRC_ALPHA,s.BlendFactor.ONE,s.BlendFactor.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(s.CompareFunction.EQUAL,t.stencilRef,255)}draw(e,t){var n;if(!(0,o.hasSource)(t)||t.suspended)return;e.timeline.begin(this.name);const i=!(null!=(n=e.context.capabilities.textureFloat)&&n.textureFloatLinear);t.updateTexture(e);const a=this._getShaderVariations(t,i),r=e.painter.materialManager.getProgram(e,this._desc[t.symbolizerParameters.type],a);this._drawWithProgram(e.context,r,t),e.timeline.end(this.name)}_drawWithProgram(e,t,n,i=1,o=[0,0],r=!1){this._quad||(this._quad=new(0,a.default)(e,[0,0,1,0,0,1,1,1]));const{symbolizerParameters:s,transformGrid:u,width:c,height:f,opacity:d}=n,_=s.type;e.useProgram(t);const m=this._getShaderVariations(n),v=this._getUniformInfos(_,e,t,m),{names:p,textures:g}=n.getTextures();(0,l.setTextures)(e,t,p,g);const h=(0,l.getBasicGridUniforms)(i,o),x=(0,l.getCommonUniforms)(u,[c,f],[n.source.width,n.source.height],d,r);if((0,l.setUniforms)(t,v,{u_coordScale:n.coordScale,u_dvsMat3:n.transforms.dvs,...h,...x}),s.colormap){const{colormap:e,colormapOffset:n}=s,i=(0,l.getColormapUniforms)(e,n);(0,l.setUniforms)(t,v,i)}if("stretch"===s.type){const e=(0,l.getStretchUniforms)(s);(0,l.setUniforms)(t,v,e)}else if("hillshade"===s.type){const e=(0,l.getShadedReliefUniforms)(s);(0,l.setUniforms)(t,v,e)}this._quad.draw()}_getUniformInfos(e,t,n,i){const o=i.length>0?e+"-"+i.join("-"):e;if(this._rendererUniformInfos.has(o))return this._rendererUniformInfos.get(o);const a=(0,l.getUniformLocationInfos)(t,n);return this._rendererUniformInfos.set(o,a),a}_getShaderVariations(e,t=!1){const n=[],{interpolation:i}=e,{type:o,colormap:a}=e.symbolizerParameters;return"cubic"===i?n.push("bicubic"):"bilinear"===i&&"stretch"===o&&null!=a?(n.push("bilinear"),n.push("nnedge")):t&&"bilinear"===i&&n.push("bilinear"),e.isRendereredSource?n.push("noop"):a&&n.push("applyColormap"),e.transformGrid&&(n.push("applyProjection"),1===e.transformGrid.spacing[0]&&n.push("lookupProjection")),n}constructor(){super(...arguments),this._desc={lut:{vsPath:"raster/lut",fsPath:"raster/lut",attributes:new Map([["a_position",0],["a_texcoord",1]])},stretch:{vsPath:"raster/stretch",fsPath:"raster/stretch",attributes:new Map([["a_position",0],["a_texcoord",1]])},hillshade:{vsPath:"raster/hillshade",fsPath:"raster/hillshade",attributes:new Map([["a_position",0],["a_texcoord",1]])}},this._rendererUniformInfos=new Map}}})),t.register("e0kjQ",(function(n,i){e(n.exports,"RasterBitmap",(function(){return _})),e(n.exports,"hasSource",(function(){return m}));var o=t("1CpCt"),a=t("52822"),r=t("jsolS"),s=t("gLni9"),l=t("2wUG0"),u=t("5aS5k"),c=t("l3QXd"),f=t("bUYsd");const d={bandCount:3,outMin:0,outMax:1,minCutOff:[0,0,0],maxCutOff:[255,255,255],factor:[1/255,1/255,1/255],useGamma:!1,gamma:[1,1,1],gammaCorrection:[1,1,1],colormap:null,colormapOffset:null,stretchType:"none",type:"stretch"};class _ extends u.DisplayObject{destroy(){const e=this.getTextures();null==e||e.textures.forEach((e=>e.dispose())),this._rasterTexture=null,this._transformGridTexture=null,this._colormapTexture=null}get symbolizerParameters(){return this._symbolizerParameters||d}set symbolizerParameters(e){this._symbolizerParameters!==e&&(this._symbolizerParameters=e,this._colormapTextureInvalidated=!0)}get source(){return this._source}set source(e){this._source!==e&&(this._source=e,this._rasterTexture&&(this._rasterTexture.dispose(),this._rasterTexture=null,this._rasterTextureBandIds=null),this.invalidateTexture())}get suspended(){return this._suspended}set suspended(e){this._suspended&&!e&&this.stage&&(this.ready(),this.requestRender()),this._suspended=e}get bandIds(){return this._bandIds}set bandIds(e){this._bandIds=e,this._isBandIdschanged(e)&&this.invalidateTexture()}get interpolation(){return this._interpolation||"nearest"}set interpolation(e){this._interpolation=e,this._rasterTexture&&this._rasterTexture.setSamplingMode("bilinear"===this._getTextureSamplingMethod(e)?c.TextureSamplingMode.LINEAR:c.TextureSamplingMode.NEAREST)}get transformGrid(){return this._transformGrid}set transformGrid(e){this._transformGrid=e,this._transformGridTexture&&(this._transformGridTexture.dispose(),this._transformGridTexture=null)}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this.requestRender())}_createTransforms(){return{dvs:(0,r.c)()}}setTransform(e){const t=(0,a.b)(this.transforms.dvs),[n,i]=e.toScreenNoRotation([0,0],[this.x,this.y]),o=this.resolution/this.pixelRatio/e.resolution,r=o*this.width,l=o*this.height,u=Math.PI*this.rotation/180;(0,a.c)(t,t,(0,s.f)(n,i)),(0,a.c)(t,t,(0,s.f)(r/2,l/2)),(0,a.r)(t,t,-u),(0,a.c)(t,t,(0,s.f)(-r/2,-l/2)),(0,a.j)(t,t,(0,s.f)(r,l)),(0,a.m)(this.transforms.dvs,e.displayViewMat3,t)}getTextures(){if(!this._rasterTexture)return null;const e=[],t=[];return this._transformGridTexture&&(t.push(this._transformGridTexture),e.push("u_transformGrid")),this._rasterTexture&&(t.push(this._rasterTexture),e.push("u_image")),this._colormapTexture&&(t.push(this._colormapTexture),e.push("u_colormap")),{names:e,textures:t}}onAttach(){this.invalidateTexture()}onDetach(){this.invalidateTexture()}updateTexture({context:e}){var t,n,i;if(!this.stage)return null==(t=this._rasterTexture)||t.dispose(),null==(n=this._transformGridTexture)||n.dispose(),null==(i=this._colormapTexture)||i.dispose(),this._rasterTexture=null,this._rasterTextureBandIds=null,this._transformGridTexture=null,void(this._colormapTexture=null);const o=this._isValidSource(this.source);o&&this._colormapTextureInvalidated&&(this._colormapTextureInvalidated=!1,this._updateColormapTexture(e)),this._textureInvalidated&&(this._textureInvalidated=!1,this._createOrDestroyRasterTexture(e),this._rasterTexture&&(o?this.transformGrid&&!this._transformGridTexture&&(this._transformGridTexture=(0,f.createTransformTexture)(e,this.transformGrid)):this._rasterTexture.setData(null)),this.suspended||(this.ready(),this.requestRender()))}_createOrDestroyRasterTexture(e){var t,n;const i=(0,o.isSome)(this.source)?(0,l.extractBands)(this.source,this.bandIds):null;if(!this._isValidSource(i))return void(this._rasterTexture&&(this._rasterTexture.dispose(),this._rasterTextureBandIds=null,this._rasterTexture=null));const a=!this._isBandIdschanged(this.bandIds);if(this._rasterTexture){if(a)return;this._rasterTexture.dispose(),this._rasterTextureBandIds=null,this._rasterTexture=null}this._supportsBilinearTexture=null==(t=e.capabilities.textureFloat)?void 0:t.textureFloatLinear;const r=this._getTextureSamplingMethod(this.interpolation),s=this.isRendereredSource||!(null!=(n=e.capabilities.textureFloat)&&n.textureFloat);this._rasterTexture=(0,f.createRasterTexture)(e,i,r,s),this._rasterTextureBandIds=this.bandIds?[...this.bandIds]:null}_isBandIdschanged(e){const t=this._rasterTextureBandIds;return!(null==t&&null==e||t&&e&&t.join("")===e.join(""))}_isValidSource(e){var t;return(0,o.isSome)(e)&&(null==(t=e.pixels)?void 0:t.length)>0}_getTextureSamplingMethod(e){const{type:t,colormap:n}=this.symbolizerParameters,i="lut"===t||"stretch"===t&&(0,o.isSome)(n);return!this._supportsBilinearTexture||i||"bilinear"!==e&&"cubic"!==e?"nearest":"bilinear"}_updateColormapTexture(e){const t=this._colormap,n=this.symbolizerParameters.colormap;return n?t?n.length!==t.length||n.some(((e,n)=>e!==t[n]))?(this._colormapTexture&&(this._colormapTexture.dispose(),this._colormapTexture=null),this._colormapTexture=(0,f.createColormapTexture)(e,n),void(this._colormap=n)):void 0:(this._colormapTexture=(0,f.createColormapTexture)(e,n),void(this._colormap=n)):(this._colormapTexture&&(this._colormapTexture.dispose(),this._colormapTexture=null),void(this._colormap=null))}constructor(e=null,t=null,n=null){super(),this._textureInvalidated=!0,this._colormapTextureInvalidated=!0,this._supportsBilinearTexture=!0,this.stencilRef=0,this.coordScale=[1,1],this._symbolizerParameters=null,this.height=null,this.isRendereredSource=!1,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this.rawPixelData=null,this._suspended=!1,this._bandIds=null,this._interpolation=null,this._transformGrid=null,this.width=null,this.x=0,this.y=0,this.source=e,this.transformGrid=t,this.interpolation=n}}function m(e){return(0,o.isSome)(e.source)}})),t.register("bUYsd",(function(n,i){e(n.exports,"createRasterTexture",(function(){return s})),e(n.exports,"createTransformTexture",(function(){return l})),e(n.exports,"createColormapTexture",(function(){return u})),e(n.exports,"getCommonUniforms",(function(){return c})),e(n.exports,"getColormapUniforms",(function(){return f})),e(n.exports,"getBasicGridUniforms",(function(){return d})),e(n.exports,"getStretchUniforms",(function(){return _})),e(n.exports,"getShadedReliefUniforms",(function(){return m})),e(n.exports,"getUniformLocationInfos",(function(){return v})),e(n.exports,"setUniforms",(function(){return p})),e(n.exports,"setTextures",(function(){return g}));var o=t("7mnij"),a=t("l3QXd"),r=(t("gn7r1"),t("2HKUi"));function s(e,t,n="nearest",i=!1){var s;const l=!(i&&"u8"===t.pixelType),u=l?a.PixelType.FLOAT:a.PixelType.UNSIGNED_BYTE,c=null==t.pixels||0===t.pixels.length?null:l?t.getAsRGBAFloat():t.getAsRGBA(),f=null==(s=e.capabilities.textureFloat)?void 0:s.textureFloatLinear,d={width:t.width,height:t.height,target:a.TextureType.TEXTURE_2D,pixelFormat:a.PixelFormat.RGBA,internalFormat:e.type===o.ContextType.WEBGL2&&l?a.SizedPixelFormat.RGBA32F:a.PixelFormat.RGBA,samplingMode:!f||"bilinear"!==n&&"cubic"!==n?a.TextureSamplingMode.NEAREST:a.TextureSamplingMode.LINEAR,dataType:u,wrapMode:a.TextureWrapMode.CLAMP_TO_EDGE,flipped:!1};return new(0,r.Texture)(e,d,c)}function l(e,t){const{spacing:n,offsets:i,coefficients:s,size:[l,u]}=t,c=n[0]>1,f={width:c?4*l:l,height:u,target:a.TextureType.TEXTURE_2D,pixelFormat:a.PixelFormat.RGBA,internalFormat:e.type===o.ContextType.WEBGL2?a.SizedPixelFormat.RGBA32F:a.PixelFormat.RGBA,dataType:a.PixelType.FLOAT,samplingMode:a.TextureSamplingMode.NEAREST,wrapMode:a.TextureWrapMode.CLAMP_TO_EDGE,flipped:!1},d=new Float32Array(c?l*u*16:2*i.length);if(c)for(let e=0,t=0;e<s.length;e++)d[t++]=s[e],e%3==2&&(d[t++]=1);else for(let e=0;e<u;e++)for(let t=0;t<l;t++){const n=4*(e*l+t),o=2*(t*u+e);d[n]=i[o],d[n+1]=i[o+1],d[n+3]=-1===i[o]?0:1}return new(0,r.Texture)(e,f,d)}function u(e,t){const n={width:t.length/4,height:1,target:a.TextureType.TEXTURE_2D,pixelFormat:a.PixelFormat.RGBA,internalFormat:a.PixelFormat.RGBA,dataType:a.PixelType.UNSIGNED_BYTE,samplingMode:a.TextureSamplingMode.NEAREST,wrapMode:a.TextureWrapMode.CLAMP_TO_EDGE,flipped:!1};return new(0,r.Texture)(e,n,t)}function c(e,t,n,i=1,o=!0,a=!1){return{u_flipY:o,u_isFloatTexture:a,u_applyTransform:!!e,u_opacity:i,u_transformSpacing:e?e.spacing:null,u_transformGridSize:e?e.size:null,u_targetImageSize:t,u_srcImageSize:n}}function f(e,t){return{u_colormapOffset:t||0,u_colormapMaxIndex:e?e.length/4-1:null}}function d(e,t){return{u_scale:e,u_offset:t}}function _(e){return{u_bandCount:e.bandCount,u_minOutput:e.outMin,u_maxOutput:e.outMax,u_minCutOff:e.minCutOff,u_maxCutOff:e.maxCutOff,u_factor:e.factor,u_useGamma:e.useGamma,u_gamma:e.gamma,u_gammaCorrection:e.gammaCorrection}}function m(e){return{u_hillshadeType:e.hillshadeType,u_sinZcosAs:e.sinZcosAs,u_sinZsinAs:e.sinZsinAs,u_cosZs:e.cosZs,u_weights:e.weights,u_factor:e.factor,u_minValue:e.minValue,u_maxValue:e.maxValue}}function v(e,t){const n=e.gl,i=t.glName,o=n.getProgramParameter(i,n.ACTIVE_UNIFORMS),a=new Map;let r;for(let e=0;e<o;e++)r=n.getActiveUniform(i,e),r&&a.set(r.name,{location:n.getUniformLocation(i,r.name),info:r});return a}function p(e,t,n){Object.keys(n).forEach((i=>{const o=t.get(i)||t.get(i+"[0]");o&&function(e,t,n,i){if(null===i||null==n)return!1;const{info:o}=i;switch(o.type){case a.UniformType.FLOAT:o.size>1?e.setUniform1fv(t,n):e.setUniform1f(t,n);break;case a.UniformType.FLOAT_VEC2:e.setUniform2fv(t,n);break;case a.UniformType.FLOAT_VEC3:e.setUniform3fv(t,n);break;case a.UniformType.FLOAT_VEC4:e.setUniform4fv(t,n);break;case a.UniformType.FLOAT_MAT3:e.setUniformMatrix3fv(t,n);break;case a.UniformType.FLOAT_MAT4:e.setUniformMatrix4fv(t,n);break;case a.UniformType.INT:o.size>1?e.setUniform1iv(t,n):e.setUniform1i(t,n);break;case a.UniformType.BOOL:e.setUniform1i(t,n?1:0);break;case a.UniformType.INT_VEC2:case a.UniformType.BOOL_VEC2:e.setUniform2iv(t,n);break;case a.UniformType.INT_VEC3:case a.UniformType.BOOL_VEC3:e.setUniform3iv(t,n);break;case a.UniformType.INT_VEC4:case a.UniformType.BOOL_VEC4:e.setUniform4iv(t,n);break;default:return!1}}(e,i,n[i],o)}))}function g(e,t,n,i){n.length===i.length&&(i.some((e=>null==e))||n.some((e=>null==e))||n.forEach(((n,o)=>{t.setUniform1i(n,o),e.bindTexture(i[o],o)})))}})),t.register("jIYmG",(function(n,i){e(n.exports,"default",(function(){return l}));var o=t("g0mVO"),a=t("l3QXd"),r=t("4radX"),s=t("hSAA2");class l{bind(){this._vao.bind()}unbind(){this._vao.unbind()}dispose(){this._vao.dispose(!1),this._vertexBuffer.dispose()}draw(){this.rctx.bindVAO(this._vao),this.rctx.drawArrays(a.PrimitiveType.TRIANGLE_STRIP,0,this._count)}constructor(e,t){this.rctx=e,this._vertexBuffer=o.BufferObject.createVertex(e,a.Usage.STATIC_DRAW,new Uint16Array(t)),this._vao=new(0,r.VertexArrayObject)(e,new Map([["a_position",0]]),{geometry:[new(0,s.VertexElementDescriptor)("a_position",2,a.DataType.SHORT,0,4)]},{geometry:this._vertexBuffer}),this._count=t.length/2}}})),t.register("adROs",(function(n,i){e(n.exports,"default",(function(){return u}));var o=t("1CpCt"),a=t("kUF3z"),r=t("l3QXd");const s=new Float32Array([.27058823529411763,.4588235294117647,.7098039215686275,1,.396078431372549,.5372549019607843,.7215686274509804,1,.5176470588235295,.6196078431372549,.7294117647058823,1,.6352941176470588,.7058823529411765,.7411764705882353,1,.7529411764705882,.8,.7450980392156863,1,.8705882352941177,.8901960784313725,.7490196078431373,1,1,1,.7490196078431373,1,1,.8627450980392157,.6313725490196078,1,.9803921568627451,.7254901960784313,.5176470588235295,1,.9607843137254902,.596078431372549,.4117647058823529,1,.9294117647058824,.4588235294117647,.3176470588235294,1,.9098039215686274,.08235294117647059,.08235294117647059,1]),l={beaufort_ft:s,beaufort_m:s,beaufort_km:s,beaufort_mi:s,beaufort_kn:new Float32Array([.1568627450980392,.5725490196078431,.7803921568627451,1,.34901960784313724,.6352941176470588,.7294117647058823,1,.5058823529411764,.7019607843137254,.6705882352941176,1,.6274509803921569,.7607843137254902,.6078431372549019,1,.7490196078431373,.8313725490196079,.5411764705882353,1,.8549019607843137,.9019607843137255,.4666666666666667,1,.9803921568627451,.9803921568627451,.39215686274509803,1,.9882352941176471,.8352941176470589,.3254901960784314,1,.9882352941176471,.7019607843137254,.4,1,.9803921568627451,.5529411764705883,.20392156862745098,1,.9686274509803922,.43137254901960786,.16470588235294117,1,.9411764705882353,.2784313725490196,.11372549019607843,1]),classified_arrow:new Float32Array([.2196078431372549,.6588235294117647,0,1,.5450980392156862,1.2117647058823529,0,1,1,1,0,1,1,.5019607843137255,0,1,1,0,0,1]),ocean_current_m:new Float32Array([.3058823529411765,.10196078431372549,.6,1,.7019607843137254,.10588235294117647,.10196078431372549,1,.792156862745098,.5019607843137255,.10196078431372549,1,.6941176470588235,.6941176470588235,.6941176470588235,1]),ocean_current_kn:new Float32Array([0,0,0,1,0,.1450980392156863,.39215686274509803,1,.3058823529411765,.10196078431372549,.6,1,.592156862745098,0,.39215686274509803,1,.7019607843137254,.10588235294117647,.10196078431372549,1,.6941176470588235,.3058823529411765,.10196078431372549,1,.792156862745098,.5019607843137255,.10196078431372549,1,.6941176470588235,.7019607843137254,.20392156862745098,1,.6941176470588235,.6941176470588235,.6941176470588235,1]),single_arrow:new Float32Array([0,92/255,230/255,1]),wind_speed:new Float32Array([0,0,0,1])};class u extends a.default{dispose(){}prepareState({context:e},t){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(r.BlendFactor.ONE,r.BlendFactor.ONE_MINUS_SRC_ALPHA,r.BlendFactor.ONE,r.BlendFactor.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilOp(r.StencilOperation.KEEP,r.StencilOperation.KEEP,r.StencilOperation.REPLACE),e.setStencilFunction(r.CompareFunction.EQUAL,t.stencilRef,255)}draw(e,t){if((0,o.isNone)(t.source)||0===t.source.validPixelCount)return;const{timeline:n}=e;if(n.begin(this.name),t.updateVectorFieldVAO(e),"scalar"===e.renderPass){const n=t.vaoData.scalar;n&&this._drawScalars(e,t,n.vao,n.elementCount)}else{const n=t.vaoData.magdir;n&&this._drawTriangles(e,t,n.vao,n.elementCount)}n.end(this.name)}_drawTriangles(e,t,n,i){const{context:o,painter:a}=e,{symbolizerParameters:s}=t,u=s.dataRange?["dataRange"]:[];"geographic"===s.rotationType&&u.push("rotationGeographic");const c=a.materialManager.getProgram(e,this._desc.magdir,u);o.useProgram(c);const{coordScale:f,opacity:d,transforms:_}=t;c.setUniform2fv("u_coordScale",f),c.setUniform1f("u_opacity",d),c.setUniformMatrix3fv("u_dvsMat3",_.dvs);const{style:m,dataRange:v,rotation:p,symbolPercentRange:g}=s;c.setUniform4fv("u_colors",l[m]||l.single_arrow),c.setUniform2fv("u_dataRange",v),c.setUniform1f("u_rotation",p),c.setUniform2fv("u_symbolPercentRange",g);const h=this._getSymbolSize(e,t);c.setUniform2fv("u_symbolSize",h),o.bindVAO(n),o.drawElements(r.PrimitiveType.TRIANGLES,i,r.DataType.UNSIGNED_INT,0)}_drawScalars(e,t,n,i){const{context:o,painter:a}=e,{symbolizerParameters:s}=t,l=[];"wind_speed"===s.style?l.push("innerCircle"):s.dataRange&&l.push("dataRange"),"geographic"===s.rotationType&&l.push("rotationGeographic");const u=a.materialManager.getProgram(e,this._desc.scalar,l);o.useProgram(u);const{coordScale:c,opacity:f,transforms:d}=t;u.setUniform2fv("u_coordScale",c),u.setUniform1f("u_opacity",f),u.setUniformMatrix3fv("u_dvsMat3",d.dvs);const{dataRange:_,symbolPercentRange:m}=s;u.setUniform2fv("u_dataRange",_),u.setUniform2fv("u_symbolPercentRange",m);const v=this._getSymbolSize(e,t);u.setUniform2fv("u_symbolSize",v),o.bindVAO(n),o.drawElements(r.PrimitiveType.TRIANGLES,i,r.DataType.UNSIGNED_INT,0)}_getSymbolSize(e,t){const n=t.key?2**(e.displayLevel-t.key.level):t.resolution/e.state.resolution,{symbolTileSize:i}=t.symbolizerParameters;return[i/(Math.round((t.width-t.offset[0])/i)*i)/n,i/(Math.round((t.height-t.offset[1])/i)*i)/n]}constructor(){super(...arguments),this._desc={magdir:{vsPath:"raster/magdir",fsPath:"raster/magdir",attributes:new Map([["a_pos",0],["a_offset",1],["a_vv",2]])},scalar:{vsPath:"raster/scalar",fsPath:"raster/scalar",attributes:new Map([["a_pos",0],["a_offset",1],["a_vv",2]])}}}}})),t.register("lW9ux",(function(n,i){e(n.exports,"default",(function(){return u}));var o=t("aPQ4T"),a=t("jIYmG"),r=t("kUF3z"),s=t("l3QXd");const l={nearest:{defines:[],samplingMode:s.TextureSamplingMode.NEAREST,mips:!1},bilinear:{defines:[],samplingMode:s.TextureSamplingMode.LINEAR,mips:!1},bicubic:{defines:["bicubic"],samplingMode:s.TextureSamplingMode.LINEAR,mips:!1},trilinear:{defines:[],samplingMode:s.TextureSamplingMode.LINEAR_MIPMAP_LINEAR,mips:!0}};class u extends r.default{dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},t){e.setBlendingEnabled(!0),"additive"===t.blendFunction?e.setBlendFunctionSeparate(s.BlendFactor.ONE,s.BlendFactor.ONE,s.BlendFactor.ONE,s.BlendFactor.ONE):e.setBlendFunctionSeparate(s.BlendFactor.ONE,s.BlendFactor.ONE_MINUS_SRC_ALPHA,s.BlendFactor.ONE,s.BlendFactor.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(s.CompareFunction.EQUAL,t.stencilRef,255)}draw(e,t){const{context:n,renderingOptions:i,painter:r}=e;if(!t.source)return;e.timeline.begin(this.name),this._quad||(this._quad=new(0,a.default)(n,[0,0,1,0,0,1,1,1]));const s=((e,t,n)=>{if("dynamic"===n.samplingMode){const{state:n}=e,i=t.resolution/t.pixelRatio/n.resolution,o=Math.round(e.pixelRatio)!==e.pixelRatio,a=i>1.05||i<.95;return n.rotation||a||o||t.isSourceScaled||t.rotation?l.bilinear:l.nearest}return l[n.samplingMode]})(e,t,i),u=r.materialManager.getProgram(e,this._desc,s.defines),{coordScale:c,computedOpacity:f,transforms:d}=t;t.setSamplingProfile(s),t.bind(e.context,o.TEXTURE_BINDING_BITMAP),n.useProgram(u),u.setUniformMatrix3fv("u_dvsMat3",d.dvs),u.setUniform1i("u_texture",o.TEXTURE_BINDING_BITMAP),u.setUniform2fv("u_coordScale",c),u.setUniform1f("u_opacity",f),this._quad.draw(),e.timeline.end(this.name)}constructor(){super(...arguments),this._desc={vsPath:"raster/bitmap",fsPath:"raster/bitmap",attributes:new Map([["a_position",0],["a_texcoord",1]])}}}})),t.register("fygbE",(function(n,i){e(n.exports,"default",(function(){return f}));var o=t("1CpCt"),a=t("bnsvn"),r=t("cPgEa"),s=t("kUF3z"),l=t("6b7jA"),u=t("l3QXd"),c=t("9YlKP");class f extends s.default{dispose(){this._program&&this._program.dispose()}prepareState({context:e}){e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setFaceCullingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(u.StencilOperation.KEEP,u.StencilOperation.KEEP,u.StencilOperation.REPLACE),e.setStencilWriteMask(255),e.setStencilFunction(u.CompareFunction.ALWAYS,0,255)}draw(e,t){const{context:n,state:i}=e,a=(0,r.createProgramDescriptor)("clip",{geometry:[{location:0,name:"a_pos",count:2,type:u.DataType.SHORT}]}),s=t.getVAO(n,i,a.attributes,a.bufferLayouts);(0,o.isNone)(s.indexBuffer)||(this._program||(this._program=(0,c.createProgram)(n,l.background)),n.useProgram(this._program),this._program.setUniform2fv("u_coord_range",[1,1]),this._program.setUniform4fv("u_color",this._color),this._program.setUniformMatrix3fv("u_dvsMat3",i.displayMat3),n.bindVAO(s),n.drawElements(u.PrimitiveType.TRIANGLES,s.indexBuffer.size,u.DataType.UNSIGNED_INT,0),n.bindVAO())}constructor(){super(...arguments),this._color=(0,a.f)(0,1,0,1)}}})),t.register("bnsvn",(function(t,n){function i(){return new Float32Array(4)}function o(e,t,n,i){const o=new Float32Array(4);return o[0]=e,o[1]=t,o[2]=n,o[3]=i,o}function a(){return i()}function r(){return o(1,1,1,1)}function s(){return o(1,0,0,0)}function l(){return o(0,1,0,0)}function u(){return o(0,0,1,0)}function c(){return o(0,0,0,1)}e(t.exports,"f",(function(){return o}));const f=a(),d=r(),_=s(),m=l(),v=u(),p=c();Object.freeze({__proto__:null,create:i,clone:function(e){const t=new Float32Array(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},fromValues:o,createView:function(e,t){return new Float32Array(e,t,4)},zeros:a,ones:r,unitX:s,unitY:l,unitZ:u,unitW:c,ZEROS:f,ONES:d,UNIT_X:_,UNIT_Y:m,UNIT_Z:v,UNIT_W:p})})),t.register("6b7jA",(function(n,i){e(n.exports,"background",(function(){return a}));var o=t("hvFId");const a={shaders:{vertexShader:(0,o.resolveIncludes)("background/background.vert"),fragmentShader:(0,o.resolveIncludes)("background/background.frag")},attributes:new Map([["a_pos",0]])}})),t.register("hvFId",(function(n,i){e(n.exports,"resolveIncludes",(function(){return r}));var o=t("4DA8s");const a=new(0,t("4uTS8").ShaderCompiler)((function(e){let t=o.default;return e.split("/").forEach((e=>{t&&(t=t[e])})),t}));function r(e){return a.resolveIncludes(e)}})),t.register("4DA8s",(function(t,n){e(t.exports,"default",(function(){return i}));const i={background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\ngl_FragColor = u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nlowp vec4 color = texture2D(u_tex, v_uv);\ngl_FragColor = color *  u_opacity;\n}","bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_pos, 0.0, 1.0);\nv_uv = a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\nreturn max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\nfloat vIn = rgb2v(Cb);\nvec3 hsvTint = rgb2hsv(Cs);\nvec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\nreturn hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\nreturn (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\nreturn (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\nreturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\nif (Cs <= 0.5) {\nreturn Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n}\nif (Cb <= 0.25) {\nreturn Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n}\nreturn Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\nreturn min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\nreturn max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\nreturn dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\nreturn maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\nfloat lum = lumv3(color);\nfloat mincol = minv3(color);\nfloat maxcol = maxv3(color);\nif (mincol < 0.0) {\ncolor = lum + ((color - lum) * lum) / (lum - mincol);\n}\nif (maxcol > 1.0) {\ncolor = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n}\nreturn color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\nfloat lbase = lumv3(cbase);\nfloat llum = lumv3(clum);\nfloat ldiff = llum - lbase;\nvec3 color = cbase + vec3(ldiff);\nreturn clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\nfloat minbase = minv3(cbase);\nfloat sbase = satv3(cbase);\nfloat ssat = satv3(csat);\nvec3 color;\nif (sbase > 0.0) {\ncolor = (cbase - minbase) * ssat / sbase;\n} else {\ncolor = vec3(0.0);\n}\nreturn setLum(color, clum);\n}\nvoid main() {\nvec4 src = texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\ngl_FragColor = src *  u_opacity;\n#else\nvec4 dst = texture2D(u_backbufferTexture, v_uv);\nvec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\nvec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\nfloat as = u_opacity * src.a;\nfloat ab = dst.a;\n#ifdef DESTINATION_OVER\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n#endif\n#ifdef SOURCE_IN\nvec4 color = vec4(as * Cs * ab, as * ab);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef DESTINATION_IN\nvec4 color = vec4(ab * Cb * as, ab * as);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef SOURCE_OUT\ngl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n#endif\n#ifdef DESTINATION_OUT\ngl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n#endif\n#ifdef SOURCE_ATOP\ngl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n#endif\n#ifdef DESTINATION_ATOP\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n#endif\n#ifdef XOR\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\nas * (1.0 - ab) + ab * (1.0 - as));\n#endif\n#ifdef MULTIPLY\ngl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\nas + ab * (1.0 - as));\n#endif\n#ifdef SCREEN\ngl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef OVERLAY\nvec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DARKEN\ngl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LIGHTER\ngl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\n#endif\n#ifdef LIGHTEN\ngl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_DODGE\nvec3 f = vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_BURN\nvec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HARD_LIGHT\nvec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SOFT_LIGHT\nvec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DIFFERENCE\ngl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef EXCLUSION\nvec3 f = Cs + Cb - 2.0 * Cs * Cb;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef INVERT\ngl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n#endif\n#ifdef VIVID_LIGHT\nvec3 f = vec3(vividLight(Cb.r, Cs.r),\nvividLight(Cb.g, Cs.g),\nvividLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HUE\nvec3 f = setLumSat(Cs,Cb,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SATURATION\nvec3 f = setLumSat(Cb,Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR\nvec3 f = setLum(Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LUMINOSITY\nvec3 f = setLum(Cb,Cs);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef PLUS\ngl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n#endif\n#ifdef MINUS\ngl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n#endif\n#ifdef AVERAGE\nvec3 f = (Cb + Cs) / 2.0;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef REFLECT\nvec3 f = vec3(reflectBlend(Cb.r, Cs.r),\nreflectBlend(Cb.g, Cs.g),\nreflectBlend(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#endif\n}","blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_position , 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"},dot:{dot:{"dot.frag":"precision mediump float;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nuniform highp float u_tileZoomFactor;\nvoid main()\n{\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\ngl_FragColor = v_color * alpha;\n}","dot.vert":"precision highp float;\nattribute vec2 a_pos;\nuniform sampler2D u_texture;\nuniform highp mat3 u_dvsMat3;\nuniform highp float u_tileZoomFactor;\nuniform highp float u_dotSize;\nuniform highp float u_pixelRatio;\nvarying vec2 v_pos;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nconst float EPSILON = 0.000001;\nvoid main()\n{\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\n0., -1., 0.,\n0., 1., 1.  );\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\nv_color = texture2D(u_texture, texCoords.xy);\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\nfloat z = 0.;\nz += 2.0 * step(v_color.a, EPSILON);\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\nv_dotRatio = u_dotSize / gl_PointSize;\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\n}"}},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\nfloat b = 1.0 / 6.0;\nfloat v2 = v * v;\nfloat v3 = v2 * v;\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\nfloat w3 = b * v3;\nreturn vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\nvec4 w = computeWeights(v);\nfloat g0 = w.x + w.y;\nfloat g1 = w.z + w.w;\nfloat h0 = 1.0 - (w.y / g0) + v;\nfloat h1 = 1.0 + (w.w / g1) - v;\nreturn vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\nvec2 texel = coords * texSize - 0.5;\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\nvec2 coords10 = coords + hgX.x * eX;\nvec2 coords00 = coords - hgX.y * eX;\nvec2 coords11 = coords10 + hgY.x * eY;\nvec2 coords01 = coords00 + hgY.x * eY;\ncoords10 = coords10 - hgY.y * eY;\ncoords00 = coords00 - hgY.y * eY;\nvec4 color00 = texture2D(sampler, coords00);\nvec4 color10 = texture2D(sampler, coords10);\nvec4 color01 = texture2D(sampler, coords01);\nvec4 color11 = texture2D(sampler, coords11);\ncolor00 = mix(color00, color01, hgY.z);\ncolor10 = mix(color10, color11, hgY.z);\ncolor00 = mix(color00, color10, hgX.z);\nreturn color00;\n}","bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 texelStart = floor(coords * texSize);\nvec2 coord0 = texelStart / texSize;\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\nvec4 color0 = texture2D(sampler, coord0);\nvec4 color1 = texture2D(sampler, coord1);\nvec4 color2 = texture2D(sampler, coord2);\nvec4 color3 = texture2D(sampler, coord3);\nvec2 blend = fract(coords * texSize);\nvec4 color01 = mix(color0, color1, blend.x);\nvec4 color23 = mix(color2, color3, blend.x);\nvec4 color = mix(color01, color23, blend.y);\n#ifdef NNEDGE\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\n#endif\nreturn color;\n}","epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\nvec2 invSize = 1.0 / texSize;\nvec2 texel = coords * texSize;\nvec2 texel_i = floor(texel);\nvec2 texel_frac = fract(texel);\nvec4 colorP = texture2D(sampler, texel_i * invSize);\nvec4 colorP1 = vec4(colorP);\nvec4 colorP2 = vec4(colorP);\nvec4 colorP3 = vec4(colorP);\nvec4 colorP4 = vec4(colorP);\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\ncolorP1 = colorA;\n}\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\ncolorP2 = colorB;\n}\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\ncolorP3 = colorC;\n}\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\ncolorP4 = colorD;\n}\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\nreturn mix(colorP12, colorP34, texel_frac.y);\n}"},fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include <materials/utils.glsl>\nvoid main()\n{\n#ifdef DELTA\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\nvec4 data0 = texture2D(u_maskTexture, v_texcoord);\nfloat flags = data0.r * 255.0;\nfloat groupMinZoom = data0.g * 255.0;\nfloat isVisible = getFilterBit(flags, 0);\nfloat wouldClip = step(groupMinZoom, u_zoomLevel);\nfloat direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\nfloat dt = u_timeDelta / max(u_animationTime, 0.0001);\nvec4 nextState = vec4(texel + direction * dt);\ngl_FragColor =  vec4(nextState);\n#elif defined(UPDATE)\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\ngl_FragColor = texel;\n#endif\n}","integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump float u_sigma;\nuniform sampler2D u_texture;\nmediump float gauss1(mediump vec2 dir) {\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\nreturn u_channelSelector * sample;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\nmediump float w = gauss1(i * u_direction.xy);\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\nweight += w;\n}\nvoid main(void) {\nmediump float tot = 0.0;\nmediump float weight = 0.0;\naccumGauss1(-5.0, tot, weight);\naccumGauss1(-4.0, tot, weight);\naccumGauss1(-3.0, tot, weight);\naccumGauss1(-2.0, tot, weight);\naccumGauss1(-1.0, tot, weight);\naccumGauss1(0.0, tot, weight);\naccumGauss1(1.0, tot, weight);\naccumGauss1(2.0, tot, weight);\naccumGauss1(3.0, tot, weight);\naccumGauss1(4.0, tot, weight);\naccumGauss1(5.0, tot, weight);\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}","highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump float u_sigma;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\nmediump float y = texture2D(u_texture, v_texcoord)[3];\nconst mediump float y0 = 0.5;\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\nmediump float d = (y - y0) / m0;\nreturn d;\n}\nmediump vec4 shade(mediump float d) {\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\nmediump float d = estimateDistance();\ngl_FragColor = shade(d);\n}","textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlayTexture;\nuniform bool u_maskEnabled;\nuniform bool u_overlayEnabled;\nvarying mediump vec2 v_texCoord;\nconst lowp float barrelFactor = 1.1;\nlowp vec2 barrel(lowp vec2 uv) {\nlowp vec2 uvn = uv * 2.0 - 1.0;\nif (uvn.x == 0.0 && uvn.y == 0.0) {\nreturn vec2(0.5, 0.5);\n}\nlowp float theta = atan(uvn.y, uvn.x);\nlowp float r = pow(length(uvn), barrelFactor);\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main(void)\n{\nlowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\ncolor = (color + (1.0 - color.a) * u_background);\nlowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\ncolor *= mask;\nlowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\n}","magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec4 u_drawPos;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\nv_texCoord = a_pos;\ngl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\nhighp vec3  texel = unpackDisplayIdTexel(id);\nhighp float size = float(u_attributeTextureSize);\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\nhighp float col = mod(u32, size);\nhighp float row = (u32 - col) / size;\nhighp float u = col / size;\nhighp float v = row / size;\nreturn vec2(u, v);\n}\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(u_attributeTextureSize));\n}\nhighp vec4 getAttributeData0(in highp vec3 id) {\nvec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData3, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\nbool isMagic = v.x == 255.0 && v.y == 255.0;\nif (isMagic) {\nreturn NAN_MAGIC_NUMBER;\n}\nreturn (v.x + v.y * float(0x100)) - 32768.0;\n}","constants.glsl":"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float SIGNED_BYTE_TO_UNSIGNED = 128.0;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.00001;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\nconst int BITSET_LINE_SCALE_DASH = 2;",fill:{"common.glsl":"#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\n#endif\n#ifdef DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying highp vec3 v_id;\nvarying lowp vec4 v_color;\nvarying lowp float v_opacity;\nvarying mediump vec4 v_aux1;\n#ifdef PATTERN\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef OUTLINED_FILL\nvarying lowp float v_isOutline;\n#endif\n#ifdef DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif","fill.frag":"precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#ifdef DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\n#ifdef OUTLINED_FILL\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\nlowp vec4 drawLine() {\nfloat v_lineWidth = v_aux1.x;\nvec2  v_normal    = v_aux1.yz;\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineWidth,\nv_opacity,\nv_id\n);\nreturn shadeLine(inputs);\n}\n#endif\nlowp vec4 drawFill() {\nlowp vec4 out_color = vec4(0.);\n#ifdef HITTEST\nout_color = vec4(1.0, 0.0, 0.0, 0.0);\n#elif defined(PATTERN)\nmediump vec4 v_tlbr = v_aux1;\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color = texture2D(u_texture, samplePos);\nout_color = v_opacity * v_color * color;\n#elif defined(DOT_DENSITY) && !defined(HIGHLIGHT)\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\nvec4 isPositive0 = step(0.0, difference0);\nvec4 isPositive1 = step(0.0, difference1);\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\nfloat lessThanEqZero = step(weightSum, 0.0);\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\nfloat divisor = (weightSum + lessThanEqZero);\nvec4 weights0 = difference0 * isPositive0 / divisor;\nvec4 weights1 = difference1 * isPositive1 / divisor;\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\nfloat diffMax = max(max4(difference0), max4(difference1));\nfloat lessThanZero = step(diffMax, 0.0);\nfloat greaterOrEqZero = 1.0 - lessThanZero;\nvec4 isMax0 = step(diffMax, difference0);\nvec4 isMax1 = step(diffMax, difference1);\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\nout_color = preEffectColor;\n#else\nout_color = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\nout_color.a = 1.0;\n#endif\nreturn out_color;\n}\nvoid main() {\n#ifdef OUTLINED_FILL\nif (v_isOutline > 0.5) {\ngl_FragColor = drawLine();\n} else {\ngl_FragColor = drawFill();\n}\n#else\ngl_FragColor = drawFill();\n#endif\n}","fill.vert":"#define PACKED_LINE\nprecision highp float;\nattribute float a_bitset;\n#ifdef DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_aux2;\nattribute vec4 a_aux3;\n#ifndef SIMPLE\nattribute vec4 a_aux1;\nattribute vec2 a_zoomRange;\n#else\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#endif\n#endif\nuniform vec2 u_tileOffset;\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#include <materials/fill/hittest.glsl>\n#ifdef DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\n#ifdef OUTLINED_FILL\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\nLineData outputs = buildLine(\nout_pos,\na_id,\na_pos,\na_color,\n(a_aux3.xy - 128.) / 16.,\n(a_aux3.zw - 128.) / 16.,\n0.,\na_aux2.z / 16.,\na_bitset,\nvec4(0.),\nvec2(0.),\na_aux2.w / 16.\n);\nv_id      = outputs.id;\nv_color   = outputs.color;\nv_opacity = outputs.opacity;\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\nout_color = outputs.color;\n}\n#endif\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\nfloat a_bitSet = a_bitset;\nv_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nout_color = v_color;\n#ifdef DOT_DENSITY\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\n0., -2. / 512.,  0.,\n-1.,  1.,  1.  );\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\n#else\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n#endif\n#ifdef PATTERN\nvec4  a_tlbr   = a_aux1;\nfloat a_width  = a_aux2.x;\nfloat a_height = a_aux2.y;\nvec2  a_offset = a_aux2.zw;\nvec2  a_scale  = a_aux3.xy;\nfloat a_angle  = a_aux3.z;\nvec2 scale = (1.0 / SIGNED_BYTE_TO_UNSIGNED) * a_scale;\nfloat width = u_pixelRatio * u_zoomFactor * a_width * scale.x;\nfloat height = u_pixelRatio * u_zoomFactor * a_height * scale.y;\nfloat angle = C_256_TO_RAD * a_angle;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n-sinA / width, cosA / height, 0,\n0,            0,             1);\nvec2 tileOffset = vec2(u_tileOffset.x * cosA - u_tileOffset.y * sinA, u_tileOffset.x * sinA + u_tileOffset.y * cosA);\ntileOffset = mod(tileOffset, vec2(a_aux2.x, a_aux2.y));\nvec2 symbolOffset = (a_offset - tileOffset - SIGNED_BYTE_TO_UNSIGNED) / vec2(width, height);\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\n#elif defined(DOT_DENSITY)\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n}\n#ifdef HITTEST\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\n#ifdef OUTLINED_FILL\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\nout_pos = vec3(0., 0., 2.);\nreturn;\n}\n#endif\nout_pos = hittestFill();\ngl_PointSize = 1.0;\n}\n#elif defined(OUTLINED_FILL)\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\nif (v_isOutline > 0.5) {\ndrawLine(out_color, out_pos);\n} else {\ndrawFill(out_color, out_pos);\n}\n}\n#else\n#define draw drawFill\n#endif\nvoid main()\n{\nINIT;\nlowp vec4 color = vec4(0.);\nhighp vec3 pos  = vec3(0.);\ndraw(color, pos);\ngl_Position = vec4(clip(color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nconst float EPSILON_PARALLEL = 0.05;\nbool hasSameSide(vec3 p0, vec3 p1, vec3 a, vec3 b) {\nvec3 cp0 = cross(b - a, p0 - a);\nvec3 cp1 = cross(b - a, p1 - a);\nreturn dot(cp0, cp1) >= 0.;\n}\nbool intersectPointTriangle(vec3 p, vec3 a, vec3 b, vec3 c) {\nreturn hasSameSide(p, a, b, c) && hasSameSide(p, b, a, c) && hasSameSide(p, c, a, b);\n}\nbool intersectCircleTriange(vec3 p, vec3 a, vec3 b, vec3 c, float radius) {\nvec2 ba = b.xy - a.xy;\nvec2 ca = c.xy - a.xy;\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\nbool isParallel = crossProduct < EPSILON_PARALLEL && crossProduct > -EPSILON_PARALLEL;\nif (isParallel) {\nreturn false;\n}\nif (distance(p, a) <= radius) {\nreturn true;\n}\nif (distance(p, b) <= radius) {\nreturn true;\n}\nif (distance(p, c) <= radius) {\nreturn true;\n}\nvec3 p0 = p - normalize(p - a) * radius;\nif (intersectPointTriangle(p0, a, b, c)) {\nreturn true;\n}\nvec3 p1 = p - normalize(p - b) * radius;\nif (intersectPointTriangle(p1, a, b, c)) {\nreturn true;\n}\nvec3 p2 = p - normalize(p - c) * radius;\nreturn intersectPointTriangle(p2, a, b, c);\n}\nvec3 hittestFill() {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nvec3  hittestPos = vec3(u_hittestPos, 1.);\nfloat hittestDist = u_hittestDist;\nif (!intersectCircleTriange(hittestPos, pos, pos1, pos2, hittestDist)) {\noutTextureCoords.z += 2.0;\n}\nreturn outTextureCoords;\n}\n#endif"},hittest:{"common.glsl":"#ifdef HITTEST\nuniform float u_hittestDist;\nuniform highp vec2 u_hittestPos;\n#endif"},icon:{"common.glsl":"uniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying highp float v_filters;\nvarying lowp float v_opacity;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nvec3 hittestMarker(vec2 size) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\nvec3  hittestPos = vec3(u_hittestPos, 1.);\nfloat hittestDist = u_hittestDist;\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nfloat maxHalfSize = max(size.x, size.y) / 2.;\nif (distance(pos, hittestPos) - maxHalfSize > hittestDist) {\noutTextureCoords.z += 2.0;\n}\nreturn outTextureCoords;\n}\n#endif","icon.frag":"precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/icon/common.glsl>\nuniform lowp sampler2D u_texture;\n#ifdef HITTEST\nvec4 getColor() {\nreturn vec4(1.);\n}\n#elif defined(SDF)\nvec4 getColor() {\nvec2 v_size = v_sizeTex.xy;\nvec2 v_tex  = v_sizeTex.zw;\nlowp vec4 fillPixelColor = v_color;\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\nfloat size = max(v_size.x, v_size.y);\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\nfloat outlineWidth = v_outlineWidth;\n#ifdef HIGHLIGHT\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\n#endif\nif (outlineWidth > 0.25) {\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\nfloat clampedOutlineSize = min(outlineWidth, size);\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n}\nreturn v_opacity * fillPixelColor;\n}\n#else\nvec4 getColor() {\nvec2 v_tex  = v_sizeTex.zw;\nlowp vec4 texColor = texture2D(u_texture, v_tex);\nreturn v_opacity * texColor * v_color;\n}\n#endif\nvoid main()\n{\nvec4 color = getColor();\n#ifdef HIGHLIGHT\ncolor.a = step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor = color;\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\n#include <materials/icon/hittest.glsl>\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\nvec2 outSize = baseSize;\n#ifdef VV_SIZE\nfloat r = getSize(referenceSize) / referenceSize;\noutSize.xy *= r;\noffset.xy *= r;\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\nreturn outSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nvec3  offset       = getRotation() * vec3(in_offset, 0.0);\nreturn getMatrix(isMapAligned) * offset;\n}\nvoid main()\n{\nINIT;\nvec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec2  a_offset = a_vertexOffset / 16.0;\nfloat a_outlineSize = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec2 v_size = getMarkerSize(a_offset, a_size, a_outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\nvec2 v_tex      = a_texCoords / u_mosaicSize;\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity  = getOpacity();\nv_id       = norm(a_id);\nv_filters  = getFilterFlags();\nv_pos      = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + getOffset(a_offset, a_bitSet);\nv_sizeTex  = vec4(v_size.xy, v_tex.xy);\n#ifdef SDF\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\n#ifdef VV_COLOR\nv_overridingOutlineColor = v_isThin;\n#else\nv_overridingOutlineColor = 0.0;\n#endif\nv_outlineWidth = min(a_outlineSize, max(max(v_size.x, v_size.y) - 0.99, 0.0));\nv_outlineColor = a_outlineColor;\nv_distRatio = a_bitSetAndDistRatio.y / 126.0;\n#endif\n#ifdef HITTEST\nvec3 pos = hittestMarker(v_size.xy);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, pos, v_filters, a_zoomRange), 1.0);\n#else\ngl_Position = vec4(clip(v_color, v_pos, v_filters, a_zoomRange), 1.0);\n#endif\n}"},label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include <materials/text/text.frag>","label.vert":"precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\nfloat glyphAngle = angle * 360.0 / 254.0;\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\nfloat z = 0.0;\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\nreturn z;\n}\nvoid main()\n{\nINIT;\nfloat groupMinZoom    = getMinZoom();\nfloat glyphMinZoom    = a_glyphData.x;\nfloat glyphMaxZoom    = a_glyphData.y;\nfloat glyphAngle      = a_glyphData.z;\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\nfloat fontSize           = a_texAndSize.z;\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\nv_color     = animation * ((1.0 - u_isHalo) * a_color + (u_isHalo * a_haloColor));\nv_opacity   = 1.0;\nv_tex       = a_texCoords / u_mosaicSize;\nv_edgeDistanceOffset = u_isHalo * haloSize / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\ngl_Position = vec4(v_pos, 1.0);\n#ifdef DEBUG\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}"},line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif\n#ifdef SDF\nvarying mediump float v_lineWidthRatio;\n#endif","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nbool intersectCircleLineInner(vec3 p, vec3 a, vec3 b, float radius) {\nvec3 v0 = a - p;\nvec3 b2 = b - p;\nvec3 v  = b2 - v0;\nfloat D = 4. * dot(v0, v) * dot(v0, v) - 4. * dot(v, v) * ( dot(v0, v0) - radius * radius );\nif (D < 0.) {\nreturn false;\n}\nfloat sqrtD = sqrt(D);\nfloat t0 = (-2. * dot(v0, v) + sqrtD) / (2. * dot(v, v));\nfloat t1 = (-2. * dot(v0, v) - sqrtD) / (2. * dot(v, v));\nreturn ((t0 >= 0. && t0 <= 1.) || (t1 >= 0. && t1 <= 1.));\n}\nbool intersectCircleLine(vec3 p, vec3 a, vec3 b, vec3 c, float radius) {\nreturn intersectCircleLineInner(p, a, b, radius) || intersectCircleLineInner(p, b, c, radius);\n}\nvec3 hittestLine(float halfWidth) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nvec3  hittestPos = vec3(u_hittestPos, 1.);\nfloat hittestDist = u_hittestDist;\nif (!intersectCircleLine(hittestPos, pos, pos1, pos2, hittestDist + halfWidth)) {\noutTextureCoords.z += 2.0;\n}\nreturn outTextureCoords;\n}\n#endif","line.frag":"precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/line/common.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\n#ifdef HITTEST\nvoid main() {\ngl_FragColor = vec4(1.);\n}\n#else\nvoid main() {\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineHalfWidth,\nv_opacity,\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nv_tlbr,\nv_patternSize,\n#endif\n#ifdef SDF\nv_lineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance,\n#endif\n#endif\nv_id\n);\ngl_FragColor = shadeLine(inputs);\n}\n#endif","line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/line/common.glsl>\n#include <materials/line/hittest.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\n#ifdef HITTEST\nvoid draw() {\nfloat aa        = 0.5 * u_antialiasing;\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\nfloat a_cimHalfWidth = a_aux.x / 16. ;\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\ngl_PointSize = 1.;\nvec3 pos = hittestLine(halfWidth);\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#else\nvoid draw()\n{\nhighp vec3 pos = vec3(0.);\nLineData outputs = buildLine(\npos,\na_id,\na_pos,\na_color,\na_offsetAndNormal.xy / 16.,\na_offsetAndNormal.zw / 16.,\na_accumulatedDistanceAndHalfWidth.x,\na_accumulatedDistanceAndHalfWidth.y / 16.,\na_segmentDirection.w,\na_tlbr,\na_segmentDirection.xy / 16.,\na_aux.x / 16.\n);\nv_id              = outputs.id;\nv_color           = outputs.color;\nv_normal          = outputs.normal;\nv_lineHalfWidth   = outputs.lineHalfWidth;\nv_opacity         = outputs.opacity;\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nv_tlbr          = outputs.tlbr;\nv_patternSize   = outputs.patternSize;\n#endif\n#ifdef SDF\nv_lineWidthRatio = outputs.lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance = outputs.accumulatedDistance;\n#endif\n#endif\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#endif\nvoid main() {\nINIT;\ndraw();\n}"},shared:{line:{"common.glsl":"#if !defined(OUTLINED_FILL) && defined(PATTERN)\nuniform mediump vec2 u_mosaicSize;\n#endif\nstruct LineData {\nlowp vec4 color;\nmediump vec2 normal;\nmediump float lineHalfWidth;\nlowp float opacity;\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nmediump vec4 tlbr;\nmediump vec2 patternSize;\n#endif\n#ifdef SDF\nmediump float lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nhighp float accumulatedDistance;\n#endif\n#endif\nhighp vec3 id;\n};","line.frag":"uniform lowp float u_blur;\n#if !defined(OUTLINED_FILL) && !defined(HIGHLIGHT)\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\nuniform highp float u_pixelRatio;\n#endif\n#endif\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(OUTLINED_FILL)\nlowp vec4 getLineColor(LineData line) {\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\nmediump float relativeTexX = fract(u_pixelRatio * line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\nfloat dist = d * line.lineHalfWidth;\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\n}\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(OUTLINED_FILL)\nlowp vec4 getLineColor(LineData line) {\nmediump float lineHalfWidth = line.lineHalfWidth;\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * lineHalfWidth / line.patternSize.y;\nmediump float relativeTexX = fract(u_pixelRatio * line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.5 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexY, relativeTexX));\nlowp vec4 color = texture2D(u_texture, texCoord);\nreturn line.opacity * line.color * color;\n}\n#else\nlowp vec4 getLineColor(LineData line) {\nreturn line.opacity * line.color;\n}\n#endif\nvec4 shadeLine(LineData line)\n{\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\nlowp vec4 out_color = getLineColor(line) * alpha;\n#ifdef HIGHLIGHT\nout_color.a = step(1.0 / 255.0, out_color.a);\n#endif\n#ifdef ID\nif (out_color.a < 1.0 / 255.0) {\ndiscard;\n}\nout_color = vec4(line.id, 0.0);\n#endif\nreturn out_color;\n}","line.vert":"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\n#ifdef VV_SIZE\nfloat refLineWidth = 2.0 * referenceHalfWidth;\nreturn 0.5 * (lineHalfWidth / referenceHalfWidth) * getSize(refLineWidth);\n#else\nreturn lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\nhalfWidth = max(halfWidth, 2.0);\n#endif\nreturn halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nreturn thinLineFactor * halfWidth * offset;\n}\nLineData buildLine(\nout vec3 out_pos,\nin vec3 in_id,\nin vec2 in_pos,\nin vec4 in_color,\nin vec2 in_offset,\nin vec2 in_normal,\nin float in_accumulatedDist,\nin float in_lineHalfWidth,\nin float in_bitSet,\nin vec4 in_tlbr,\nin vec2 in_segmentDirection,\nin float in_referenceHalfWidth\n)\n{\nfloat aa        = 0.5 * u_antialiasing;\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nfloat z         = 2.0 * step(baseWidth, 0.0);\nvec2  dist      = getDist(in_offset, halfWidth);\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\n#ifdef OUTLINED_FILL\nvec4  color     = in_color;\nfloat opacity   = 1.0;\n#else\nvec4  color     = getColor(in_color, in_bitSet, 0);\nfloat opacity   = getOpacity();\n#ifdef SDF\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\n#endif\n#endif\nout_pos = vec3(pos.xy, z);\nreturn LineData(\ncolor,\nin_normal,\nhalfWidth,\nopacity,\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nin_tlbr / u_mosaicSize.xyxy,\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\n#endif\n#ifdef SDF\nlineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\n#endif\n#endif\nnorm(in_id)\n);\n}"}},text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec3 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nvec3 hittestGlyph(in vec3 in_pos, in vec3 offset, in float fontSize) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * in_pos + u_tileMat3 * offset;\nvec3  hittestPos = vec3(u_hittestPos, 1.);\nfloat hittestDist = u_hittestDist;\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nfloat halfFontSize = fontSize / 2.;\nif (distance(pos, hittestPos) > hittestDist + halfFontSize) {\noutTextureCoords.z += 2.0;\n}\nreturn outTextureCoords;\n}\n#endif","text.frag":"precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\n#ifdef HITTEST\nvec4 getColor() {\nreturn vec4(1.);\n}\n#else\nvec4 getColor()\n{\nfloat SDF_CUTOFF = (2.0 / 8.0);\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\nlowp float dist = texture2D(u_texture, v_tex).a;\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\nedge /= 2.0;\n#endif\nlowp float aa = v_antialiasingWidth;\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\nreturn alpha * v_color * v_opacity;\n}\n#endif\nvoid main()\n{\ngl_FragColor = getColor();\n}","text.vert":"precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\n#include <materials/text/hittest.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_zoomRange;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\nfloat r = getSize(referenceSize) / referenceSize;\nbaseSize *= r;\noffset.xy *= r;\nreturn baseSize;\n#endif\nreturn baseSize;\n}\nvoid main()\n{\nINIT;\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\nfloat a_bitSet        = a_aux.w;\nfloat a_fontSize      = a_texFontSize.z;\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\nv_color   = u_isHalo * a_haloColor + (1.0 - u_isHalo) * getColor(a_color, a_bitSet, 1);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nv_tex     = a_texCoords / u_mosaicSize;\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\nv_edgeDistanceOffset = u_isHalo * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n#ifdef HITTEST\nvec3 pos = hittestGlyph(in_pos, offset, fontSize);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n#else\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n#endif\n}"},"utils.glsl":"float rshift(in float u32, in int amount) {\nreturn floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\nfloat offset = pow(2.0, float(bitIndex));\nreturn mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\nreturn getBit(bitset, 0);\n}\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\nfloat isAggregate = getBit(bitset.b, 7);\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\nfloat r = mod(rshift(u32, 0), 255.0);\nfloat g = mod(rshift(u32, 8), 255.0);\nfloat b = mod(rshift(u32, 16), 255.0);\nfloat a = mod(rshift(u32, 24), 255.0);\nreturn vec4(r, g, b, a);\n}\nvec3 norm(in vec3 v) {\nreturn v /= 255.0;\n}\nvec4 norm(in vec4 v) {\nreturn v /= 255.0;\n}\nfloat max4(vec4 target) {\nreturn max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\nreturn (bytes - 127.0) / 127.0;\n}","vcommon.glsl":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\nattribute vec2 a_pos;\nattribute highp vec3 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp mat3 u_tileMat3;\nuniform highp mat3 u_viewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nuniform mediump float u_currentZoom;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef OES_TEXTURE_FLOAT\ntarget.rgba = getAttributeData2(a_id);\n#else\nvec4 data0 = getAttributeData2(a_id);\nvec4 data1 = getAttributeData3(a_id);\ntarget.r = u88VVToFloat(data0.rg * 255.0);\ntarget.g = u88VVToFloat(data0.ba * 255.0);\ntarget.b = u88VVToFloat(data1.rg * 255.0);\ntarget.a = u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n#define INIT loadVisualVariableData(VV_ADATA)\n#else\n#define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\nfloat isColorLocked   = getBit(a_bitSet, index);\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\nreturn a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\nreturn 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\nreturn in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\nreturn mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\nreturn ceil(getAttributeData0(a_id).x * 255.0);\n#else\nreturn getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\nreturn getAttributeData1(a_id);\n}\nfloat getMinZoom() {\nvec4 data0 = getAttributeData0(a_id) * 255.0;\nreturn data0.g;\n}\nmat3 getMatrix(float isMapAligned) {\nreturn isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef INSIDE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#elif defined(OUTSIDE)\npos.z += 2.0 * getFilterBit(filterFlags, 1);\n#elif defined(HIGHLIGHT)\n#if !defined(HIGHLIGHT_ALL)\npos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\n#endif\n#endif\npos.z += 2.0 * (step(minMaxZoom.y, u_currentZoom) + (1.0 - step(minMaxZoom.x, u_currentZoom)));\nreturn pos;\n}","vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n#define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n#define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\nreturn (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nfloat interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\nreturn u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nif (sizeValue <= u_vvSizeFieldStopsValues[0]) {\nreturn u_vvSizeFieldStopsSizes[0];\n}\nfor (int i = 1; i < VV_SIZE_N; ++i) {\nif (u_vvSizeFieldStopsValues[i] >= sizeValue) {\nfloat f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\nreturn mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n}\n}\nreturn u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nreturn u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\nif (isNan(opacityValue)) {\nreturn 1.0;\n}\nif (opacityValue <= u_vvOpacityValues[0]) {\nreturn u_vvOpacities[0];\n}\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\nif (u_vvOpacityValues[i] >= opacityValue) {\nfloat f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\nreturn mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n}\n}\nreturn u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat4(1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat4(cosA, sinA, 0, 0,\n-sinA,  cosA, 0, 0,\n0,     0, 1, 0,\n0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat3(1, 0, 0,\n0, 1, 0,\n0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * -rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat3(cosA, -sinA, 0,\nsinA, cosA, 0,\n0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\nif (isNan(colorValue) || isColorLocked == 1.0) {\nreturn fallback;\n}\nif (colorValue <= u_vvColorValues[0]) {\nreturn u_vvColors[0];\n}\nfor (int i = 1; i < VV_COLOR_N; ++i) {\nif (u_vvColorValues[i] >= colorValue) {\nfloat f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\nreturn mix(u_vvColors[i-1], u_vvColors[i], f);\n}\n}\nreturn u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\nreturn getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\nreturn u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\nfloat outSize = getVVStopsSize(vvSize, size);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\nreturn getVVUnitValue(vvSize, size);\n#else\nreturn size;\n#endif\n}"},"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\ngl_FragColor = texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\nfloat mirrorFactor = 1.2 - factor;\nreturn mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\ngl_FragColor = u_bloomStrength * (\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n);\n}"},gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = float(SIGMA);\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\nvec4 texel = texture2D(u_texture, v_uv);\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat v = dot(texel.xyz, luma);\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\ngl_FragColor = mix(outputColor, texel, alpha);\n}"}},blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = u_sigma;\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\nfloat samples[10];\nsamples[0] = -0.08;\nsamples[1] = -0.05;\nsamples[2] = -0.03;\nsamples[3] = -0.02;\nsamples[4] = -0.01;\nsamples[5] =  0.01;\nsamples[6] =  0.02;\nsamples[7] =  0.03;\nsamples[8] =  0.05;\nsamples[9] =  0.08;\nvec2 dir = 0.5 - v_uv;\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\ndir = dir / dist;\nvec4 color = texture2D(u_colorTexture,v_uv);\nvec4 sum = color;\nfor (int i = 0; i < 10; i++) {\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n}\nsum *= 1.0 / 11.0;\nfloat t = dist * sampleStrength;\nt = clamp(t, 0.0, 1.0);\ngl_FragColor = mix(color, sum, t);\n}"}},dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\nvec4 color = texture2D(u_texture, v_uv);\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\nvec3 colorUnpremultiply = color.rgb / color.a;\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}","min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\nvec2 onePixel = vec2(1.0) / u_srcResolution;\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\nvec4 minColor = vec4(1.0);\nvec4 maxColor = vec4(0.0);\nfor (int y = 0; y < CELL_SIZE; ++y) {\nfor (int x = 0; x < CELL_SIZE; ++x) {\nvec2 offset = uv + vec2(x, y) * onePixel;\nminColor = min(minColor, texture2D(u_minTexture, offset));\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\n}\n}\ngl_FragData[0] = minColor;\ngl_FragData[1] = maxColor;\n}"}},"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nuniform vec2 u_shadowOffset;\nuniform highp mat3 u_displayViewMat3;\nvarying vec2 v_uv;\nvoid main() {\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"}},"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\nG[0] = g0,\nG[1] = g1,\nG[2] = g2,\nG[3] = g3,\nG[4] = g4,\nG[5] = g5,\nG[6] = g6,\nG[7] = g7,\nG[8] = g8;\nmat3 I;\nfloat cnv[9];\nvec3 sample;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 9; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nvec4 color = texture2D(u_colorTexture, v_uv);\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_colorTexture, v_uv);\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\nfloat a = color.a;\ngl_FragColor = vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"}},raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\nvec4 color = texture2D(u_texture, v_texcoord);\n#endif\nfloat alpha = u_opacity * color.a;\ngl_FragColor = vec4(alpha * color.rgb, alpha);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_isFloatTexture;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\n#ifdef BILINEAR\n#include <filtering/bilinear.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\ntargetLocation = projectPixelLocation(targetLocation);\n#endif\nreturn targetLocation;\n}\nbool isOutside(vec2 coords){\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\nreturn true;\n} else {\nreturn false;\n}\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#elif defined(BILINEAR)\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\n#else\nvec4 color = texture2D(u_image, pixelLocation);\n#endif\nreturn color;\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\nfloat maxI = 255.0;\nfloat mid = 128.0;\nfloat c = u_contrastOffset;\nfloat b = u_brightnessOffset;\nvec4 v;\nif (c > 0.0 && c < 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n} else if (c <= 0.0 && c > -100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n} else if (c == 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\nv = (sign(v) + 1.0) / 2.0;\n} else if (c == -100.0) {\nv = vec4(mid, mid, mid, currentPixel.a);\n}\nreturn vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\n#ifdef LOOKUP_PROJECTION\nvec4 pv = texture2D(u_transformGrid, coords);\nreturn vec2(pv.r, pv.g);\n#endif\nvec2 index_image = floor(coords * u_targetImageSize);\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\nvec2 srcLocation;\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\nif (pos.s <= pos.t) {\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n} else {\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n}\nreturn srcLocation;\n}"},flow:{"flow.frag":"precision highp float;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_lineColor;\nvarying float v_lineRenderWidth;\nuniform float u_time;\nuniform float u_fadeDuration;\nuniform float u_lineSpeed;\nvoid main(void) {\nvec4 color = v_lineColor;\nfloat edgeWidth = min(2.0 * v_lineRenderWidth - 1.0, 1.0);\nfloat edgeStart = (v_lineRenderWidth - edgeWidth) / v_lineRenderWidth;\nif (edgeStart < 0.95) {\nfloat s = step(edgeStart, abs(v_side));\ncolor.a *= (1.0 - s) + s * (1.0 - (abs(v_side) - edgeStart) / (1.0 - edgeStart));\n}\nfloat t = mod(v_timeSeed * (v_totalTime + u_fadeDuration) + u_time * u_lineSpeed, v_totalTime + u_fadeDuration) - v_time;\ncolor.a *= step(0.0, t) * exp(-2.3 * t / u_fadeDuration);\ncolor.rgb *= color.a;\ngl_FragColor = color;\n}","flow.vert":"precision highp float;\nattribute vec3 a_positionAndSide;\nattribute vec3 a_timeInfo;\nattribute vec2 a_extrude;\nattribute float a_speed;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_lineColor;\nvarying float v_lineRenderWidth;\n#define MAX_STOPS 8\n#ifdef VV_LINE_COLOR\nuniform float u_lineColor_stops[MAX_STOPS];\nuniform vec4 u_lineColor_values[MAX_STOPS];\nuniform int u_lineColor_count;\n#else\nuniform vec4 u_lineColor;\n#endif\n#ifdef VV_LINE_OPACITY\nuniform float u_lineOpacity_stops[MAX_STOPS];\nuniform float u_lineOpacity_values[MAX_STOPS];\nuniform int u_lineOpacity_count;\n#else\nuniform float u_lineOpacity;\n#endif\n#ifdef VV_LINE_RENDER_WIDTH\nuniform float u_lineRenderWidth_stops[MAX_STOPS];\nuniform float u_lineRenderWidth_values[MAX_STOPS];\nuniform int u_lineRenderWidth_count;\n#else\nuniform float u_lineRenderWidth;\n#endif\nvoid main(void) {\nfloat x = a_speed;\n#ifdef VV_LINE_COLOR\nvec4 lineColor = u_lineColor_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_lineColor_count) {\nbreak;\n}\nfloat x1 = u_lineColor_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_lineColor_stops[i];\nvec4 y2 = u_lineColor_values[i];\nif (x < x2) {\nvec4 y1 = u_lineColor_values[i - 1];\nlineColor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nlineColor = y2;\n}\n}\n}\n#else\nvec4 lineColor = u_lineColor;\n#endif\n#ifdef VV_LINE_OPACITY\nfloat lineOpacity = u_lineOpacity_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_lineOpacity_count) {\nbreak;\n}\nfloat x1 = u_lineOpacity_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_lineOpacity_stops[i];\nfloat y2 = u_lineOpacity_values[i];\nif (x < x2) {\nfloat y1 = u_lineOpacity_values[i - 1];\nlineOpacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nlineOpacity = y2;\n}\n}\n}\n#else\nfloat lineOpacity = u_lineOpacity;\n#endif\n#ifdef VV_LINE_RENDER_WIDTH\nfloat lineRenderWidth = u_lineRenderWidth_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_lineRenderWidth_count) {\nbreak;\n}\nfloat x1 = u_lineRenderWidth_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_lineRenderWidth_stops[i];\nfloat y2 = u_lineRenderWidth_values[i];\nif (x < x2) {\nfloat y1 = u_lineRenderWidth_values[i - 1];\nlineRenderWidth = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nlineRenderWidth = y2;\n}\n}\n}\n#else\nfloat lineRenderWidth = u_lineRenderWidth;\n#endif\nvec2 position = a_positionAndSide.xy;\nfloat side = a_positionAndSide.z;\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineRenderWidth, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_side = side;\nv_time = a_timeInfo.x;\nv_totalTime = a_timeInfo.y;\nv_timeSeed = a_timeInfo.z;\nv_lineColor = vec4(lineColor.rgb, lineColor.a * lineOpacity);\nv_lineRenderWidth = lineRenderWidth;\n}"},hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include <raster/lut/colorize.glsl>\nfloat getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){\nif (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {\nreturn 0.0;\n}\nelse {\nreturn e;\n}\n}\nvec3 rgb2hsv(vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\nvec3 hsv = rgb2hsv(rgb.xyz);\nhsv.z = hillshade;\nreturn vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nif (currentPixel.a == 0.0) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec2 axy = vec2(-1.0, -1.0);\nvec2 bxy = vec2(0.0, -1.0);\nvec2 cxy = vec2(1.0, -1.0);\nvec2 dxy = vec2(-1.0, 0.0);\nvec2 fxy = vec2(1.0, 0.0);\nvec2 gxy = vec2(-1.0, 1.0);\nvec2 hxy = vec2(0.0, 1.0);\nvec2 ixy = vec2(1.0, 1.0);\nvec2 onePixel = 1.0 / u_srcImageSize;\nif (pixelLocation.s < onePixel.s) {\naxy[0] = 1.0;\ndxy[0] = 1.0;\ngxy[0] = 1.0;\n}\nif (pixelLocation.t < onePixel.t) {\naxy[1] = 1.0;\nbxy[1] = 1.0;\ncxy[1] = 1.0;\n}\nif (pixelLocation.s > 1.0 - onePixel.s) {\ncxy[0] = -1.0;\nfxy[0] = -1.0;\nixy[0] = -1.0;\n}\nif (pixelLocation.t > 1.0 - onePixel.t) {\ngxy[1] = -1.0;\nhxy[1] = -1.0;\nixy[1] = -1.0;\n}\nvec4 va = texture2D(u_image, pixelLocation + onePixel * axy);\nvec4 vb = texture2D(u_image, pixelLocation + onePixel * bxy);\nvec4 vc = texture2D(u_image, pixelLocation + onePixel * cxy);\nvec4 vd = texture2D(u_image, pixelLocation + onePixel * dxy);\nvec4 ve = texture2D(u_image, pixelLocation);\nvec4 vf = texture2D(u_image, pixelLocation + onePixel * fxy);\nvec4 vg = texture2D(u_image, pixelLocation + onePixel * gxy);\nvec4 vh = texture2D(u_image, pixelLocation + onePixel * hxy);\nvec4 vi = texture2D(u_image, pixelLocation + onePixel * ixy);\nfloat dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_factor.s;\nfloat dzy = (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_factor.t;\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\nfloat hillshade = 0.0;\nif (u_hillshadeType == 0){\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\nif (z < 0.0)  z = 0.0;\nhillshade = z;\n} else {\nfor (int k = 0; k < 6; k++) {\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\nif (z < 0.0) z = 0.0;\nhillshade = hillshade + z * u_weights[k];\nif (k == 5) break;\n}\n}\nfloat alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);\n#ifdef APPLY_COLORMAP\ngl_FragColor = overlay(ve.r, u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\ngl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}","hillshade.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\nvec4 color = texture2D(u_colormap, clrPosition);\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\nreturn result;\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nvec4 result = colorize(currentPixel, 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}","lut.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},magdir:{"magdir.frag":"precision mediump float;\nvarying vec4 v_color;\nuniform lowp float u_opacity;\nvoid main() {\ngl_FragColor = v_color * u_opacity;\n}","magdir.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nuniform float u_rotation;\nuniform vec4 u_colors[12];\nvarying vec4 v_color;\nvoid main()\n{\nfloat angle = a_offset.y + u_rotation;\n#ifndef ROTATION_GEOGRAPHIC\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\n#endif\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\nv_color = u_colors[int(a_vv.x)];\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},reproject:{"reproject.frag":"precision mediump float;\nvarying vec2 v_texcoord;\n#include <raster/common/common.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\n}","reproject.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_position;\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\n}"},scalar:{"scalar.frag":"precision mediump float;\nuniform lowp float u_opacity;\nvarying vec2 v_pos;\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\nconst float outlineSize = 0.02;\nconst float innerRadius = 0.25;\nconst float outerRadius = 0.42;\nconst float innerSquareLength = 0.15;\nvoid main() {\nmediump float dist = length(v_pos);\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\n#ifdef INNER_CIRCLE\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\n#else\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\n#endif\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\n}","scalar.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nvarying vec2 v_pos;\nvoid main()\n{\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 size = u_symbolSize * sizePercentage;\nvec2 pos = a_pos + a_offset * size;\nv_pos = a_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\nif (val >= maxCutOff) {\nreturn maxOutput;\n} else if (val <= minCutOff) {\nreturn minOutput;\n}\nfloat stretchedVal;\nif (useGamma) {\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\nif (gamma > 1.0) {\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n}\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n} else {\nstretchedVal = minOutput + (val - minCutOff) * factor;\n}\nreturn stretchedVal;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\n#ifdef NOOP\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\nreturn;\n#endif\nif (u_bandCount == 1) {\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n} else {\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n}\n}","stretch.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},stencil:{"stencil.frag":"void main() {\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nvoid main() {\ngl_Position = vec4(a_pos, 0.0, 1.0);\n}"},tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\nlowp vec4 color = texture2D(u_texture, v_tex);\ngl_FragColor = 0.75 * color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\nv_tex = a_pos;\n}"},util:{"encoding.glsl":"const vec4 rgba2float_factors = vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, rgba2float_factors);\n}"}}})),t.register("c48sV",(function(n,i){e(n.exports,"default",(function(){return v}));var o=t("bnsvn"),a=t("5zT8C"),r=t("kUF3z"),s=t("6b7jA"),l=t("1pevJ"),u=t("g0mVO"),c=t("l3QXd"),f=t("9YlKP"),d=t("2HKUi"),_=t("4radX");const m=300;class v extends r.default{dispose(){this._outlineProgram&&(this._outlineProgram.dispose(),this._outlineProgram=null),this._tileInfoProgram&&(this._tileInfoProgram.dispose(),this._tileInfoProgram=null),this._outlineVertexArrayObject&&(this._outlineVertexArrayObject.dispose(),this._outlineVertexArrayObject=null),this._tileInfoVertexArrayObject&&(this._tileInfoVertexArrayObject.dispose(),this._tileInfoVertexArrayObject=null),this._canvas=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(c.BlendFactor.ONE,c.BlendFactor.ONE_MINUS_SRC_ALPHA,c.BlendFactor.ONE,c.BlendFactor.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,t){const{context:n}=e;if(!t.isReady)return;this._loadWGLResources(n),n.bindVAO(this._outlineVertexArrayObject),n.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._outlineProgram.setUniform2f("u_coord_range",t.rangeX,t.rangeY),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),n.drawArrays(c.PrimitiveType.LINE_STRIP,0,4);const i=this._getTexture(n,t);i?(n.bindVAO(this._tileInfoVertexArrayObject),n.useProgram(this._tileInfoProgram),n.bindTexture(i,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",t.rangeX/t.width,t.rangeY/t.height),this._tileInfoProgram.setUniform2f("u_delta",8,8),this._tileInfoProgram.setUniform2f("u_dimensions",i.descriptor.width,i.descriptor.height),n.drawArrays(c.PrimitiveType.TRIANGLE_STRIP,0,4),n.bindVAO()):n.bindVAO()}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const t=(0,f.createProgram)(e,s.background),n=(0,f.createProgram)(e,l.tileInfo),i=new Int8Array([0,0,1,0,1,1,0,1]),o=u.BufferObject.createVertex(e,c.Usage.STATIC_DRAW,i),r=new(0,_.VertexArrayObject)(e,s.background.attributes,a.Pos2b,{geometry:o}),d=new Int8Array([0,0,1,0,0,1,1,1]),m=u.BufferObject.createVertex(e,c.Usage.STATIC_DRAW,d),v=new(0,_.VertexArrayObject)(e,l.tileInfo.attributes,a.Pos2b,{geometry:m});this._outlineProgram=t,this._tileInfoProgram=n,this._outlineVertexArrayObject=r,this._tileInfoVertexArrayObject=v}_getTexture(e,t){if(t.texture&&t.triangleCountReportedInDebug===t.triangleCount)return t.texture;t.triangleCountReportedInDebug=t.triangleCount,this._canvas||(this._canvas=document.createElement("canvas"),this._canvas.setAttribute("id","canvas2d"),this._canvas.setAttribute("width","300"),this._canvas.setAttribute("height","32"),this._canvas.setAttribute("style","display:none"));const n=t.triangleCount;let i=t.key.id;t.triangleCount>0&&(i+=`, ${n}`);const o=this._canvas,a=o.getContext("2d");return a.font="24px sans-serif",a.textAlign="left",a.textBaseline="top",a.clearRect(0,0,m,32),n>1e5?(a.fillStyle="red",a.fillRect(0,0,m,32),a.fillStyle="black"):(a.clearRect(0,0,m,32),a.fillStyle="blue"),a.fillText(i,0,0),t.texture=new(0,d.Texture)(e,{target:c.TextureType.TEXTURE_2D,pixelFormat:c.PixelFormat.RGBA,dataType:c.PixelType.UNSIGNED_BYTE,samplingMode:c.TextureSamplingMode.NEAREST,wrapMode:c.TextureWrapMode.CLAMP_TO_EDGE},o),t.texture}constructor(){super(...arguments),this._color=(0,o.f)(1,0,0,1)}}})),t.register("5zT8C",(function(n,i){e(n.exports,"Pos2b",(function(){return r})),e(n.exports,"PosTex2b",(function(){return s})),e(n.exports,"Pos2us",(function(){return l}));var o=t("l3QXd"),a=t("hSAA2");const r={geometry:[new(0,a.VertexElementDescriptor)("a_pos",2,o.DataType.BYTE,0,2)]},s={geometry:[new(0,a.VertexElementDescriptor)("a_pos",2,o.DataType.BYTE,0,4),new(0,a.VertexElementDescriptor)("a_tex",2,o.DataType.BYTE,2,4)]},l={geometry:[new(0,a.VertexElementDescriptor)("a_pos",2,o.DataType.UNSIGNED_SHORT,0,4)]}})),t.register("1pevJ",(function(n,i){e(n.exports,"tileInfo",(function(){return a}));var o=t("hvFId");const a={shaders:{vertexShader:(0,o.resolveIncludes)("tileInfo/tileInfo.vert"),fragmentShader:(0,o.resolveIncludes)("tileInfo/tileInfo.frag")},attributes:new Map([["a_pos",0]])}})),t.register("bVXM2",(function(n,i){e(n.exports,"default",(function(){return d}));var o=t("bnsvn"),a=t("5zT8C"),r=t("kUF3z"),s=t("6b7jA"),l=t("g0mVO"),u=t("l3QXd"),c=t("9YlKP"),f=t("4radX");class d extends r.default{dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:e},t){e.setDepthWriteEnabled(!1),e.setDepthTestEnabled(!1),e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(u.StencilOperation.KEEP,u.StencilOperation.KEEP,u.StencilOperation.REPLACE),e.setStencilWriteMask(255),e.setStencilFunctionSeparate(u.Face.FRONT_AND_BACK,u.CompareFunction.GREATER,t.stencilRef,255)}draw(e,t){const{context:n}=e;this._initialized||this._initialize(n),n.bindVAO(this._solidVertexArrayObject),n.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._solidProgram.setUniform2fv("u_coord_range",[t.rangeX,t.rangeY]),this._solidProgram.setUniform1f("u_depth",0),this._solidProgram.setUniform4fv("u_color",this._color),n.drawArrays(u.PrimitiveType.TRIANGLE_STRIP,0,4),n.bindVAO()}_initialize(e){if(this._initialized)return!0;const t=(0,c.createProgram)(e,s.background);if(!t)return!1;const n=new Int8Array([0,0,1,0,0,1,1,1]),i=l.BufferObject.createVertex(e,u.Usage.STATIC_DRAW,n),o=new(0,f.VertexArrayObject)(e,s.background.attributes,a.Pos2b,{geometry:i});return this._solidProgram=t,this._solidVertexArrayObject=o,this._initialized=!0,!0}constructor(){super(...arguments),this._color=(0,o.f)(1,0,0,1),this._initialized=!1}}})),t.register("3o8Fm",(function(n,i){e(n.exports,"WGLBrushVTLBackground",(function(){return v}));var o=t("8TN87"),a=t("1CpCt"),r=t("jsolS"),s=t("bnsvn"),l=t("aPQ4T"),u=t("eyQUy"),c=t("3mbeV"),f=t("kUF3z"),d=t("g0mVO"),_=t("l3QXd"),m=t("4radX");class v extends f.default{dispose(){this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(e,t){const{context:n,painter:i,styleLayerUID:r}=e;this._loadWGLResources(e);const s=e.displayLevel,f=e.styleLayer,d=f.backgroundMaterial,m=i.vectorTilesMaterialManager,v=f.getPaintValue("background-color",s),p=f.getPaintValue("background-opacity",s),g=f.getPaintValue("background-pattern",s),h=void 0!==g,x=v[3]*p,T=1|window.devicePixelRatio,y=e.spriteMosaic;let S,b;const I=T>l.VTL_HIGH_RES_CUTOFF?2:1,C=e.drawPhase===u.WGLDrawPhase.HITTEST,E=this._programOptions;E.id=C,E.pattern=h;const D=m.getMaterialProgram(n,d,E);if(n.bindVAO(this._vao),n.useProgram(D),h){const e=y.getMosaicItemPosition(g,!0);if((0,a.isSome)(e)){const{tl:t,br:i,page:o}=e;S=i[0]-t[0],b=i[1]-t[1];const r=y.getPageSize(o);(0,a.isSome)(r)&&(y.bind(n,_.TextureSamplingMode.LINEAR,o,l.VTL_TEXTURE_BINDING_UNIT_SPRITES),D.setUniform4f("u_tlbr",t[0],t[1],i[0],i[1]),D.setUniform2fv("u_mosaicSize",r),D.setUniform1i("u_texture",l.VTL_TEXTURE_BINDING_UNIT_SPRITES))}D.setUniform1f("u_opacity",p)}else this._color[0]=x*v[0],this._color[1]=x*v[1],this._color[2]=x*v[2],this._color[3]=x,D.setUniform4fv("u_color",this._color);if(D.setUniform1f("u_depth",f.z||0),C){const e=(0,c.u32to4Xu8)(r+1);D.setUniform4fv("u_id",e)}for(const e of t){if(D.setUniform1f("u_coord_range",e.rangeX),D.setUniformMatrix3fv("u_dvsMat3",e.transforms.dvs),h){const t=Math.max(2**(Math.round(s)-e.key.level),1),n=I*e.width*t,i=n/(0,o.nextPowerOfTwo)(S),a=n/(0,o.nextPowerOfTwo)(b);this._patternMatrix[0]=i,this._patternMatrix[4]=a,D.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}n.setStencilFunction(_.CompareFunction.EQUAL,e.stencilRef,255),n.drawArrays(_.PrimitiveType.TRIANGLE_STRIP,0,4)}}_loadWGLResources(e){if(this._vao)return;const{context:t,styleLayer:n}=e,i=n.backgroundMaterial,o=new Int8Array([0,0,1,0,0,1,1,1]),a=d.BufferObject.createVertex(t,_.Usage.STATIC_DRAW,o),r=new(0,m.VertexArrayObject)(t,i.getAttributeLocations(),i.getLayoutInfo(),{geometry:a});this._vao=r}constructor(){super(...arguments),this._color=(0,s.f)(1,0,0,1),this._patternMatrix=(0,r.c)(),this._programOptions={id:!1,pattern:!1}}}})),t.register("fRnN2",(function(n,i){e(n.exports,"WGLBrushVTLCircle",(function(){return c}));var o=t("1CpCt"),a=t("1xUaV"),r=t("eyQUy"),s=t("3mbeV"),l=t("kUF3z"),u=t("l3QXd");class c extends l.default{dispose(){}drawMany(e,t){const{context:n,displayLevel:i,requiredLevel:l,state:c,drawPhase:f,painter:d,spriteMosaic:_,styleLayerUID:m}=e;if(!t.some((e=>{var t,n;return null!=(t=null==(n=e.layerData.get(m))?void 0:n.circleIndexCount)&&t})))return;const v=e.styleLayer,p=v.circleMaterial,g=d.vectorTilesMaterialManager,h=v.getPaintValue("circle-translate",i),x=v.getPaintValue("circle-translate-anchor",i),T=f===r.WGLDrawPhase.HITTEST,y=this._programOptions;y.id=T;const S=g.getMaterialProgram(n,p,y);n.useProgram(S),S.setUniformMatrix3fv("u_displayMat3",x===a.TranslateAnchor.VIEWPORT?c.displayMat3:c.displayViewMat3),S.setUniform2fv("u_circleTranslation",h),S.setUniform1f("u_depth",v.z),S.setUniform1f("u_antialiasingWidth",1.2);let b=-1;if(T){const e=(0,s.u32to4Xu8)(m+1);S.setUniform4fv("u_id",e)}for(const e of t){if(!e.layerData.has(m))continue;e.key.level!==b&&(b=e.key.level,p.setDataUniforms(S,i,v,b,_));const t=e.layerData.get(m);if(!t.circleIndexCount)continue;t.prepareForRendering(n);const a=t.circleVertexArrayObject;(0,o.isNone)(a)||(n.bindVAO(a),S.setUniformMatrix3fv("u_dvsMat3",e.transforms.dvs),l!==e.key.level?n.setStencilFunction(u.CompareFunction.EQUAL,e.stencilRef,255):n.setStencilFunction(u.CompareFunction.GREATER,255,255),n.drawElements(u.PrimitiveType.TRIANGLES,t.circleIndexCount,u.DataType.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t.circleIndexStart),e.triangleCount+=t.circleIndexCount/3)}}constructor(){super(...arguments),this._programOptions={id:!1}}}})),t.register("01Udp",(function(n,i){e(n.exports,"WGLBrushVTLFill",(function(){return d}));var o=t("1CpCt"),a=t("1xUaV"),r=t("aPQ4T"),s=t("eyQUy"),l=t("3mbeV"),u=t("kUF3z"),c=t("l3QXd");const f=1/65536;class d extends u.default{dispose(){}drawMany(e,t){const{displayLevel:n,drawPhase:i,renderPass:o,spriteMosaic:a,styleLayerUID:r}=e;let u=!1;for(const e of t)if(e.layerData.has(r)){const t=e.layerData.get(r);if(t.fillIndexCount>0||t.outlineIndexCount>0){u=!0;break}}if(!u)return;const c=e.styleLayer,f=c.getPaintProperty("fill-pattern"),d=void 0!==f,_=d&&f.isDataDriven;let m;if(d&&!_){const e=f.getValue(n);m=a.getMosaicItemPosition(e,!0)}const v=!d&&c.getPaintValue("fill-antialias",n);let p,g=!0,h=1;if(!d){const e=c.getPaintProperty("fill-color"),t=c.getPaintProperty("fill-opacity");if(!(null!=e&&e.isDataDriven||null!=t&&t.isDataDriven)){const e=c.getPaintValue("fill-color",n);h=c.getPaintValue("fill-opacity",n)*e[3],h>=1&&(g=!1)}}if(g&&"opaque"===o)return;i===s.WGLDrawPhase.HITTEST&&(p=(0,l.u32to4Xu8)(r+1));const x=c.getPaintValue("fill-translate",n),T=c.getPaintValue("fill-translate-anchor",n);(g||"translucent"!==o)&&this._drawFill(e,r,c,t,x,T,d,m,_,p);const y=!c.hasDataDrivenOutlineColor&&c.outlineUsesFillColor&&h<1;v&&"opaque"!==o&&!y&&this._drawOutline(e,r,c,t,x,T,p)}_drawFill(e,t,n,i,l,u,d,_,m,v){if(d&&!m&&(0,o.isNone)(_))return;const{context:p,displayLevel:g,state:h,drawPhase:x,painter:T,pixelRatio:y,spriteMosaic:S}=e,b=n.fillMaterial,I=T.vectorTilesMaterialManager,C=y>r.VTL_HIGH_RES_CUTOFF?2:1,E=x===s.WGLDrawPhase.HITTEST,D=this._fillProgramOptions;D.id=E,D.pattern=d;const P=I.getMaterialProgram(p,b,D);if(p.useProgram(P),(0,o.isSome)(_)){const{page:e}=_,t=S.getPageSize(e);(0,o.isSome)(t)&&(S.bind(p,c.TextureSamplingMode.LINEAR,e,r.VTL_TEXTURE_BINDING_UNIT_SPRITES),P.setUniform2fv("u_mosaicSize",t),P.setUniform1i("u_texture",r.VTL_TEXTURE_BINDING_UNIT_SPRITES))}P.setUniformMatrix3fv("u_displayMat3",u===a.TranslateAnchor.VIEWPORT?h.displayMat3:h.displayViewMat3),P.setUniform2fv("u_fillTranslation",l),P.setUniform1f("u_depth",n.z+f),E&&P.setUniform4fv("u_id",v);let O=-1;for(const e of i){if(!e.layerData.has(t))continue;e.key.level!==O&&(O=e.key.level,b.setDataUniforms(P,g,n,O,S));const i=e.layerData.get(t);if(!i.fillIndexCount)continue;i.prepareForRendering(p);const a=i.fillVertexArrayObject;if(!(0,o.isNone)(a)){if(p.bindVAO(a),P.setUniformMatrix3fv("u_dvsMat3",e.transforms.dvs),p.setStencilFunction(c.CompareFunction.EQUAL,e.stencilRef,255),d){const t=Math.max(2**(Math.round(g)-e.key.level),1),n=e.rangeX/(C*e.width*t);P.setUniform1f("u_patternFactor",n)}if(m){const e=i.patternMap;if(!e)continue;for(const[t,n]of e){const e=S.getPageSize(t);(0,o.isSome)(e)&&(S.bind(p,c.TextureSamplingMode.LINEAR,t,r.VTL_TEXTURE_BINDING_UNIT_SPRITES),P.setUniform2fv("u_mosaicSize",e),P.setUniform1i("u_texture",r.VTL_TEXTURE_BINDING_UNIT_SPRITES),p.drawElements(c.PrimitiveType.TRIANGLES,n[1],c.DataType.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*n[0]))}}else p.drawElements(c.PrimitiveType.TRIANGLES,i.fillIndexCount,c.DataType.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*i.fillIndexStart);e.triangleCount+=i.fillIndexCount/3}}}_drawOutline(e,t,n,i,r,l,u){const{context:d,displayLevel:_,state:m,drawPhase:v,painter:p,pixelRatio:g,spriteMosaic:h}=e,x=n.outlineMaterial,T=p.vectorTilesMaterialManager,y=.75/g,S=v===s.WGLDrawPhase.HITTEST,b=this._outlineProgramOptions;b.id=S;const I=T.getMaterialProgram(d,x,b);d.useProgram(I),I.setUniformMatrix3fv("u_displayMat3",l===a.TranslateAnchor.VIEWPORT?m.displayMat3:m.displayViewMat3),I.setUniform2fv("u_fillTranslation",r),I.setUniform1f("u_depth",n.z+f),I.setUniform1f("u_outline_width",y),S&&I.setUniform4fv("u_id",u);let C=-1;for(const e of i){if(!e.layerData.has(t))continue;e.key.level!==C&&(C=e.key.level,x.setDataUniforms(I,_,n,C,h));const i=e.layerData.get(t);if(i.prepareForRendering(d),!i.outlineIndexCount)continue;const a=i.outlineVertexArrayObject;(0,o.isNone)(a)||(d.bindVAO(a),I.setUniformMatrix3fv("u_dvsMat3",e.transforms.dvs),d.setStencilFunction(c.CompareFunction.EQUAL,e.stencilRef,255),d.drawElements(c.PrimitiveType.TRIANGLES,i.outlineIndexCount,c.DataType.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*i.outlineIndexStart),e.triangleCount+=i.outlineIndexCount/3)}}constructor(){super(...arguments),this._fillProgramOptions={id:!1,pattern:!1},this._outlineProgramOptions={id:!1}}}})),t.register("k3EOw",(function(n,i){e(n.exports,"WGLBrushVTLLine",(function(){return f}));var o=t("1CpCt"),a=t("1xUaV"),r=t("aPQ4T"),s=t("eyQUy"),l=t("3mbeV"),u=t("kUF3z"),c=t("l3QXd");class f extends u.default{dispose(){}drawMany(e,t){const{context:n,displayLevel:i,state:u,drawPhase:f,painter:d,pixelRatio:_,spriteMosaic:m,styleLayerUID:v}=e;if(!t.some((e=>{var t,n;return null!=(t=null==(n=e.layerData.get(v))?void 0:n.lineIndexCount)&&t})))return;const p=e.styleLayer,g=p.lineMaterial,h=d.vectorTilesMaterialManager,x=p.getPaintValue("line-translate",i),T=p.getPaintValue("line-translate-anchor",i),y=p.getPaintProperty("line-pattern"),S=void 0!==y,b=S&&y.isDataDriven;let I,C;if(S&&!b){const e=y.getValue(i);I=m.getMosaicItemPosition(e)}let E=!1;if(!S){const e=p.getPaintProperty("line-dasharray");if(C=void 0!==e,E=C&&e.isDataDriven,C&&!E){const t=e.getValue(i),n=p.getDashKey(t,p.getLayoutValue("line-cap",i));I=m.getMosaicItemPosition(n)}}const D=1/_,P=f===s.WGLDrawPhase.HITTEST,O=this._programOptions;O.id=P,O.pattern=S,O.sdf=C;const A=h.getMaterialProgram(n,g,O);if(n.useProgram(A),A.setUniformMatrix3fv("u_displayViewMat3",u.displayViewMat3),A.setUniformMatrix3fv("u_displayMat3",T===a.TranslateAnchor.VIEWPORT?u.displayMat3:u.displayViewMat3),A.setUniform2fv("u_lineTranslation",x),A.setUniform1f("u_depth",p.z),A.setUniform1f("u_antialiasing",D),P){const e=(0,l.u32to4Xu8)(v+1);A.setUniform4fv("u_id",e)}if(I&&(0,o.isSome)(I)){const{page:e}=I,t=m.getPageSize(e);(0,o.isSome)(t)&&(m.bind(n,c.TextureSamplingMode.LINEAR,e,r.VTL_TEXTURE_BINDING_UNIT_SPRITES),A.setUniform2fv("u_mosaicSize",t),A.setUniform1i("u_texture",r.VTL_TEXTURE_BINDING_UNIT_SPRITES))}let R=-1;for(const e of t){if(!e.layerData.has(v))continue;e.key.level!==R&&(R=e.key.level,g.setDataUniforms(A,i,p,R,m));const t=2**(i-R)/_;A.setUniform1f("u_zoomFactor",t);const a=e.layerData.get(v);if(!a.lineIndexCount)continue;a.prepareForRendering(n);const s=a.lineVertexArrayObject;if(!(0,o.isNone)(s)){if(n.bindVAO(s),A.setUniformMatrix3fv("u_dvsMat3",e.transforms.dvs),n.setStencilFunction(c.CompareFunction.EQUAL,e.stencilRef,255),b||E){const e=a.patternMap;if(!e)continue;for(const[t,i]of e){const e=m.getPageSize(t);(0,o.isSome)(e)&&(m.bind(n,c.TextureSamplingMode.LINEAR,t,r.VTL_TEXTURE_BINDING_UNIT_SPRITES),A.setUniform2fv("u_mosaicSize",e),A.setUniform1i("u_texture",r.VTL_TEXTURE_BINDING_UNIT_SPRITES),n.drawElements(c.PrimitiveType.TRIANGLES,i[1],c.DataType.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*i[0]))}}else n.drawElements(c.PrimitiveType.TRIANGLES,a.lineIndexCount,c.DataType.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*a.lineIndexStart);e.triangleCount+=a.lineIndexCount/3}}}constructor(){super(...arguments),this._programOptions={id:!1,pattern:!1,sdf:!1}}}})),t.register("5tmA1",(function(n,i){e(n.exports,"WGLBrushVTLSymbol",(function(){return m}));var o=t("1CpCt"),a=t("gLni9"),r=t("iqtPh"),s=t("1xUaV"),l=t("aPQ4T"),u=t("eyQUy"),c=t("c4cvq"),f=t("3mbeV"),d=t("kUF3z"),_=t("l3QXd");class m extends d.default{dispose(){}drawMany(e,t){const{drawPhase:n,styleLayerUID:i}=e,o=e.styleLayer;let a;n===u.WGLDrawPhase.HITTEST&&(a=(0,f.u32to4Xu8)(i+1)),this._drawIcons(e,o,t,a),this._drawText(e,o,t,a)}_drawIcons(e,t,n,i){const{context:a,displayLevel:f,drawPhase:d,painter:_,spriteMosaic:m,state:v,styleLayerUID:p}=e,g=t.iconMaterial,h=_.vectorTilesMaterialManager;let x,T=!1;for(const e of n)if(e.layerData.has(p)&&(x=e.layerData.get(p),x.iconPerPageElementsMap.size>0)){T=!0;break}if(!T)return;const y=t.getPaintValue("icon-translate",f),S=t.getPaintValue("icon-translate-anchor",f);let b=t.getLayoutValue("icon-rotation-alignment",f);b===s.RotationAlignment.AUTO&&(b=t.getLayoutValue("symbol-placement",f)===s.SymbolPlacement.POINT?s.RotationAlignment.VIEWPORT:s.RotationAlignment.MAP);const I=b===s.RotationAlignment.MAP,C=t.getLayoutValue("icon-keep-upright",f)&&I,E=x.isIconSDF,D=d===u.WGLDrawPhase.HITTEST,P=this._iconProgramOptions;P.id=D,P.sdf=E;const O=h.getMaterialProgram(a,g,P);a.useProgram(O),O.setUniformMatrix3fv("u_displayViewMat3",b===s.RotationAlignment.MAP?v.displayViewMat3:v.displayMat3),O.setUniformMatrix3fv("u_displayMat3",S===s.TranslateAnchor.VIEWPORT?v.displayMat3:v.displayViewMat3),O.setUniform2fv("u_iconTranslation",y),O.setUniform1f("u_depth",t.z),O.setUniform1f("u_mapRotation",(0,c.degToByte)(v.rotation)),O.setUniform1f("u_keepUpright",C?1:0),O.setUniform1f("u_level",10*f),O.setUniform1i("u_texture",l.VTL_TEXTURE_BINDING_UNIT_SPRITES),O.setUniform1f("u_fadeDuration",r.FADE_DURATION/1e3),D&&O.setUniform4fv("u_id",i);let A=-1;for(const i of n){if(!i.layerData.has(p))continue;if(i.key.level!==A&&(A=i.key.level,g.setDataUniforms(O,f,t,A,m)),x=i.layerData.get(p),0===x.iconPerPageElementsMap.size)continue;x.prepareForRendering(a),x.updateOpacityInfo();const n=x.iconVertexArrayObject;if(!(0,o.isNone)(n)){a.bindVAO(n),O.setUniformMatrix3fv("u_dvsMat3",i.transforms.dvs),O.setUniform1f("u_time",(performance.now()-x.lastOpacityUpdate)/1e3);for(const[t,n]of x.iconPerPageElementsMap)this._renderIconRange(e,O,n,t,i)}}}_renderIconRange(e,t,n,i,o){const{context:a,spriteMosaic:r}=e;this._spritesTextureSize[0]=r.getWidth(i)/4,this._spritesTextureSize[1]=r.getHeight(i)/4,t.setUniform2fv("u_mosaicSize",this._spritesTextureSize),r.bind(a,_.TextureSamplingMode.LINEAR,i,l.VTL_TEXTURE_BINDING_UNIT_SPRITES),a.setStencilTestEnabled(!0),a.setStencilFunction(_.CompareFunction.GREATER,255,255),a.setStencilWriteMask(0),a.drawElements(_.PrimitiveType.TRIANGLES,n[1],_.DataType.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*n[0]),o.triangleCount+=n[1]/3}_drawText(e,t,n,i){const{context:f,displayLevel:d,drawPhase:m,glyphMosaic:v,painter:p,pixelRatio:g,spriteMosaic:h,state:x,styleLayerUID:T}=e,y=t.textMaterial,S=p.vectorTilesMaterialManager;let b,I=!1;for(const e of n)if(e.layerData.has(T)&&(b=e.layerData.get(T),b.glyphPerPageElementsMap.size>0)){I=!0;break}if(!I)return;const C=t.getPaintProperty("text-opacity");if(C&&!C.isDataDriven&&0===C.getValue(d))return;const E=t.getPaintProperty("text-color"),D=!E||E.isDataDriven||E.getValue(d)[3]>0,P=t.getPaintProperty("text-halo-width"),O=t.getPaintProperty("text-halo-color"),A=(!P||P.isDataDriven||P.getValue(d)>0)&&(!O||O.isDataDriven||O.getValue(d)[3]>0);if(!D&&!A)return;let R=t.getLayoutValue("text-rotation-alignment",d);R===s.RotationAlignment.AUTO&&(R=t.getLayoutValue("symbol-placement",d)===s.SymbolPlacement.POINT?s.RotationAlignment.VIEWPORT:s.RotationAlignment.MAP);const L=R===s.RotationAlignment.MAP,N=t.getLayoutValue("text-keep-upright",d)&&L,U=m===u.WGLDrawPhase.HITTEST,V=.8*3/g;this._glyphTextureSize||(this._glyphTextureSize=(0,a.f)(v.width/4,v.height/4));const M=t.getPaintValue("text-translate",d),z=t.getPaintValue("text-translate-anchor",d),w=this._sdfProgramOptions;w.id=U;const F=S.getMaterialProgram(f,y,w);f.useProgram(F),F.setUniformMatrix3fv("u_displayViewMat3",R===s.RotationAlignment.MAP?x.displayViewMat3:x.displayMat3),F.setUniformMatrix3fv("u_displayMat3",z===s.TranslateAnchor.VIEWPORT?x.displayMat3:x.displayViewMat3),F.setUniform2fv("u_textTranslation",M),F.setUniform1f("u_depth",t.z+152587890625e-16),F.setUniform2fv("u_mosaicSize",this._glyphTextureSize),F.setUniform1f("u_mapRotation",(0,c.degToByte)(x.rotation)),F.setUniform1f("u_keepUpright",N?1:0),F.setUniform1f("u_level",10*d),F.setUniform1i("u_texture",l.VTL_TEXTURE_BINDING_UNIT_GLYPHS),F.setUniform1f("u_antialiasingWidth",V),F.setUniform1f("u_fadeDuration",r.FADE_DURATION/1e3),U&&F.setUniform4fv("u_id",i);let G=-1;for(const e of n){if(!e.layerData.has(T))continue;if(e.key.level!==G&&(G=e.key.level,y.setDataUniforms(F,d,t,G,h)),b=e.layerData.get(T),0===b.glyphPerPageElementsMap.size)continue;b.prepareForRendering(f),b.updateOpacityInfo();const n=b.textVertexArrayObject;if((0,o.isNone)(n))continue;f.bindVAO(n),F.setUniformMatrix3fv("u_dvsMat3",e.transforms.dvs),f.setStencilTestEnabled(!0),f.setStencilFunction(_.CompareFunction.GREATER,255,255),f.setStencilWriteMask(0);const i=(performance.now()-b.lastOpacityUpdate)/1e3;F.setUniform1f("u_time",i),b.glyphPerPageElementsMap.forEach(((t,n)=>{this._renderGlyphRange(f,t,n,v,F,A,D,e)}))}}_renderGlyphRange(e,t,n,i,o,a,r,s){i.bind(e,_.TextureSamplingMode.LINEAR,n,l.VTL_TEXTURE_BINDING_UNIT_GLYPHS),a&&(o.setUniform1f("u_halo",1),e.drawElements(_.PrimitiveType.TRIANGLES,t[1],_.DataType.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),s.triangleCount+=t[1]/3),r&&(o.setUniform1f("u_halo",0),e.drawElements(_.PrimitiveType.TRIANGLES,t[1],_.DataType.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),s.triangleCount+=t[1]/3)}constructor(){super(...arguments),this._iconProgramOptions={id:!1,sdf:!1},this._sdfProgramOptions={id:!1},this._spritesTextureSize=(0,a.c)()}}})),t.register("f6RQI",(function(n,i){e(n.exports,"default",(function(){return g}));var o=t("1CpCt"),a=t("lQo64"),r=t("aPQ4T"),s=t("eyQUy"),l=t("cPgEa"),u=t("i2jNz"),c=t("eDdav"),f=t("g0mVO"),d=t("l3QXd"),_=t("gn7r1"),m=t("bEXVh"),v=t("2HKUi"),p=t("4radX");class g extends u.default{dispose(){this._disposeTextures(),this._dotFBO=(0,o.disposeMaybe)(this._dotFBO),this._dotVAO=(0,o.disposeMaybe)(this._dotVAO)}getGeometryType(){return s.WGLGeometryType.FILL}drawGeometry(e,t,n,i){const{context:a,painter:r,rendererInfo:s,requiredLevel:u,passOptions:f}=e,_=c.FillMaterialKey.load(n.materialKey),m=r.materialManager;let v=d.PrimitiveType.TRIANGLES,p=(e=>{const t={geometry:[{location:0,name:"a_pos",count:2,type:d.DataType.SHORT},{location:1,name:"a_id",count:3,type:d.DataType.UNSIGNED_BYTE},{location:2,name:"a_bitset",count:1,type:d.DataType.UNSIGNED_BYTE}]};return e.dotDensity?(t.geometry.push({location:3,name:"a_inverseArea",count:1,type:d.DataType.FLOAT}),(0,l.createProgramDescriptor)(e.data,t)):(t.geometry.push({location:3,name:"a_color",count:4,type:d.DataType.UNSIGNED_BYTE,normalized:!0}),e.simple||t.geometry.push({location:4,name:"a_aux1",count:4,type:d.DataType.UNSIGNED_SHORT}),t.geometry.push({location:5,name:"a_aux2",count:4,type:d.DataType.UNSIGNED_BYTE},{location:6,name:"a_aux3",count:4,type:d.DataType.UNSIGNED_BYTE}),e.simple||t.geometry.push({location:7,name:"a_zoomRange",count:2,type:d.DataType.UNSIGNED_SHORT}),(0,l.createProgramDescriptor)(e.data,t))})(_);(0,o.isSome)(f)&&"hittest"===f.type&&(p=this._getTriangleDesc(n.materialKey,p),v=d.PrimitiveType.POINTS);const{attributes:g,bufferLayouts:h}=p,x=m.getMaterialProgram(e,_,"materials/fill",g,i);if(a.useProgram(x),this._setSharedUniforms(x,e,t),x.setUniform2f("u_tileOffset",512*t.key.col,512*t.key.row),_.textureBinding){r.textureManager.bindTextures(a,x,_);const n=1/2**(u-t.key.level)/e.pixelRatio;x.setUniform1f("u_zoomFactor",n)}const T=1/e.pixelRatio;x.setUniform1f("u_blur",T),x.setUniform1f("u_antialiasing",T),this._setSizeVVUniforms(_,x,s,t),this._setColorAndOpacityVVUniforms(_,x,s);const y=(0,o.isSome)(f)&&"hittest"===f.type,S=n.target.getVAO(a,h,g,y);let b=n.indexCount,I=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;if(y&&(b/=3,I/=3),a.bindVAO(S),!_.dotDensity||y)a.drawElements(v,b,d.DataType.UNSIGNED_INT,I);else{const n=this._drawDotLocations(e,t,x,b,I);this._drawDotDensity(e,t,n)}}_drawDotDensity(e,t,n){const{context:i,painter:o,rendererInfo:a}=e,r=o.materialManager.getProgram(e,this._dotDesc),s=this._createDotDensityMesh(i,this._dotDesc.attributes,{geometry:[{name:"a_pos",count:2,type:d.DataType.SHORT,divisor:0,normalized:!1,offset:0,stride:4}]});i.setStencilTestEnabled(!0),i.useProgram(r),r.setUniform1f("u_tileZoomFactor",1),r.setUniform1i("u_texture",this._dotSamplers[0]),r.setUniform1f("u_dotSize",Math.max(a.ddDotSize,1)),r.setUniform1f("u_pixelRatio",window.devicePixelRatio),this._setSharedUniforms(r,e,t),i.bindTexture(n,this._dotSamplers[0]),i.bindVAO(s),i.drawArrays(d.PrimitiveType.POINTS,0,262144)}_drawDotLocations(e,t,n,i,o){const{context:a,rendererInfo:s,requiredLevel:l}=e,u=a.getViewport();a.setViewport(0,0,512,512);const c=a.getBoundFramebufferObject(),f=this._createFBO(a);a.bindFramebuffer(f),a.setClearColor(0,0,0,0),a.clear(a.gl.COLOR_BUFFER_BIT|a.gl.STENCIL_BUFFER_BIT),a.setStencilTestEnabled(!1);const _=1/2**(l-t.key.level),m=r.TILE_SIZE,v=m*window.devicePixelRatio*m*window.devicePixelRatio,p=1/_*(1/_),g=s.ddDotScale?e.state.scale/s.ddDotScale:1;return n.setUniform1f("u_tileZoomFactor",_),n.setUniform1f("u_tileDotsOverArea",v/(r.TILE_SIZE*window.devicePixelRatio*r.TILE_SIZE*window.devicePixelRatio)),n.setUniformMatrix4fv("u_dotColors",s.ddColors),n.setUniform4fv("u_isActive",s.ddActiveDots),n.setUniform4fv("u_dotBackgroundColor",s.ddBackgroundColor),n.setUniform1f("u_dotValue",Math.max(1,s.ddDotValue*g*p)),this._bindDotDensityTextures(a,n,s,m),a.drawElements(d.PrimitiveType.TRIANGLES,i,d.DataType.UNSIGNED_INT,o),a.setViewport(u.x,u.y,u.width,u.height),a.bindFramebuffer(c),f.colorTexture}_createFBO(e){if((0,o.isNone)(this._dotFBO)){const t=512,n=512,i={target:d.TextureType.TEXTURE_2D,pixelFormat:d.PixelFormat.RGBA,dataType:d.PixelType.UNSIGNED_BYTE,samplingMode:d.TextureSamplingMode.NEAREST,wrapMode:d.TextureWrapMode.CLAMP_TO_EDGE,width:t,height:n},o={colorTarget:d.TargetType.TEXTURE,depthStencilTarget:d.DepthStencilTargetType.DEPTH_STENCIL_RENDER_BUFFER},a=new(0,m.Renderbuffer)(e,{width:t,height:n,internalFormat:d.RenderbufferFormat.DEPTH_STENCIL});this._dotFBO=new(0,_.FramebufferObject)(e,o,i,a)}return this._dotFBO}_disposeTextures(){if(this._dotTextures){for(let e=0;e<this._dotTextures.length;e++)this._dotTextures[e].dispose();this._dotTextures=null}}_bindDotDensityTextures(e,t,n,i){const o=this._createDotDensityTextures(e,i,n.ddSeed);t.setUniform1iv("u_dotTextures",this._dotSamplers);for(let t=0;t<o.length;t++)e.bindTexture(o[t],this._dotSamplers[t])}_createDotDensityMesh(e,t,n){if((0,o.isNone)(this._dotVAO)){const i=2,o=new Int16Array(262144*i);for(let e=0;e<512;e++)for(let t=0;t<512;t++)o[i*(t+512*e)]=t,o[i*(t+512*e)+1]=e;const a=f.BufferObject.createVertex(e,d.Usage.STATIC_DRAW,o);this._dotVAO=new(0,p.VertexArrayObject)(e,t,n,{geometry:a},null)}return this._dotVAO}_createDotDensityTextures(e,t,n){if(this._dotTextureSize===t&&this._seed===n||(this._disposeTextures(),this._dotTextureSize=t,this._seed=n),null===this._dotTextures){const i=new(0,a.default)(n);this._dotTextures=[this._allocDotDensityTexture(e,t,i),this._allocDotDensityTexture(e,t,i)]}return this._dotTextures}_allocDotDensityTexture(e,t,n){const i=new Float32Array(t*t*4);for(let e=0;e<i.length;e++)i[e]=n.getFloat();return new(0,v.Texture)(e,{wrapMode:d.TextureWrapMode.REPEAT,pixelFormat:d.PixelFormat.RGBA,dataType:d.PixelType.FLOAT,samplingMode:d.TextureSamplingMode.NEAREST,width:t,height:t},i)}constructor(){super(...arguments),this._dotTextureSize=0,this._dotTextures=null,this._dotSamplers=new Int32Array([r.TEXTURE_BINDING_RENDERER_0,r.TEXTURE_BINDING_RENDERER_1]),this._dotVAO=null,this._dotDesc={vsPath:"dot/dot",fsPath:"dot/dot",attributes:new Map([["a_pos",0]])}}}})),t.register("i2jNz",(function(n,i){e(n.exports,"default",(function(){return l}));var o=t("1CpCt"),a=t("aPQ4T"),r=t("kUF3z"),s=t("l3QXd");class l extends r.default{prepareState({context:e},t,n){const i=n&&-1!==n.indexOf("hittest");e.setBlendingEnabled(!i),e.setBlendFunctionSeparate(s.BlendFactor.ONE,s.BlendFactor.ONE_MINUS_SRC_ALPHA,s.BlendFactor.ONE,s.BlendFactor.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(s.CompareFunction.EQUAL,t.stencilRef,255)}draw(e,t,n){const i=this.getGeometryType();t.commit(e);const a=t.getGeometry(i);(0,o.isNone)(a)||(e.timeline.begin(this.name),e.attributeView.bindTextures(e.context),a.forEachCommand((i=>this.drawGeometry(e,t,i,n))))}_setSharedUniforms(e,t,n){const{displayLevel:i,pixelRatio:r,state:s,passOptions:l}=t;(0,o.isSome)(l)&&"hittest"===l.type&&(e.setUniform2fv("u_hittestPos",l.position),e.setUniform1f("u_hittestDist",l.distance)),e.setUniform1f("u_pixelRatio",r),e.setUniformMatrix3fv("u_tileMat3",n.transforms.tileMat3),e.setUniformMatrix3fv("u_viewMat3",s.viewMat3),e.setUniformMatrix3fv("u_dvsMat3",n.transforms.dvs),e.setUniformMatrix3fv("u_displayViewMat3",s.displayViewMat3),e.setUniform1f("u_currentZoom",Math.round(i*a.MIN_MAX_ZOOM_PRECISION_FACTOR)),e.setUniform1i("u_attributeTextureSize",t.attributeView.size),e.setUniform1i("u_attributeData0",a.TEXTURE_BINDING_ATTRIBUTE_DATA_0),e.setUniform1i("u_attributeData1",a.TEXTURE_BINDING_ATTRIBUTE_DATA_1),e.setUniform1i("u_attributeData2",a.TEXTURE_BINDING_ATTRIBUTE_DATA_2),e.setUniform1i("u_attributeData3",a.TEXTURE_BINDING_ATTRIBUTE_DATA_3)}_setSizeVVUniforms(e,t,n,i){if(e.vvSizeMinMaxValue&&t.setUniform4fv("u_vvSizeMinMaxValue",n.vvSizeMinMaxValue),e.vvSizeScaleStops&&t.setUniform1f("u_vvSizeScaleStopsValue",n.vvSizeScaleStopsValue),e.vvSizeFieldStops){const e=n.getSizeVVFieldStops(i.key.level);t.setUniform1fv("u_vvSizeFieldStopsValues",e.values),t.setUniform1fv("u_vvSizeFieldStopsSizes",e.sizes)}e.vvSizeUnitValue&&t.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",n.vvSizeUnitValueToPixelsRatio)}_setColorAndOpacityVVUniforms(e,t,n){e.vvColor&&(t.setUniform1fv("u_vvColorValues",n.vvColorValues),t.setUniform4fv("u_vvColors",n.vvColors)),e.vvOpacity&&(t.setUniform1fv("u_vvOpacityValues",n.vvOpacityValues),t.setUniform1fv("u_vvOpacities",n.vvOpacities))}_setRotationVVUniforms(e,t,n){e.vvRotation&&t.setUniform1f("u_vvRotationType","geographic"===n.vvMaterialParameters.vvRotationType?0:1)}_getTriangleDesc(e,t){let n=this._computeDesc.get(e);if(!n){const i=t.strides,o=t.strides.geometry,a=new Map(t.attributes),r=t.bufferLayouts.geometry.map((e=>({...e}))),l=Math.max(...t.attributes.values()),u={geometry:r};u.geometry.push({count:2,name:"a_pos1",divisor:0,normalized:!1,offset:o,stride:o,type:s.DataType.SHORT}),u.geometry.push({count:2,name:"a_pos2",divisor:0,normalized:!1,offset:2*o,stride:o,type:s.DataType.SHORT}),a.set("a_pos1",l+1),a.set("a_pos2",l+2),n={bufferLayouts:u,attributes:a,strides:i},this._computeDesc.set(e,n)}return n}constructor(){super(...arguments),this._computeDesc=new Map}}})),t.register("hEqYM",(function(n,i){e(n.exports,"default",(function(){return u}));var o=t("eyQUy"),a=t("cPgEa"),r=t("i2jNz"),s=t("eDdav"),l=t("l3QXd");class u extends r.default{dispose(){}getGeometryType(){return o.WGLGeometryType.LABEL}drawGeometry(e,t,n,i){const{context:o,painter:r,state:u,rendererInfo:c}=e,f=s.LabelMaterialKey.load(n.materialKey),d=f.mapAligned?1:0;if(!d&&Math.abs(t.key.level-Math.round(100*e.displayLevel)/100)>=1)return;const{bufferLayouts:_,attributes:m}=(p=f,(0,a.createProgramDescriptor)(p.data,{geometry:[{location:0,name:"a_pos",count:2,type:l.DataType.SHORT},{location:1,name:"a_id",count:4,type:l.DataType.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:l.DataType.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_haloColor",count:4,type:l.DataType.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_texAndSize",count:4,type:l.DataType.UNSIGNED_BYTE},{location:5,name:"a_refSymbolAndPlacementOffset",count:4,type:l.DataType.UNSIGNED_BYTE},{location:6,name:"a_glyphData",count:4,type:l.DataType.UNSIGNED_BYTE},{location:7,name:"a_vertexOffset",count:2,type:l.DataType.SHORT},{location:8,name:"a_texCoords",count:2,type:l.DataType.UNSIGNED_SHORT}]})),v=r.materialManager.getMaterialProgram(e,f,"materials/label",m,i);var p;e.context.setStencilFunction(l.CompareFunction.EQUAL,0,255),o.useProgram(v),this._setSharedUniforms(v,e,t),r.textureManager.bindTextures(o,v,f);const g=1===d?u.displayViewMat3:u.displayMat3;this._setSizeVVUniforms(f,v,c,t),v.setUniform1f("u_mapRotation",Math.floor(u.rotation/360*254)),v.setUniform1f("u_mapAligned",d),v.setUniformMatrix3fv("u_displayMat3",g),v.setUniform1f("u_opacity",1),v.setUniform2fv("u_screenSize",e.state.size),v.setUniform1f("u_isHalo",1);const h=n.target.getVAO(o,_,m),x=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;o.bindVAO(h),o.drawElements(l.PrimitiveType.TRIANGLES,n.indexCount,l.DataType.UNSIGNED_INT,x),v.setUniform1f("u_isHalo",0),o.drawElements(l.PrimitiveType.TRIANGLES,n.indexCount,l.DataType.UNSIGNED_INT,x),o.setStencilTestEnabled(!0),o.setBlendingEnabled(!0)}}})),t.register("ffM10",(function(n,i){e(n.exports,"default",(function(){return c}));var o=t("1CpCt"),a=t("eyQUy"),r=t("cPgEa"),s=t("i2jNz"),l=t("eDdav"),u=t("l3QXd");class c extends s.default{dispose(){}getGeometryType(){return a.WGLGeometryType.LINE}drawGeometry(e,t,n,i){const{context:a,painter:s,rendererInfo:c,displayLevel:f,passOptions:d}=e,_=l.LineMaterialKey.load(n.materialKey);let m=(p=_,(0,r.createProgramDescriptor)(p.data,{geometry:[{location:0,name:"a_pos",count:2,type:u.DataType.SHORT},{location:1,name:"a_id",count:4,type:u.DataType.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:u.DataType.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_offsetAndNormal",count:4,type:u.DataType.BYTE},{location:4,name:"a_accumulatedDistanceAndHalfWidth",count:2,type:u.DataType.UNSIGNED_SHORT},{location:5,name:"a_tlbr",count:4,type:u.DataType.UNSIGNED_SHORT},{location:6,name:"a_segmentDirection",count:4,type:u.DataType.BYTE},{location:7,name:"a_aux",count:2,type:u.DataType.UNSIGNED_SHORT},{location:8,name:"a_zoomRange",count:2,type:u.DataType.UNSIGNED_SHORT}]})),v=u.PrimitiveType.TRIANGLES;var p;(0,o.isSome)(d)&&"hittest"===d.type&&(m=this._getTriangleDesc(n.materialKey,m),v=u.PrimitiveType.POINTS);const{attributes:g,bufferLayouts:h}=m,x=s.materialManager.getMaterialProgram(e,_,"materials/line",g,i),T=1/e.pixelRatio;a.useProgram(x),this._setSharedUniforms(x,e,t),_.textureBinding&&s.textureManager.bindTextures(a,x,_);const y=2**(f-t.key.level)/e.pixelRatio;x.setUniform1f("u_zoomFactor",y),x.setUniform1f("u_blur",0+T),x.setUniform1f("u_antialiasing",T),this._setSizeVVUniforms(_,x,c,t),this._setColorAndOpacityVVUniforms(_,x,c),a.setFaceCullingEnabled(!1);const S=(0,o.isSome)(d)&&"hittest"===d.type,b=n.target.getVAO(a,h,g,S);let I=n.indexCount,C=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;S&&(I/=3,C/=3),a.bindVAO(b),a.drawElements(v,I,u.DataType.UNSIGNED_INT,C)}}})),t.register("2rCUj",(function(n,i){e(n.exports,"default",(function(){return c}));var o=t("1CpCt"),a=t("eyQUy"),r=t("cPgEa"),s=t("i2jNz"),l=t("eDdav"),u=t("l3QXd");class c extends s.default{dispose(){}getGeometryType(){return a.WGLGeometryType.MARKER}drawGeometry(e,t,n,i){const{context:a,painter:s,rendererInfo:c,state:f,passOptions:d}=e,_=l.MarkerMaterialKey.load(n.materialKey),{bufferLayouts:m,attributes:v}=(g=_,(0,r.createProgramDescriptor)(g.data,{geometry:[{location:0,name:"a_pos",count:2,type:u.DataType.SHORT},{location:1,name:"a_vertexOffset",count:2,type:u.DataType.SHORT},{location:2,name:"a_texCoords",count:2,type:u.DataType.UNSIGNED_SHORT},{location:3,name:"a_bitSetAndDistRatio",count:2,type:u.DataType.UNSIGNED_SHORT},{location:4,name:"a_id",count:4,type:u.DataType.UNSIGNED_BYTE},{location:5,name:"a_color",count:4,type:u.DataType.UNSIGNED_BYTE,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:u.DataType.UNSIGNED_BYTE,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:u.DataType.UNSIGNED_BYTE},{location:8,name:"a_zoomRange",count:2,type:u.DataType.UNSIGNED_SHORT}]})),p=s.materialManager.getMaterialProgram(e,_,"materials/icon",v,i);var g;a.useProgram(p),_.textureBinding&&s.textureManager.bindTextures(a,p,_,!0);let h=u.PrimitiveType.TRIANGLES;(0,o.isSome)(d)&&"hittest"===d.type&&(h=u.PrimitiveType.POINTS),this._setSharedUniforms(p,e,t);const x=_.vvRotation?f.displayViewMat3:f.displayMat3;p.setUniformMatrix3fv("u_displayMat3",x),this._setSizeVVUniforms(_,p,c,t),this._setColorAndOpacityVVUniforms(_,p,c),this._setRotationVVUniforms(_,p,c);const T=n.target.getVAO(a,m,v),y=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;a.bindVAO(T),a.drawElements(h,n.indexCount,u.DataType.UNSIGNED_INT,y)}}})),t.register("b1gIk",(function(n,i){e(n.exports,"default",(function(){return c}));var o=t("1CpCt"),a=t("eyQUy"),r=t("cPgEa"),s=t("i2jNz"),l=t("eDdav"),u=t("l3QXd");class c extends s.default{dispose(){}getGeometryType(){return a.WGLGeometryType.TEXT}drawGeometry(e,t,n,i){const{context:a,painter:s,rendererInfo:c,state:f,passOptions:d}=e,_=l.TextMaterialKey.load(n.materialKey),{bufferLayouts:m,attributes:v}=(g=_,(0,r.createProgramDescriptor)(g.data,{geometry:[{location:0,name:"a_pos",count:2,type:u.DataType.SHORT},{location:1,name:"a_id",count:4,type:u.DataType.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:u.DataType.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_haloColor",count:4,type:u.DataType.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_texFontSize",count:4,type:u.DataType.UNSIGNED_BYTE},{location:5,name:"a_aux",count:4,type:u.DataType.BYTE},{location:6,name:"a_zoomRange",count:2,type:u.DataType.UNSIGNED_SHORT},{location:7,name:"a_vertexOffset",count:2,type:u.DataType.SHORT},{location:8,name:"a_texCoords",count:2,type:u.DataType.UNSIGNED_SHORT}]})),p=s.materialManager.getMaterialProgram(e,_,"materials/text",v,i);var g;a.useProgram(p);let h=u.PrimitiveType.TRIANGLES;(0,o.isSome)(d)&&"hittest"===d.type&&(h=u.PrimitiveType.POINTS),this._setSharedUniforms(p,e,t),s.textureManager.bindTextures(a,p,_),p.setUniformMatrix3fv("u_displayMat3",f.displayMat3),p.setUniformMatrix3fv("u_displayViewMat3",f.displayViewMat3),this._setSizeVVUniforms(_,p,c,t),this._setColorAndOpacityVVUniforms(_,p,c),this._setRotationVVUniforms(_,p,c),p.setUniform1f("u_isHalo",1);const x=n.target.getVAO(a,m,v),T=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;a.bindVAO(x),a.drawElements(u.PrimitiveType.TRIANGLES,n.indexCount,u.DataType.UNSIGNED_INT,T),p.setUniform1f("u_isHalo",0),a.drawElements(h,n.indexCount,u.DataType.UNSIGNED_INT,T)}}})),t.register("eqJSJ",(function(n,i){e(n.exports,"default",(function(){return c})),t("5HTPH");var o=t("1CpCt"),a=t("jsolS"),r=t("4ZNdX"),s=t("jrPhy"),l=t("jqn4d"),u=t("eyQUy");class c extends s.Container{set clips(e){this._clips=e,this.children.forEach((t=>t.clips=e)),this._updateClippingInfo()}_createTransforms(){return{dvs:(0,a.c)()}}doRender(e){const t=this.createRenderParams(e),{painter:n,globalOpacity:i,profiler:o,drawPhase:a}=t,r=a===u.WGLDrawPhase.LABEL||a===u.WGLDrawPhase.HIGHLIGHT?1:i*this.computedOpacity;o.recordContainerStart(this.name),n.beforeRenderLayer(t,this._clippingInfos?255:0,r),this.updateTransforms(e.state),this.renderChildren(t),n.compositeLayer(t,r),o.recordContainerEnd()}renderChildren(e){(0,o.isNone)(this._renderPasses)&&(this._renderPasses=this.prepareRenderPasses(e.painter));for(const t of this.children)t.beforeRender(e);for(const t of this._renderPasses)try{t.render(e)}catch(e){}for(const t of this.children)t.afterRender(e)}createRenderParams(e){return e.requireFBO=this.requiresDedicatedFBO,e}prepareRenderPasses(e){return[e.registerRenderPass({name:"clip",brushes:[r.brushes.clip],target:()=>this._clippingInfos,drawPhase:u.WGLDrawPhase.MAP|u.WGLDrawPhase.LABEL|u.WGLDrawPhase.LABEL_ALPHA|u.WGLDrawPhase.DEBUG|u.WGLDrawPhase.HIGHLIGHT})]}updateTransforms(e){for(const t of this.children)t.setTransform(e)}onAttach(){super.onAttach(),this._updateClippingInfo()}onDetach(){super.onDetach(),this._updateClippingInfo()}_updateClippingInfo(){if((0,o.isSome)(this._clippingInfos)&&(this._clippingInfos.forEach((e=>e.destroy())),this._clippingInfos=null),!this.stage)return;const e=this._clips;(0,o.isSome)(e)&&e.length&&(this._clippingInfos=e.items.map((e=>l.default.fromClipArea(this.stage,e)))),this.requestRender()}constructor(){super(...arguments),this.name=this.constructor.name}}})),t.register("jqn4d",(function(n,i){e(n.exports,"default",(function(){return _}));var o=t("bPmsI"),a=t("6TszD"),r=t("1CpCt"),s=t("jsolS"),l=t("5aS5k"),u=t("7SJnW"),c=t("4radX");const f=a.default.getLogger("esri.views.2d.engine.webgl.ClippingInfo"),d=e=>parseFloat(e)/100;class _ extends l.DisplayObject{static fromClipArea(e,t){return new _(e,t)}_destroyGL(){(0,r.isSome)(this._cache.mesh)&&(this._cache.mesh.destroy(),this._cache.mesh=null),(0,r.isSome)(this._cache.vao)&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(e,t,n,i){const[o,a]=t.size;if("geometry"!==this._clip.type&&this._lastWidth===o&&this._lastHeight===a||(this._lastWidth=o,this._lastHeight=a,this._destroyGL()),(0,r.isNone)(this._cache.vao)){const o=this._createMesh(t,this._clip),a=o.getIndexBuffer(e),r=o.getVertexBuffers(e);this._cache.mesh=o,this._cache.vao=new(0,c.VertexArrayObject)(e,n,i,r,a)}return this._cache.vao}_createTransforms(){return{dvs:(0,s.c)()}}_invalidate(){this._destroyGL(),this.requestRender()}_createScreenRect(e,t){const[n,i]=e.size,o="string"==typeof t.left?d(t.left)*n:t.left,a="string"==typeof t.right?d(t.right)*n:t.right,r="string"==typeof t.top?d(t.top)*i:t.top,s="string"==typeof t.bottom?d(t.bottom)*i:t.bottom,l=o,u=r;return{x:l,y:u,width:Math.max(n-a-l,0),height:Math.max(i-s-u,0)}}_createMesh(e,t){switch(t.type){case"rect":return u.default.fromRect(this._createScreenRect(e,t));case"path":return u.default.fromPath(t);case"geometry":return u.default.fromGeometry(e,t);default:return f.error(new(0,o.default)("mapview-bad-type","Unable to create ClippingInfo mesh from clip of type: ${clip.type}")),u.default.fromRect({x:0,y:0,width:1,height:1})}}constructor(e,t){super(),this._clip=t,this._cache={},this.stage=e,this._handle=t.watch("version",(()=>this._invalidate())),this.ready()}}})),t.register("7SJnW",(function(n,i){e(n.exports,"default",(function(){return h}));var o=t("bPmsI"),a=t("6TszD"),r=t("1CpCt"),s=t("3Icya"),l=t("17nYB"),u=t("lOOi9"),c=t("8RZNq"),f=t("i24Gp"),d=t("3mbeV"),_=t("g0mVO"),m=t("l3QXd");const v=a.default.getLogger("esri.views.2d.engine.webgl.Mesh2D"),p=(e,t,n,i)=>{let o=0;for(let i=1;i<n;i++){const n=e[2*(t+i-1)],a=e[2*(t+i-1)+1];o+=(e[2*(t+i)]-n)*(e[2*(t+i)+1]+a)}return i?o>0:o<0},g=({coords:e,lengths:t},n)=>{const i=[];for(let o=0,a=0;o<t.length;a+=t[o],o+=1){const r=a,l=[];for(;o<t.length-1&&p(e,a+t[o],t[o+1],n);o+=1,a+=t[o])l.push(a+t[o]-r);const u=e.slice(2*r,2*(a+t[o])),c=(0,s.e)(u,l,2);for(const e of c)i.push(e+r)}return i};class h{static fromRect({x:e,y:t,width:n,height:i}){const o=e,a=t,r=o+n,s=a+i;return h.fromScreenExtent({xmin:o,ymin:a,xmax:r,ymax:s})}static fromPath(e){const t=(0,c.convertFromNestedArray)(new(0,f.default),e.path,!1,!1),n=t.coords,i=new Uint32Array(g(t,!0)),o=new Uint32Array(n.length/2);for(let e=0;e<o.length;e++)o[e]=(0,d.i1616to32)(Math.floor(n[2*e]),Math.floor(n[2*e+1]));return new h({geometry:o},i,m.PrimitiveType.TRIANGLES)}static fromGeometry(e,t){const n=t.geometry.type;switch(n){case"polygon":return h.fromPolygon(e,t.geometry);case"extent":return h.fromMapExtent(e,t.geometry);default:return v.error(new(0,o.default)("mapview-bad-type",`Unable to create a mesh from type ${n}`,t)),h.fromRect({x:0,y:0,width:1,height:1})}}static fromPolygon(e,t){const n=(0,c.convertFromPolygon)(new(0,f.default),t,!1,!1),i=n.coords,o=new Uint32Array(g(n,!1)),a=new Uint32Array(i.length/2),r=(0,u.a)(),s=(0,u.a)();for(let t=0;t<a.length;t++)(0,l.s)(r,i[2*t],i[2*t+1]),e.toScreen(s,r),a[t]=(0,d.i1616to32)(Math.floor(s[0]),Math.floor(s[1]));return new h({geometry:a},o,m.PrimitiveType.TRIANGLES,!0)}static fromScreenExtent({xmin:e,xmax:t,ymin:n,ymax:i}){const o={geometry:new Uint32Array([(0,d.i1616to32)(e,n),(0,d.i1616to32)(t,n),(0,d.i1616to32)(e,i),(0,d.i1616to32)(e,i),(0,d.i1616to32)(t,n),(0,d.i1616to32)(t,i)])},a=new Uint32Array([0,1,2,3,4,5]);return new h(o,a,m.PrimitiveType.TRIANGLES)}static fromMapExtent(e,t){const[n,i]=e.toScreen([0,0],[t.xmin,t.ymin]),[o,a]=e.toScreen([0,0],[t.xmax,t.ymax]),r={geometry:new Uint32Array([(0,d.i1616to32)(n,i),(0,d.i1616to32)(o,i),(0,d.i1616to32)(n,a),(0,d.i1616to32)(n,a),(0,d.i1616to32)(o,i),(0,d.i1616to32)(o,a)])},s=new Uint32Array([0,1,2,3,4,5]);return new h(r,s,m.PrimitiveType.TRIANGLES)}destroy(){(0,r.isSome)(this._cache.indexBuffer)&&this._cache.indexBuffer.dispose();for(const e in this._cache.vertexBuffers)(0,r.isSome)(this._cache.vertexBuffers[e])&&this._cache.vertexBuffers[e].dispose()}get elementType(){return(e=>{switch(e.BYTES_PER_ELEMENT){case 1:return m.DataType.UNSIGNED_BYTE;case 2:return m.DataType.UNSIGNED_SHORT;case 4:return m.DataType.UNSIGNED_INT;default:throw new(0,o.default)("Cannot get DataType of array")}})(this.indices)}getIndexBuffer(e,t=m.Usage.STATIC_DRAW){return this._cache.indexBuffer||(this._cache.indexBuffer=_.BufferObject.createIndex(e,t,this.indices)),this._cache.indexBuffer}getVertexBuffers(e,t=m.Usage.STATIC_DRAW){return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce(((n,i)=>({...n,[i]:_.BufferObject.createVertex(e,t,this.vertices[i])})),{})),this._cache.vertexBuffers}constructor(e,t,n,i=!1){this._cache={},this.vertices=e,this.indices=t,this.primitiveType=n,this.isMapSpace=i}}}));
//# sourceMappingURL=mapViewDeps.12bcfb51.js.map
