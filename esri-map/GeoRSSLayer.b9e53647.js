var e=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire594f;e.register("9RJUc",(function(t,r){var o,i,l,s,n;o=t.exports,Object.defineProperty(o,"__esModule",{value:!0,configurable:!0}),i=t.exports,l="default",s=function(){return A},Object.defineProperty(i,l,{get:s,set:n,enumerable:!0,configurable:!0});var a=e("j6uz9"),p=e("9XPDd"),y=e("bYA0c");e("cSqwa");var u=e("2IJVS"),d=e("lHg4e"),c=e("7dRCe"),f=e("hTI69");e("gHCNy"),e("aX9sh"),e("5HTPH");var h=e("bzBbJ"),g=e("qA6zg"),S=e("2WnyR"),v=e("fau59"),m=e("iGP99"),b=e("90xN9"),_=e("ctxhN"),C=e("54ioU"),P=e("eOpMC"),w=e("5lb2Y"),x=e("lixLM"),R=e("jnD7B"),G=e("aLvg8"),L=e("8A3N8"),O=e("2HOOk"),j=e("iA5S4");const M=["atom","xml"],k={base:R.default,key:"type",typeMap:{"simple-line":G.default},errorContext:"symbol"},E={base:R.default,key:"type",typeMap:{"picture-marker":L.default,"simple-marker":O.default},errorContext:"symbol"},F={base:R.default,key:"type",typeMap:{"simple-fill":j.default},errorContext:"symbol"};let T=class extends((0,b.BlendLayer)((0,P.RefreshableLayer)((0,_.OperationalLayer)((0,C.PortalLayer)((0,w.ScaleRangeLayer)((0,u.MultiOriginJSONMixin)(m.default))))))){normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{const t=e.layerDefinition.drawingInfo.renderer.symbol;t&&"esriSFS"===t.type&&t.outline?.style.includes("esriSFS")&&(t.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?(0,c.getFilename)(this.url,M)||"GeoRSS":e||""}set title(e){this._set("title",e)}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(d.throwIfAbortError).then((()=>this._fetchService(t))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){const t=this.spatialReference,{data:r}=await(0,y.default)(p.default.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:(0,v.isWGS84)(t)?void 0:t.wkid??JSON.stringify(t)},signal:e});return r}_hasGeometry(e){return this.featureCollections?.some((t=>t.featureSet?.geometryType===e&&t.featureSet.features?.length>0))??!1}constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}};(0,a._)([(0,f.property)()],T.prototype,"description",void 0),(0,a._)([(0,f.property)()],T.prototype,"featureCollections",void 0),(0,a._)([(0,h.reader)("service","featureCollections",["featureCollection.layers"])],T.prototype,"readFeatureCollections",null),(0,a._)([(0,f.property)({type:S.default,json:{name:"lookAtExtent"}})],T.prototype,"fullExtent",void 0),(0,a._)([(0,f.property)(x.id)],T.prototype,"id",void 0),(0,a._)([(0,f.property)(x.legendEnabled)],T.prototype,"legendEnabled",void 0),(0,a._)([(0,f.property)({types:k,json:{write:!0}})],T.prototype,"lineSymbol",void 0),(0,a._)([(0,f.property)({type:["show","hide"]})],T.prototype,"listMode",void 0),(0,a._)([(0,f.property)({types:E,json:{write:!0}})],T.prototype,"pointSymbol",void 0),(0,a._)([(0,f.property)({types:F,json:{write:!0}})],T.prototype,"polygonSymbol",void 0),(0,a._)([(0,f.property)({type:["GeoRSS"]})],T.prototype,"operationalLayerType",void 0),(0,a._)([(0,f.property)(x.url)],T.prototype,"url",void 0),(0,a._)([(0,f.property)({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],T.prototype,"title",null),(0,a._)([(0,f.property)({readOnly:!0,json:{read:!1},value:"geo-rss"})],T.prototype,"type",void 0),T=(0,a._)([(0,g.subclass)("esri.layers.GeoRSSLayer")],T);const A=T}));
//# sourceMappingURL=GeoRSSLayer.b9e53647.js.map
