function t(t,e,i,s){Object.defineProperty(t,e,{get:i,set:s,enumerable:!0,configurable:!0})}var e=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire594f;e.register("1wOrp",(function(i,s){t(i.exports,"default",(function(){return d}));var n=e("j6uz9");e("5HTPH");var l,r=e("bPmsI"),o=e("hO0an"),a=e("itGIg"),h=e("6TszD"),f=e("1CpCt"),u=e("hTI69"),c=e("5ORF5"),p=e("qA6zg");const x=h.default.getLogger("esri.layers.support.PixelBlock");let m=l=class extends o.JSONSupport{static createEmptyBand(t,e){return new(l.getPixelArrayConstructor(t))(e)}static getPixelArrayConstructor(t){let e;switch(t){case"u1":case"u2":case"u4":case"u8":e=Uint8Array;break;case"u16":e=Uint16Array;break;case"u32":e=Uint32Array;break;case"s8":e=Int8Array;break;case"s16":e=Int16Array;break;case"s32":e=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":e=Float32Array;break;case"f64":e=Float64Array}return e}castPixelType(t){if(!t)return"f32";let e=t.toLowerCase();return["u1","u2","u4"].indexOf(e)>-1?e="u8":-1===["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].indexOf(e)&&(e="f32"),e}getPlaneCount(){return this.pixels&&this.pixels.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new(0,r.default)("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics||{minValue:null,maxValue:null})}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){this.statistics=this.pixels.map((t=>this._calculateBandStatistics(t,this.mask)));const t=this.mask;let e=0;if(t)for(let i=0;i<t.length;i++)t[i]&&e++;else e=this.width*this.height;this.validPixelCount=e}clamp(t){if(!t||"f64"===t||"f32"===t)return;let e;switch(t){case"u8":e=[0,255];break;case"u16":e=[0,65535];break;case"u32":e=[0,4294967295];break;case"s8":e=[-128,127];break;case"s16":e=[-32768,32767];break;case"s32":e=[-2147483648,2147483647];break;default:e=[-34e38,34e38]}const[i,s]=e,n=this.pixels,r=this.width*this.height,o=n.length;let a,h,f;const u=[];for(let e=0;e<o;e++){f=l.createEmptyBand(t,r),a=n[e];for(let t=0;t<r;t++)h=a[t],f[t]=h>s?s:h<i?i:h;u.push(f)}this.pixels=u,this.pixelType=t}extractBands(t){if((0,f.isNone)(t)||0===t.length||null==this.pixels||0===this.pixels.length)return this;const e=this.pixels.length,i=t.some((t=>t>=this.pixels.length)),s=e===t.length&&!t.some(((t,e)=>t!==e));return i||s?this:new l({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:t.map((t=>this.pixels[t])),statistics:this.statistics&&t.map((t=>this.statistics[t]))})}clone(){const t=new l({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let e;this.mask&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0));const i=l.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const s=this.pixels[0].slice;for(e=0;e<this.pixels.length;e++)t.pixels[e]=s?this.pixels[e].slice(0,this.pixels[e].length):new i(this.pixels[e])}if(this.statistics)for(t.statistics=[],e=0;e<this.statistics.length;e++)t.statistics[e]=(0,a.clone)(this.statistics[e]);return t}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:i,pixels:s}=this;if(!t||!s||!s.length)return void x.error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let n,l,r,o;n=l=r=s[0],s.length>=3?(l=s[1],r=s[2]):2===s.length&&(l=s[1]);const a=new Uint32Array(t),h=this.width*this.height;if(n.length===h)if(e&&e.length===h)if(i)for(o=0;o<h;o++)e[o]&&(a[o]=e[o]<<24|r[o]<<16|l[o]<<8|n[o]);else for(o=0;o<h;o++)e[o]&&(a[o]=-16777216|r[o]<<16|l[o]<<8|n[o]);else for(o=0;o<h;o++)a[o]=-16777216|r[o]<<16|l[o]<<8|n[o];else x.error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:e,mask:i,statistics:s}=this;if(!t||!e||!e.length)return void x.error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const n=this.pixelType;let l=1,r=0,o=1;if(s&&s.length>0)r=s.map((t=>t.minValue)).reduce(((t,e)=>Math.min(t,e))),o=s.map((t=>t.maxValue-t.minValue)).reduce(((t,e)=>Math.max(t,e))),l=255/o;else{let t=255;"s8"===n?(r=-128,t=127):"u16"===n?t=65535:"s16"===n?(r=-32768,t=32767):"u32"===n?t=4294967295:"s32"===n?(r=-2147483648,t=2147483647):"f32"===n?(r=-34e38,t=34e38):"f64"===n&&(r=-Number.MAX_VALUE,t=Number.MAX_VALUE),l=255/(t-r)}const a=new Uint32Array(t),h=this.width*this.height;let f,u,c,p,m;if(f=u=c=e[0],f.length!==h)return x.error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(e.length>=2)if(u=e[1],e.length>=3&&(c=e[2]),i&&i.length===h)for(p=0;p<h;p++)i[p]&&(a[p]=-16777216|(c[p]-r)*l<<16|(u[p]-r)*l<<8|(f[p]-r)*l);else for(p=0;p<h;p++)a[p]=-16777216|(c[p]-r)*l<<16|(u[p]-r)*l<<8|(f[p]-r)*l;else if(i&&i.length===h)for(p=0;p<h;p++)m=(f[p]-r)*l,i[p]&&(a[p]=-16777216|m<<16|m<<8|m);else for(p=0;p<h;p++)m=(f[p]-r)*l,a[p]=-16777216|m<<16|m<<8|m}_fillFrom32Bit(t){const{pixels:e,mask:i}=this;if(!t||!e||!e.length)return x.error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let s,n,l,r;s=n=l=e[0],e.length>=3?(n=e[1],l=e[2]):2===e.length&&(n=e[1]);const o=this.width*this.height;if(s.length!==o)return x.error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let a=0;if(i&&i.length===o)for(r=0;r<o;r++)t[a++]=s[r],t[a++]=n[r],t[a++]=l[r],t[a++]=1&i[r];else for(r=0;r<o;r++)t[a++]=s[r],t[a++]=n[r],t[a++]=l[r],t[a++]=1}_calculateBandStatistics(t,e){let i=1/0,s=-1/0;const n=t.length;let l,r=0;if(e)for(l=0;l<n;l++)e[l]&&(r=t[l],i=r<i?r:i,s=r>s?r:s);else for(l=0;l<n;l++)r=t[l],i=r<i?r:i,s=r>s?r:s;return{minValue:i,maxValue:s}}constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.pixels=null,this.statistics=null}};(0,n._)([(0,u.property)({json:{write:!0}})],m.prototype,"width",void 0),(0,n._)([(0,u.property)({json:{write:!0}})],m.prototype,"height",void 0),(0,n._)([(0,u.property)({json:{write:!0}})],m.prototype,"pixelType",void 0),(0,n._)([(0,c.cast)("pixelType")],m.prototype,"castPixelType",null),(0,n._)([(0,u.property)({json:{write:!0}})],m.prototype,"validPixelCount",void 0),(0,n._)([(0,u.property)({json:{write:!0}})],m.prototype,"mask",void 0),(0,n._)([(0,u.property)({json:{write:!0}})],m.prototype,"maskIsAlpha",void 0),(0,n._)([(0,u.property)({json:{write:!0}})],m.prototype,"pixels",void 0),(0,n._)([(0,u.property)({json:{write:!0}})],m.prototype,"statistics",void 0),m=l=(0,n._)([(0,p.subclass)("esri.layers.support.PixelBlock")],m);const d=m})),e.register("2wUG0",(function(i,s){t(i.exports,"isValidPixelBlock",(function(){return r})),t(i.exports,"extractBands",(function(){return o})),t(i.exports,"createColormapLUT",(function(){return a})),t(i.exports,"colorize",(function(){return h})),t(i.exports,"estimateStatisticsHistograms",(function(){return f})),t(i.exports,"estimateStatisticsFromHistograms",(function(){return u})),t(i.exports,"createStretchLUT",(function(){return c})),t(i.exports,"createHistogramEqualizationLUT",(function(){return p})),t(i.exports,"stretch",(function(){return x})),t(i.exports,"lookupPixels",(function(){return m})),t(i.exports,"remapColor",(function(){return d})),t(i.exports,"mosaicPixelData",(function(){return g})),t(i.exports,"mosaic",(function(){return w})),t(i.exports,"setValidBoundary",(function(){return k})),t(i.exports,"split",(function(){return U})),t(i.exports,"getLocalArithmeticNorthRotations",(function(){return C})),t(i.exports,"approximateTransform",(function(){return P}));var n=e("1CpCt"),l=e("1wOrp");function r(t){return(0,n.isSome)(t)&&"esri.layers.support.PixelBlock"===t.declaredClass&&t.pixels&&t.pixels.length>0}function o(t,e){if(null==e||!e.length||!r(t))return t;const i=t.pixels.length;return e&&e.some((t=>t>=i))||1===i&&1===e.length&&0===e[0]?t:i!==e.length||e.some(((t,e)=>t!==e))?new(0,l.default)({pixelType:t.pixelType,width:t.width,height:t.height,mask:t.mask,validPixelCount:t.validPixelCount,maskIsAlpha:t.maskIsAlpha,pixels:e.map((e=>t.pixels[e])),statistics:t.statistics&&e.map((e=>t.statistics[e]))}):t}function a(t){if(!t)return;const e=t.colormap;if(!e||0===e.length)return;const i=e.sort(((t,e)=>t[0]-e[0]));let s=0;i[0][0]<0&&(s=i[0][0]);const n=Math.max(256,i[i.length-1][0]-s+1),l=new Uint8Array(4*n),r=[];let o,a=0,h=0;const f=5===i[0].length;if(n>65536)return i.forEach((t=>{r[t[0]-s]=f?t.slice(1):t.slice(1).concat([255])})),{indexed2DColormap:r,offset:s,alphaSpecified:f};if(t.fillUnspecified)for(o=i[h],a=o[0]-s;a<n;a++)l[4*a]=o[1],l[4*a+1]=o[2],l[4*a+2]=o[3],l[4*a+3]=f?o[4]:255,a===o[0]-s&&(o=h===i.length-1?o:i[++h]);else for(a=0;a<i.length;a++)o=i[a],h=4*(o[0]-s),l[h]=o[1],l[h+1]=o[2],l[h+2]=o[3],l[h+3]=f?o[4]:255;return{indexedColormap:l,offset:s,alphaSpecified:f}}function h(t,e){if(!r(t))return t;if(!e&&(e.indexedColormap||e.indexed2DColormap))return t;const i=t.clone(),s=i.pixels;let n=i.mask;const l=i.width*i.height;if(1!==s.length)return t;const{indexedColormap:o,indexed2DColormap:a,offset:h,alphaSpecified:f}=e,u=o.length-1;let c=0;const p=s[0],x=new Uint8Array(p.length),m=new Uint8Array(p.length),d=new Uint8Array(p.length);let g,y=0;if(o)if(n)for(c=0;c<l;c++)n[c]&&(y=4*(p[c]-h),y<h||y>u?n[c]=0:(x[c]=o[y],m[c]=o[y+1],d[c]=o[y+2],n[c]=o[y+3]));else{for(n=new Uint8Array(l),c=0;c<l;c++)y=4*(p[c]-h),y<h||y>u?n[c]=0:(x[c]=o[y],m[c]=o[y+1],d[c]=o[y+2],n[c]=o[y+3]);i.mask=n}else if(n)for(c=0;c<l;c++)n[c]&&(g=a[p[c]],x[c]=g[0],m[c]=g[1],d[c]=g[2],n[c]=g[3]);else{for(n=new Uint8Array(l),c=0;c<l;c++)g=a[p[c]],x[c]=g[0],m[c]=g[1],d[c]=g[2],n[c]=g[3];i.mask=n}return i.pixels=[x,m,d],i.statistics=null,i.pixelType="u8",i.maskIsAlpha=f,i}function f(t){if(!r(t))return null;t.statistics||t.updateStatistics();const{pixels:e,mask:i,pixelType:s,statistics:n}=t,l=t.width*t.height,o=e.length;let a,h,f,u,c;const p=[],x=[];let m,d,g,y,w,k,A,M,b,T;const v=256;for(u=0;u<o;u++){if(m=new Uint32Array(v),g=e[u],"u8"===s)if(a=-.5,h=255.5,i)for(c=0;c<l;c++)i[c]&&m[g[c]]++;else for(c=0;c<l;c++)m[g[c]]++;else{if(a=n[u].minValue,h=n[u].maxValue,f=(h-a)/v,d=new Uint32Array(257),i)for(c=0;c<l;c++)i[c]&&d[Math.floor((g[c]-a)/f)]++;else for(c=0;c<l;c++)d[Math.floor((g[c]-a)/f)]++;for(c=0;c<255;c++)m[c]=d[c];m[255]=d[255]+d[256]}for(p.push({min:a,max:h,size:v,counts:m}),y=0,w=0,M=0,c=0;c<v;c++)y+=m[c],w+=c*m[c];for(b=w/y,c=0;c<v;c++)M+=m[c]*(c-b)**2;T=Math.sqrt(M/(y-1)),f=(h-a)/v,k=(b+.5)*f+a,A=T*f,x.push({min:a,max:h,avg:k,stddev:A})}return{statistics:x,histograms:p}}function u(t){const e=[];for(let i=0;i<t.length;i++){const{min:s,max:n,size:l,counts:r}=t[i];let o=0,a=0;for(let t=0;t<l;t++)o+=r[t],a+=t*r[t];const h=a/o;let f=0;for(let t=0;t<l;t++)f+=r[t]*(t-h)**2;const u=(n-s)/l,c=(h+.5)*u+s,p=Math.sqrt(f/(o-1))*u;e.push({min:s,max:n,avg:c,stddev:p})}return e}function c(t){const{minCutOff:e,maxCutOff:i,gamma:s,pixelType:n}=t,l=t.outMin||0,r=t.outMax||255;if(-1===["u8","u16","s8","s16"].indexOf(n))return null;const o=e.length;let a,h,f=0;"s8"===n?f=-127:"s16"===n&&(f=-32767);let u=256;["u16","s16"].indexOf(n)>-1&&(u=65536);const c=[],p=[],x=r-l;for(a=0;a<o;a++)p[a]=i[a]-e[a],c[a]=x/(i[a]-e[a]);const m=s&&s.length>=o,d=[];if(m)for(a=0;a<o;a++)s[a]>1?s[a]>2?d[a]=6.5+(s[a]-2)**2.5:d[a]=6.5+100*(2-s[a])**4:d[a]=1;let g;const y=[];let w,k,A;if(m)for(a=0;a<o;a++){for(A=[],h=0;h<u;h++)w=h+f,g=(w-e[a])/p[a],k=1,s[a]>1&&(k-=(1/x)**(g*d[a])),w<i[a]&&w>e[a]?A[h]=Math.floor(k*x*g**(1/s[a]))+l:w>=i[a]?A[h]=r:A[h]=l;y[a]=A}else for(a=0;a<o;a++){for(A=[],h=0;h<u;h++)w=h+f,w<=e[a]?A[h]=l:w>=i[a]?A[h]=r:A[h]=Math.floor((w-e[a])/p[a]*x)+l;y[a]=A}if(null!=t.contrastOffset){const e=function(t,e){const i=Math.min(Math.max(t,-100),100),s=Math.min(Math.max(e,-100),100),n=255,l=128;let r,o;const a=new Uint8Array(256);for(r=0;r<256;r++)i>0&&i<100?o=(200*r-100*n+2*n*s)/(2*(100-i))+l:i<=0&&i>-100?o=(200*r-100*n+2*n*s)*(100+i)/2e4+l:100===i?(o=200*r-100*n+(n+1)*(100-i)+2*n*s,o=o>0?n:0):-100===i&&(o=l),a[r]=o>n?n:o<0?0:o;return a}(t.contrastOffset,t.brightnessOffset);for(a=0;a<o;a++)for(A=y[a],h=0;h<u;h++)A[h]=e[A[h]]}return{lut:y,offset:f}}function p(t,e=256){e=Math.min(e,256);const{size:i,counts:s}=t,n=new Uint8Array(i),l=s.reduce(((t,i)=>t+i/e),0);let r=0,o=0,a=0,h=l;for(let t=0;t<i;t++)if(a+=s[t],!(t<i-1&&a+s[t+1]<h)){for(;r<e-1&&h<a;)r++,h+=l;for(let e=o;e<=t;e++)n[e]=r;o=t+1}for(let t=o;t<i;t++)n[t]=e-1;return n}function x(t,e){if(!r(t))return null;const i=t.clone(),{pixels:s,mask:n}=i,{minCutOff:l,maxCutOff:o,gamma:a}=e,h=e.outMin||0,f=e.outMax||255,u=i.width*i.height,c=s.length;let p,x,m,d,g;const y=f-h,w=[],k=[];for(p=0;p<c;p++)k[p]=o[p]-l[p],w[p]=y/(o[p]-l[p]);const A=a&&a.length>=c,M=[];if(A)for(p=0;p<c;p++)a[p]>1?a[p]>2?M[p]=6.5+(a[p]-2)**2.5:M[p]=6.5+100*(2-a[p])**4:M[p]=1;if(A)if(null!=n){for(x=0;x<u;x++)if(n[x])for(p=0;p<c;p++)m=s[p][x],g=(m-l[p])/k[p],d=1,a[p]>1&&(d-=(1/y)**(g*M[p])),m<o[p]&&m>l[p]?s[p][x]=Math.floor(d*y*g**(1/a[p]))+h:m>=o[p]?s[p][x]=f:s[p][x]=h}else for(x=0;x<u;x++)for(p=0;p<c;p++)m=s[p][x],g=(m-l[p])/k[p],d=1,a[p]>1&&(d-=(1/y)**(g*M[p])),m<o[p]&&m>l[p]?s[p][x]=Math.floor(d*y*g**(1/a[p]))+h:m>=o[p]?s[p][x]=f:s[p][x]=h;else if(null!=n){for(x=0;x<u;x++)if(n[x])for(p=0;p<c;p++)m=s[p][x],m<o[p]&&m>l[p]?s[p][x]=Math.floor((m-l[p])/k[p]*y)+h:m>=o[p]?s[p][x]=f:s[p][x]=h}else for(x=0;x<u;x++)for(p=0;p<c;p++)m=s[p][x],m<o[p]&&m>l[p]?s[p][x]=Math.floor((m-l[p])/k[p]*y)+h:m>=o[p]?s[p][x]=f:s[p][x]=h;return i.pixelType="u8",i.updateStatistics(),i}function m(t,e){if(!r(t))return null;const{pixels:i,mask:s}=t,n=t.width*t.height,o=i.length;let a=e.lut;const{offset:h}=e;let f,u;a&&1===a[0].length&&(a=i.map((()=>a)));const c=[];let p,x,m;if(h)if(null==s)for(f=0;f<o;f++){for(p=i[f],x=a[f],m=new Uint8Array(n),u=0;u<n;u++)m[u]=x[p[u]-h];c.push(m)}else for(f=0;f<o;f++){for(p=i[f],x=a[f],m=new Uint8Array(n),u=0;u<n;u++)s[u]&&(m[u]=x[p[u]-h]);c.push(m)}else if(null==s)for(f=0;f<o;f++){for(p=i[f],x=a[f],m=new Uint8Array(n),u=0;u<n;u++)m[u]=x[p[u]];c.push(m)}else for(f=0;f<o;f++){for(p=i[f],x=a[f],m=new Uint8Array(n),u=0;u<n;u++)s[u]&&(m[u]=x[p[u]]);c.push(m)}const d=new(0,l.default)({width:t.width,height:t.height,pixels:c,mask:s,pixelType:"u8"});return d.updateStatistics(),d}function d(t,e){if(!r(t))return null;const i=t.clone(),{pixels:s}=i,n=i.width*i.height,l=e.length,o=Math.floor(l/2),a=e[Math.floor(o)],h=s[0];let f,u,c,p,x,m,d=!1;const g=new Uint8Array(n),y=new Uint8Array(n),w=new Uint8Array(n);let k=i.mask;const A=4===e[0].mappedColor.length;for(k||(k=new Uint8Array(n),k.fill(A?255:1),i.mask=k),x=0;x<n;x++)if(k[x]){for(f=h[x],d=!1,m=o,u=a,c=0,p=l-1;p-c>1;){if(f===u.value){d=!0;break}f>u.value?c=m:p=m,m=Math.floor((c+p)/2),u=e[Math.floor(m)]}d||(f===e[c].value?(u=e[c],d=!0):f===e[p].value?(u=e[p],d=!0):f<e[c].value?(d=!1,u=null):f>e[c].value&&(f<e[p].value?(u=e[c],d=!0):p===l-1?(d=!1,u=null):(u=e[p],d=!0))),d?(g[x]=u.mappedColor[0],y[x]=u.mappedColor[1],w[x]=u.mappedColor[2],k[x]=u.mappedColor[3]):g[x]=y[x]=w[x]=k[x]=0}return i.pixels=[g,y,w],i.mask=k,i.pixelType="u8",i.maskIsAlpha=A,i}function g(t,e){if(!t||0===t.length)return null;const i=t.find((t=>t.pixelBlock));if(!i||(0,n.isNone)(i.pixelBlock))return null;const s=(i.extent.xmax-i.extent.xmin)/i.pixelBlock.width,l=(i.extent.ymax-i.extent.ymin)/i.pixelBlock.height,r=.01*Math.min(s,l),o=t.sort(((t,e)=>Math.abs(t.extent.ymax-e.extent.ymax)>r?e.extent.ymax-t.extent.ymax:Math.abs(t.extent.xmin-e.extent.xmin)>r?t.extent.xmin-e.extent.xmin:0)),a=Math.min.apply(null,o.map((t=>t.extent.xmin))),h=Math.min.apply(null,o.map((t=>t.extent.ymin))),f=Math.max.apply(null,o.map((t=>t.extent.xmax))),u=Math.max.apply(null,o.map((t=>t.extent.ymax))),c={x:Math.round((e.xmin-a)/s),y:Math.round((u-e.ymax)/l)},p={width:Math.round((f-a)/s),height:Math.round((u-h)/l)},x={width:Math.round((e.xmax-e.xmin)/s),height:Math.round((e.ymax-e.ymin)/l)};return Math.round(p.width/i.pixelBlock.width)*Math.round(p.height/i.pixelBlock.height)!==o.length||c.x<0||c.y<0||p.width<x.width||p.height<x.height?null:{extent:e,pixelBlock:w(o.map((t=>t.pixelBlock)),p,{clipOffset:c,clipSize:x})}}function y(t,e,i,s,n,l){const{width:r,height:o}=i.block,{x:a,y:h}=i.offset,{width:f,height:u}=i.mosaic,c={xmin:(g=a)<=(m=s)*(p=r)?0:g<m*p+p?g-m*p:p,ymin:(y=h)<=(d=n)*(x=o)?0:y<d*x+x?y-d*x:x,xmax:g+(w=f)<=m*p?0:g+w<m*p+p?g+w-m*p:p,ymax:y+(k=u)<=d*x?0:y+k<d*x+x?y+k-d*x:x};var p,x,m,d,g,y,w,k;let A=0,M=0;if(l){const t=l.hasGCSSShiftTransform?360:l.halfWorldWidth,e=r*l.resolutionX,i=l.startX+s*e,n=i+e;i<t&&n>t?M=l.rightPadding:i>=t&&(A=l.leftMargin-l.rightPadding,M=0)}if(c.xmax-=M,"number"!=typeof e)for(let i=c.ymin;i<c.ymax;i++){const l=(n*o+i-h)*f+(s*r-a)+A,u=i*r;for(let i=c.xmin;i<c.xmax;i++)t[l+i]=e[u+i]}else for(let i=c.ymin;i<c.ymax;i++){const l=(n*o+i-h)*f+(s*r-a)+A;for(let i=c.xmin;i<c.xmax;i++)t[l+i]=e}}function w(t,e,i={}){const{clipOffset:s,clipSize:o,alignmentInfo:a,blockWidths:h}=i;if(h)return function(t,e,i){const s=t.find((t=>(0,n.isSome)(t)));if(!(0,n.isSome)(s))return null;const o=t.some((t=>!(0,n.isSome)(t)||!!t.mask)),{width:a,height:h}=e,f=o?new Uint8Array(a*h):null,{blockWidths:u}=i,c=[],p=s.getPlaneCount(),x=l.default.getPixelArrayConstructor(s.pixelType);if(o)for(let e=0,i=0;e<t.length;i+=u[e],e++){const s=t[e];if(!r(s))continue;const n=s.mask;for(let t=0;t<h;t++)for(let l=0;l<u[e];l++)f[t*a+l+i]=null==n?255:n[t*s.width+l]}for(let e=0;e<p;e++){const i=new x(a*h);for(let s=0,n=0;s<t.length;n+=u[s],s++){const l=t[s];if(!r(l))continue;const o=l.pixels[e];if(null!=o)for(let t=0;t<h;t++)for(let e=0;e<u[s];e++)i[t*a+e+n]=o[t*l.width+e]}c.push(i)}const m=new(0,l.default)({width:a,height:h,mask:f,pixels:c,pixelType:s.pixelType});return m.updateStatistics(),m}(t,e,{blockWidths:h});const f=t.find((t=>r(t)));if((0,n.isNone)(f))return null;const u=o?o.width:e.width,c=o?o.height:e.height,p=f.width,x=f.height,m=e.width/p,d=e.height/x,g={offset:s||{x:0,y:0},mosaic:o||e,block:{width:p,height:x}},w=f.pixelType,k=l.default.getPixelArrayConstructor(w),A=f.pixels.length,M=[];let b,T,v;for(let e=0;e<A;e++){T=new k(u*c);for(let i=0;i<d;i++)for(let s=0;s<m;s++){const n=t[i*m+s];r(n)&&(b=n.pixels[e],y(T,b,g,s,i,a))}M.push(T)}if(t.some((t=>(0,n.isNone)(t)||t.mask&&t.mask.length>0))){v=new Uint8Array(u*c);for(let e=0;e<d;e++)for(let i=0;i<m;i++){const s=t[e*m+i];y(v,((0,n.isSome)(s)?s.mask:null)||(s?1:0),g,i,e,a)}}const U=new(0,l.default)({width:u,height:c,pixels:M,pixelType:w,mask:v});return U.updateStatistics(),U}function k(t,e,i){if(!r(t))return null;const{width:s,height:n}=t,l=e.x,o=e.y,a=i.width+l,h=i.height+o;if(l<0||o<0||a>s||h>n)return t;if(0===l&&0===o&&a===s&&h===n)return t;t.mask||(t.mask=new Uint8Array(s*n));const f=t.mask;for(let t=0;t<n;t++){const e=t*s;for(let i=0;i<s;i++)f[e+i]=t<o||t>=h||i<l||i>=a?0:1}return t.updateStatistics(),t}function A(t){if(0===t.size)return 0;let e=0,i=-1,s=0;const n=t.keys();let l=n.next();for(;!l.done;)s=t.get(l.value),s>e&&(i=l.value,e=s),l=n.next();return i}function M(t,e,i){if(0===i)return;const s=t.get(e);1===s?t.delete(e):t.set(e,s-1)}function b(t,e,i){0!==i&&t.set(e,t.has(e)?t.get(e)+1:1)}function T(t,e,i){let{x:s,y:n}=e;const{width:o,height:a}=i;if(0===s&&0===n&&a===t.height&&o===t.width)return t;const{width:h,height:f}=t,u=Math.max(0,n),c=Math.max(0,s),p=Math.min(s+o,h),x=Math.min(n+a,f);if(p<0||x<0||!r(t))return null;s=Math.max(0,-s),n=Math.max(0,-n);const{pixels:m,mask:d}=t,g=o*a,y=m.length,w=[];for(let e=0;e<y;e++){const i=m[e],r=l.default.createEmptyBand(t.pixelType,g);for(let t=u;t<x;t++){const e=t*h;let l=(t+n-u)*o+s;for(let t=c;t<p;t++)r[l++]=i[e+t]}w.push(r)}const k=new Uint8Array(g);for(let t=u;t<x;t++){const e=t*h;let i=(t+n-u)*o+s;for(let t=c;t<p;t++)k[i++]=d?d[e+t]:1}const A=new(0,l.default)({width:i.width,height:i.height,pixelType:t.pixelType,pixels:w,mask:k});return A.updateStatistics(),A}function v(t,e=!0){if(!r(t))return null;const{pixels:i,width:s,height:n,mask:o,pixelType:a}=t,h=[],f=Math.round(s/2),u=Math.round(n/2),c=n-1,p=s-1;for(let t=0;t<i.length;t++){const r=i[t],o=l.default.createEmptyBand(a,f*u);let x=0;for(let t=0;t<n;t+=2)for(let i=0;i<s;i+=2){const n=r[t*s+i];if(e){const e=i===p?n:r[t*s+i+1],l=t===c?n:r[t*s+i+s],a=i===p?l:t===c?e:r[t*s+i+s+1];o[x++]=(n+e+l+a)/4}else o[x++]=n}h.push(o)}let x=null;if(o){x=new Uint8Array(f*u);let t=0;for(let i=0;i<n;i+=2)for(let n=0;n<s;n+=2){const l=o[i*s+n];if(e){const e=n===p?l:o[i*s+n+1],r=i===c?l:o[i*s+n+s],a=n===p?r:i===c?e:o[i*s+n+s+1];x[t++]=l*e*r*a?1:0}else x[t++]=l}}return new(0,l.default)({width:f,height:u,pixelType:a,pixels:h,mask:x})}function U(t,e,i){if(!r(t))return null;const{width:s,height:n}=e;let{width:l,height:o}=t;const a=new Map,h={x:0,y:0},f=null==i?1:1+i;let u=t;for(let t=0;t<f;t++){const i=Math.ceil(l/s),r=Math.ceil(o/n);for(let l=0;l<r;l++){h.y=l*n;for(let n=0;n<i;n++){h.x=n*s;const i=T(u,h,e);a.set(`${t}/${l}/${n}`,i)}}t<f-1&&(u=v(u)),l=Math.round(l/2),o=Math.round(o/2)}return a}function B(t,e,i,s,n=.5){const{width:l,height:r}=t,{width:o,height:a}=e,h=s.cols,f=s.rows,u=Math.ceil(o/h-.1/h),c=Math.ceil(a/f-.1/f);let p,x,m,d,g,y,w;const k=u*h,A=k*c*f,M=new Float32Array(A),b=new Float32Array(A),T=new Uint32Array(A),v=new Uint32Array(A);let U,B,C=0;for(let t=0;t<c;t++)for(let e=0;e<u;e++){p=12*(t*u+e),x=i[p],m=i[p+1],d=i[p+2],g=i[p+3],y=i[p+4],w=i[p+5];for(let i=0;i<f;i++){C=(t*f+i)*k+e*h,B=(i+.5)/f;for(let t=0;t<i;t++)U=(t+.5)/h,M[C+t]=(x*U+m*B+d)*l-n,b[C+t]=(g*U+y*B+w)*r-n,T[C+t]=Math.round(M[C+t]),v[C+t]=Math.round(b[C+t])}p+=6,x=i[p],m=i[p+1],d=i[p+2],g=i[p+3],y=i[p+4],w=i[p+5];for(let i=0;i<f;i++){C=(t*f+i)*k+e*h,B=(i+.5)/f;for(let t=i;t<h;t++)U=(t+.5)/h,M[C+t]=(x*U+m*B+d)*l-n,b[C+t]=(g*U+y*B+w)*r-n,T[C+t]=Math.round(M[C+t]),v[C+t]=Math.round(b[C+t])}}return{offsets_x:M,offsets_y:b,offsets_xi:T,offsets_yi:v,gridWidth:k}}function C(t,e){const{coefficients:i,spacing:s}=e,{offsets_x:n,offsets_y:l,gridWidth:r}=B(t,t,i,{rows:s[0],cols:s[1]},.5),{width:o,height:a}=t,h=new Float32Array(o*a),f=180/Math.PI;for(let t=0;t<a;t++)for(let e=0;e<o;e++){const i=t*r+e,s=0===t?i:i-r,u=t===a-1?i:i+r,c=n[s]-n[u],p=l[u]-l[s];if(isNaN(c)||isNaN(p))h[t*o+e]=90;else{let i=Math.atan2(p,c)*f;i=(360+i)%360,h[t*o+e]=i}}return h}function P(t,e,i,s,n="nearest"){if(!r(t))return null;"majority"===n&&(t=function(t){if(!r(t))return null;const e=t.clone(),{width:i,height:s,pixels:n,mask:l}=t,o=n[0],a=e.pixels[0];for(let t=2;t<s-1;t++){const e=new Map;for(let s=t-2;s<t+2;s++)for(let t=0;t<4;t++){const n=s*i+t;b(e,o[n],l?l[n]:1)}a[t*i]=A(e),a[t*i+1]=a[t*i+2]=a[t*i];let s=3;for(;s<i-1;s++){let n=(t-2)*i+s+1;b(e,o[n],l?l[n]:1),n=(t-1)*i+s+1,b(e,o[n],l?l[n]:1),n=t*i+s+1,b(e,o[n],l?l[n]:1),n=(t+1)*i+s+1,b(e,o[n],l?l[n]:1),n=(t-2)*i+s-3,M(e,o[n],l?l[n]:1),n=(t-1)*i+s-3,M(e,o[n],l?l[n]:1),n=t*i+s-3,M(e,o[n],l?l[n]:1),n=(t+1)*i+s-3,M(e,o[n],l?l[n]:1),a[t*i+s]=A(e)}a[t*i+s+1]=a[t*i+s]}for(let t=0;t<i;t++)a[t]=a[i+t]=a[2*i+t],a[(s-1)*i+t]=a[(s-2)*i+t];return e.updateStatistics(),e}(t));const{pixels:o,mask:a,pixelType:h}=t,f=t.width,u=t.height,c=l.default.getPixelArrayConstructor(h),p=o.length,{width:x,height:m}=e;let d=!1;for(let t=0;t<i.length;t+=3)-1===i[t]&&-1===i[t+1]&&-1===i[t+2]&&(d=!0);const{offsets_x:g,offsets_y:y,offsets_xi:w,offsets_yi:k,gridWidth:T}=B({width:f,height:u},e,i,s,"majority"===n?0:.5);let v;const U=(t,e,i)=>{const s=t instanceof Float32Array||t instanceof Float64Array?0:.5;for(let n=0;n<m;n++){v=n*T;for(let l=0;l<x;l++){if(g[v]<0||y[v]<0)t[n*x+l]=0;else if(i)t[n*x+l]=e[w[v]+k[v]*f];else{const i=Math.floor(g[v]),r=Math.floor(y[v]),o=Math.ceil(g[v]),h=Math.ceil(y[v]),u=g[v]-i,c=y[v]-r;if(!a||a[i+r*f]&&a[i+r*f]&&a[i+h*f]&&a[o+h*f]){const a=(1-u)*e[i+r*f]+u*e[o+r*f],p=(1-u)*e[i+h*f]+u*e[o+h*f];t[n*x+l]=(1-c)*a+c*p+s}else t[n*x+l]=e[w[v]+k[v]*f]}v++}}},C=[];let P;for(let t=0;t<p;t++)P=new c(x*m),U(P,o[t],"nearest"===n||"majority"===n),C.push(P);const S=new(0,l.default)({width:x,height:m,pixelType:h,pixels:C});if(a)S.mask=new Uint8Array(x*m),U(S.mask,a,!0);else if(d){S.mask=new Uint8Array(x*m);for(let t=0;t<x*m;t++)S.mask[t]=g[t]<0||y[t]<0?0:1}return S.updateStatistics(),S}}));
//# sourceMappingURL=ImageryLayer.ea732cb0.js.map
