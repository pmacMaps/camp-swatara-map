!function(){function e(e,t,r,i){Object.defineProperty(e,t,{get:r,set:i,enumerable:!0,configurable:!0})}var t=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire594f;t.register("8aBT4",(function(r,i){e(r.exports,"Texture",(function(){return u})),t("2VlWd");var a=t("iVfa0"),o=t("7qybv"),n=t("kGNC4"),s=t("fnzEM"),l=t("8JzMA"),p=t("J8NSi");class u{get glName(){return this._glName}get descriptor(){return this._descriptor}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._context.gl&&this._glName&&(this._context.unbindTexture(this),this._context.gl.deleteTexture(this._glName),this._glName=null,this._context.instanceCounter.decrement(l.ResourceType.Texture,this))}release(){this.dispose()}resize(e,t){const r=this._descriptor;if(r.width!==e||r.height!==t){if(this._wasImmutablyAllocated)throw new Error("Immutable textures can't be resized!");r.width=e,r.height=t,this._descriptor.target===l.TextureType.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(e=null){for(let t=l.TextureType.TEXTURE_CUBE_MAP_POSITIVE_X;t<=l.TextureType.TEXTURE_CUBE_MAP_NEGATIVE_Z;t++)this._setData(e,t)}setData(e){this._setData(e)}_setData(e,t){if(!this._context||!this._context.gl)return;const r=this._context.gl;this._glName||(this._glName=r.createTexture()),void 0===e&&(e=null);const i=this._descriptor;null!=t||(t=i.target);const a=m(t);var s;null===e&&(i.width=i.width||4,i.height=i.height||4,a&&(i.depth=null!==(s=i.depth)&&void 0!==s?s:1));const c=this._context.bindTexture(this,u.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(u.TEXTURE_UNIT_FOR_UPDATES),u._validateTexture(this._context,i),this._configurePixelStorage();const T=i.pixelFormat;let x=i.internalFormat?i.internalFormat:this._deriveInternalFormat(T,i.dataType);if(h(e)){let o=e.width,s=e.height;const l=1;e instanceof HTMLVideoElement&&(o=e.videoWidth,s=e.videoHeight),i.width&&i.height,a&&i.depth,i.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(t,x,i.hasMipmap,o,s,l),this._texImage(t,0,x,o,s,l,e),(0,n.checkWebGLError)(r),i.hasMipmap&&this.generateMipmap(),void 0===i.width&&(i.width=o),void 0===i.height&&(i.height=s),a&&void 0===i.depth&&(i.depth=l)}else{const{width:s,height:u,depth:h}=i;if(null!=s&&null!=u||console.error("Width and height must be specified!"),a&&null==h&&console.error("Depth must be specified!"),i.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(t,x,i.hasMipmap,s,u,h),r.DEPTH24_STENCIL8&&x===r.DEPTH_STENCIL&&(x=r.DEPTH24_STENCIL8),d(e)){const a=e.levels,o=_(t,s,u,h),n=Math.min(o-1,a.length-1);(0,p.default)(r)?r.texParameteri(i.target,r.TEXTURE_MAX_LEVEL,n):i.hasMipmap=i.hasMipmap&&o===a.length;const d=x;if(!function(e){return e in l.CompressedTextureFormat}(d))throw new Error("Attempting to use compressed data with an umcompressed format!");this._forEachMipmapLevel(((e,r,i,o)=>{const n=a[Math.min(e,a.length-1)];this._compressedTexImage(t,e,d,r,i,o,n)}),n)}else(0,o.isSome)(e)?(this._texImage(t,0,x,s,u,h,e),(0,n.checkWebGLError)(r),i.hasMipmap&&this.generateMipmap()):this._forEachMipmapLevel(((e,i,a,o)=>{this._texImage(t,e,x,i,a,o,null),(0,n.checkWebGLError)(r)}))}u._applySamplingMode(r,this._descriptor),u._applyWrapMode(r,this._descriptor),u._applyAnisotropicFilteringParameters(this._context,this._descriptor),(0,n.checkWebGLError)(r),this._context.bindTexture(c,u.TEXTURE_UNIT_FOR_UPDATES)}updateData(e,t,r,i,a,o){o||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const n=this._context.gl,s=this._descriptor,{pixelFormat:l,internalFormat:p,dataType:m,isImmutable:_,target:c}=s;if(_&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");const T=this._context.bindTexture(this,u.TEXTURE_UNIT_FOR_UPDATES);(t<0||r<0||i>s.width||a>s.height||t+i>s.width||r+a>s.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),h(o)?n.texSubImage2D(c,e,t,r,l,m,o):d(o)?n.compressedTexSubImage2D(c,e,t,r,i,a,p,o.levels[e]):n.texSubImage2D(c,e,t,r,i,a,l,m,o),this._context.bindTexture(T,u.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(e,t,r,i,a,o,n,s){s||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const l=this._context.gl;if(!(0,p.default)(l))throw new Error("3D textures are not supported in WebGL1");const h=this._descriptor,{pixelFormat:_,dataType:c,isImmutable:T,target:x,internalFormat:g}=h;if(T&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");m(x)||console.warn("Attempting to set 3D texture data on a non-3D texture");const E=this._context.bindTexture(this,u.TEXTURE_UNIT_FOR_UPDATES);if(this._context.setActiveTexture(u.TEXTURE_UNIT_FOR_UPDATES),(t<0||r<0||i<0||a>h.width||o>h.height||n>h.depth||t+a>h.width||r+o>h.height||i+n>h.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),d(s))s=s.levels[e],l.compressedTexSubImage3D(x,e,t,r,i,a,o,n,g,s);else{const p=s;l.texSubImage3D(x,e,t,r,i,a,o,n,_,c,p)}this._context.bindTexture(E,u.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const e=this._descriptor;if(!e.hasMipmap){if(this._wasImmutablyAllocated)throw new Error("Cannot add mipmaps to immutable texture after allocation");e.hasMipmap=!0,this._samplingModeDirty=!0,u._validateTexture(this._context,e)}e.samplingMode===l.TextureSamplingMode.LINEAR?(this._samplingModeDirty=!0,e.samplingMode=l.TextureSamplingMode.LINEAR_MIPMAP_NEAREST):e.samplingMode===l.TextureSamplingMode.NEAREST&&(this._samplingModeDirty=!0,e.samplingMode=l.TextureSamplingMode.NEAREST_MIPMAP_NEAREST);const t=this._context.bindTexture(this,u.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(u.TEXTURE_UNIT_FOR_UPDATES),this._context.gl.generateMipmap(e.target),this._context.bindTexture(t,u.TEXTURE_UNIT_FOR_UPDATES)}setSamplingMode(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)}setWrapMode(e){e!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=e,u._validateTexture(this._context,this._descriptor),this._wrapModeDirty=!0)}applyChanges(){const e=this._context.gl,t=this._descriptor;this._samplingModeDirty&&(u._applySamplingMode(e,t),this._samplingModeDirty=!1),this._wrapModeDirty&&(u._applyWrapMode(e,t),this._wrapModeDirty=!1)}_deriveInternalFormat(e,t){if(this._context.type===s.ContextType.WEBGL1)return e;switch(t){case l.PixelType.FLOAT:switch(e){case l.PixelFormat.RGBA:return l.SizedPixelFormat.RGBA32F;case l.PixelFormat.RGB:return l.SizedPixelFormat.RGB32F;default:throw new Error("Unable to derive format")}case l.PixelType.UNSIGNED_BYTE:switch(e){case l.PixelFormat.RGBA:return l.SizedPixelFormat.RGBA8;case l.PixelFormat.RGB:return l.SizedPixelFormat.RGB8}default:return e}}_configurePixelStorage(){const e=this._context.gl,{unpackAlignment:t,flipped:r,preMultiplyAlpha:i}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,t),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,r?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i?1:0)}_texStorage(e,t,r,i,a,o){const n=this._context.gl;if(!(0,p.default)(n))throw new Error("Immutable textures are not supported in WebGL1");if(!function(e){return e in l.SizedPixelFormat}(t))throw new Error("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const s=r?_(e,i,a,o):1;m(e)?n.texStorage3D(e,s,t,i,a,o):n.texStorage2D(e,s,t,i,a),this._wasImmutablyAllocated=!0}_texImage(e,t,r,i,a,n,l){const p=this._context.gl;let u=null;const d=this._context.type===s.ContextType.WEBGL2,_=m(e),{isImmutable:c,pixelFormat:T,dataType:x}=this._descriptor;if(d&&(u=p),d||!h(l))if(c){if((0,o.isSome)(l)){const r=l;_?u.texSubImage3D(e,t,0,0,0,i,a,n,T,x,r):p.texSubImage2D(e,t,0,0,i,a,T,x,r)}}else{const s=(0,o.unwrap)(l);_?u.texImage3D(e,t,r,i,a,n,0,T,x,s):p.texImage2D(e,t,r,i,a,0,T,x,s)}else p.texImage2D(e,0,r,T,x,l)}_compressedTexImage(e,t,r,i,a,n,l){const p=this._context.gl;let u=null;const d=m(e),h=this._descriptor.isImmutable;if(d){if(this._context.type!==s.ContextType.WEBGL2)throw new Error("3D textures are not supported in WebGL1");u=p}h?(0,o.isSome)(l)&&(d?u.compressedTexSubImage3D(e,t,0,0,0,i,a,n,r,l):p.compressedTexSubImage2D(e,t,0,0,i,a,r,l)):d?u.compressedTexImage3D(e,t,r,i,a,n,0,l):p.compressedTexImage2D(e,t,r,i,a,0,l)}_forEachMipmapLevel(e,t=1/0){let{width:r,height:i,depth:a,hasMipmap:o,target:n}=this._descriptor;const s=n===l.TextureType.TEXTURE_3D;for(let n=0;e(n,r,i,a),o&&(1!==r||1!==i||s&&1!==a)&&!(n>=t);++n)r=Math.max(1,r>>1),i=Math.max(1,i>>1),s&&(a=Math.max(1,a>>1))}static _validateTexture(e,t){(t.width<0||t.height<0||t.depth<0)&&console.error("Negative dimension parameters are not allowed!");const r=(0,p.default)(e.gl),i=(0,a.isPowerOfTwo)(t.width)&&(0,a.isPowerOfTwo)(t.height);r||!t.isImmutable&&!m(t.target)||console.error("Immutable and 3D-like textures are not supported in WebGL1!"),r||i||("number"==typeof t.wrapMode?t.wrapMode!==l.TextureWrapMode.CLAMP_TO_EDGE&&console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"):t.wrapMode.s===l.TextureWrapMode.CLAMP_TO_EDGE&&t.wrapMode.t===l.TextureWrapMode.CLAMP_TO_EDGE||console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"),t.hasMipmap&&console.error("Mipmapping requires power-of-two textures!"))}static _applySamplingMode(e,t){let r=t.samplingMode,i=t.samplingMode;r===l.TextureSamplingMode.LINEAR_MIPMAP_NEAREST||r===l.TextureSamplingMode.LINEAR_MIPMAP_LINEAR?(r=l.TextureSamplingMode.LINEAR,t.hasMipmap||(i=l.TextureSamplingMode.LINEAR)):r!==l.TextureSamplingMode.NEAREST_MIPMAP_NEAREST&&r!==l.TextureSamplingMode.NEAREST_MIPMAP_LINEAR||(r=l.TextureSamplingMode.NEAREST,t.hasMipmap||(i=l.TextureSamplingMode.NEAREST)),e.texParameteri(t.target,e.TEXTURE_MAG_FILTER,r),e.texParameteri(t.target,e.TEXTURE_MIN_FILTER,i)}static _applyWrapMode(e,t){"number"==typeof t.wrapMode?(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode)):(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode.s),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode.t))}static _applyAnisotropicFilteringParameters(e,t){const r=e.capabilities.textureFilterAnisotropic;var i;r&&e.gl.texParameterf(t.target,r.TEXTURE_MAX_ANISOTROPY,null!==(i=t.maxAnisotropy)&&void 0!==i?i:1)}constructor(e,t,r=null){if(this._context=e,this.type="texture",this._glName=null,this._descriptor=void 0,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,e.instanceCounter.increment(l.ResourceType.Texture,this),this._descriptor={target:l.TextureType.TEXTURE_2D,samplingMode:l.TextureSamplingMode.LINEAR,wrapMode:l.TextureWrapMode.REPEAT,flipped:!1,hasMipmap:!1,isOpaque:!1,unpackAlignment:4,preMultiplyAlpha:!1,isImmutable:!1,...t},e.type!==s.ContextType.WEBGL2&&(this._descriptor.isImmutable&&(this._descriptor.isImmutable=!1),m(this._descriptor.target)))throw new Error("3D and array textures are not supported in WebGL1");this._descriptor.target===l.TextureType.TEXTURE_CUBE_MAP?this._setDataCubeMap(r):this.setData(r)}}function d(e){return(0,o.isSome)(e)&&"type"in e&&"compressed"===e.type}function h(e){return(0,o.isSome)(e)&&!d(e)&&!function(e){return(0,o.isSome)(e)&&"byteLength"in e}(e)}function m(e){return e===l.TextureType.TEXTURE_3D||e===l.TextureType.TEXTURE_2D_ARRAY}function _(e,t,r,i=1){let a=Math.max(t,r);return e===l.TextureType.TEXTURE_3D&&(a=Math.max(a,i)),Math.round(Math.log(a)/Math.LN2)+1}u.TEXTURE_UNIT_FOR_UPDATES=0})),t.register("kGNC4",(function(r,i){e(r.exports,"webglDebugEnabled",(function(){return l})),e(r.exports,"webglValidateShadersEnabled",(function(){return p})),e(r.exports,"checkWebGLError",(function(){return u}));var a=t("kyj08"),o=t("2VlWd");const n=t("jHOLN").default.getLogger("esri/views/webgl");const s=!!(0,o.default)("enable-feature:webgl-debug");function l(){return s}function p(){return s}function u(e){if(l()){const t=e.getError();if(t){const r=function(e,t){switch(t){case e.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case e.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case e.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case e.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case e.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case e.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}(e,t),i=(new Error).stack;n.error(new(0,a.default)("webgl-error","WebGL error occured",{message:r,stack:i}))}}}})),t.register("J8NSi",(function(t,r){function i(e){return window.WebGL2RenderingContext&&e instanceof window.WebGL2RenderingContext}e(t.exports,"default",(function(){return i}))}))}();
//# sourceMappingURL=Pipeline.ea2720c7.js.map
