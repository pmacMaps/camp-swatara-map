var e=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire594f;e.register("bidwN",(function(t,r){var i,o,s,l,a;i=t.exports,Object.defineProperty(i,"__esModule",{value:!0,configurable:!0}),o=t.exports,s="default",l=function(){return B},Object.defineProperty(o,s,{get:l,set:a,enumerable:!0,configurable:!0});var n=e("j6uz9"),p=e("bYA0c"),y=e("bPmsI"),u=e("itGIg"),c=e("2IJVS"),d=e("lHg4e"),h=e("7dRCe"),S=e("hTI69");e("gHCNy");var f=e("bzBbJ"),g=e("qA6zg"),m=e("g9601"),v=e("2WnyR"),_=e("jaaCV"),b=e("iGP99"),w=e("bJ9E7"),I=e("M2kXB"),P=e("lPKJW"),T=e("90xN9"),L=e("8u5kg"),O=e("ctxhN"),R=e("54ioU"),U=e("5lb2Y"),x=e("fLjLo"),M=e("8ajfs"),j=e("hCr3P"),V=e("9Jl7A"),C=e("7zHk6"),k=e("8wm97"),N=e("1KXCS"),A=e("8r0sl");let D=class extends((0,T.BlendLayer)((0,U.ScaleRangeLayer)((0,I.ArcGISCachedService)((0,P.ArcGISService)((0,O.OperationalLayer)((0,R.PortalLayer)((0,L.CustomParametersMixin)((0,w.APIKeyMixin)((0,c.MultiOriginJSONMixin)(b.default)))))))))){normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}destroy(){if(this.sourceNameToSource)for(const e of Object.values(this.sourceNameToSource))null==e||e.destroy();this._spriteSourceMap.clear()}async prefetchResources(e){await this.loadSpriteSource(globalThis.devicePixelRatio||1,e)}load(e){const t=this.loadFromPortal({supportedTypes:["Vector Tile Service"],supportsData:!1},e).catch(d.throwIfAbortError).then((async()=>{if(!this.portalItem||!this.portalItem.id)return;const t=`${this.portalItem.itemUrl}/resources/styles/root.json`;(await(0,p.default)(t,{...e,query:{f:"json",...this.customParameters,token:this.apiKey}})).data&&this.read({url:t},(0,C.createForItem)(this.portalItem))})).catch(d.throwIfAbortError).then((()=>this._loadStyle(e)));return this.addResolvingPromise(t),Promise.resolve(this)}get attributionDataUrl(){const e=this.currentStyleInfo,t=e&&e.serviceUrl&&(0,h.urlToObject)(e.serviceUrl);if(!t)return null;const r=this._getDefaultAttribution(t.path);return r?(0,h.addQueryParameters)(r,{...this.customParameters,token:this.apiKey}):null}get capabilities(){const e=this.primarySource;return e?e.capabilities:{operations:{supportsExportTiles:!1,supportsTileMap:!1},exportTiles:null}}get fullExtent(){var e;return(null==(e=this.primarySource)?void 0:e.fullExtent)||null}get parsedUrl(){return this.serviceUrl?(0,h.urlToObject)(this.serviceUrl):null}get serviceUrl(){return this.currentStyleInfo&&this.currentStyleInfo.serviceUrl||null}get spatialReference(){return this.tileInfo&&this.tileInfo.spatialReference||null}get styleUrl(){return this.currentStyleInfo&&this.currentStyleInfo.styleUrl||null}writeStyleUrl(e,t){e&&(0,h.isProtocolRelative)(e)&&(e=`https:${e}`),t.styleUrl=e}get tileInfo(){var e;const t=[];for(const e in this.sourceNameToSource)t.push(this.sourceNameToSource[e]);let r=(null==(e=this.primarySource)?void 0:e.tileInfo)||new(0,j.default);if(t.length>1)for(let e=0;e<t.length;e++)(0,k.areSchemasOverlapping)(r,t[e].tileInfo)&&(r=(0,k.unionTileInfos)(r,t[e].tileInfo));return r}readVersion(e,t){return t.version?parseFloat(t.version):parseFloat(t.currentVersion)}async loadSpriteSource(e=1,t){if(!this._spriteSourceMap.has(e)){var r;const i=(0,A.getWebGL1Capabilities)().maxTextureSize,o=null!=(r=this.currentStyleInfo)&&r.spriteUrl?(0,h.addQueryParameters)(this.currentStyleInfo.spriteUrl,{...this.customParameters,token:this.apiKey}):null,s=new(0,M.default)(o,e,i,this.currentStyleInfo.spriteFormat);await s.load(t),this._spriteSourceMap.set(e,s)}return Promise.resolve(this._spriteSourceMap.get(e))}async setSpriteSource(e,t="png",r=1,i){const o=(0,A.getWebGL1Capabilities)().maxTextureSize,s=e?(0,h.addQueryParameters)(e,{...this.customParameters,token:this.apiKey}):null;if(!s)return null;const l=new(0,M.default)(s,r,o,t);try{return await l.load(i),this._spriteSourceMap.clear(),this._spriteSourceMap.set(r,l),this.currentStyleInfo.spriteUrl=s,this.emit("spriteSource-change",{spriteSource:l}),l}catch(e){(0,d.throwIfAbortError)(e)}return null}async loadStyle(e,t){var r;const i=e||this.style||this.url;return this._loadingTask&&"string"==typeof i&&this.url===i||(null==(r=this._loadingTask)||r.abort(),this._loadingTask=(0,d.createTask)((e=>(this._spriteSourceMap.clear(),this._getSourceAndStyle(i,{signal:e}))),t)),this._loadingTask.promise}getStyleLayerId(e){return this.styleRepository.getStyleLayerId(e)}getStyleLayerIndex(e){return this.styleRepository.getStyleLayerIndex(e)}getPaintProperties(e){return(0,u.clone)(this.styleRepository.getPaintProperties(e))}setPaintProperties(e,t){const r=this.styleRepository.isPainterDataDriven(e);this.styleRepository.setPaintProperties(e,t);const i=this.styleRepository.isPainterDataDriven(e);this.emit("paint-change",{layer:e,paint:t,isDataDriven:r||i})}getStyleLayer(e){return(0,u.clone)(this.styleRepository.getStyleLayer(e))}setStyleLayer(e,t){this.styleRepository.setStyleLayer(e,t),this.emit("style-layer-change",{layer:e,index:t})}deleteStyleLayer(e){this.styleRepository.deleteStyleLayer(e),this.emit("delete-style-layer",{layer:e})}getLayoutProperties(e){return(0,u.clone)(this.styleRepository.getLayoutProperties(e))}setLayoutProperties(e,t){this.styleRepository.setLayoutProperties(e,t),this.emit("layout-change",{layer:e,layout:t})}setStyleLayerVisibility(e,t){this.styleRepository.setStyleLayerVisibility(e,t),this.emit("style-layer-visibility-change",{layer:e,visibility:t})}getStyleLayerVisibility(e){return this.styleRepository.getStyleLayerVisibility(e)}write(e,t){return null!=t&&t.origin&&!this.styleUrl?(t.messages&&t.messages.push(new(0,y.default)("vectortilelayer:unsupported",`VectorTileLayer (${this.title}, ${this.id}) with style defined by JSON only are not supported`,{layer:this})),null):super.write(e,t)}getTileUrl(e,t,r){return null}async _getSourceAndStyle(e,t){if(!e)throw new Error("invalid style!");const r=await(0,V.loadMetadata)(e,{...t,query:{...this.customParameters,token:this.apiKey}});"webp"===r.spriteFormat&&(await(0,x.checkWebPSupport)("lossy")||(r.spriteFormat="png")),this._set("currentStyleInfo",{...r}),"string"==typeof e?(this.url=e,this.style=null):(this.url=null,this.style=e),this._set("sourceNameToSource",r.sourceNameToSource),this._set("primarySource",r.sourceNameToSource[r.primarySourceName]),this._set("styleRepository",new(0,N.default)(r.style)),this.read(r.layerDefinition,{origin:"service"}),this.emit("load-style")}_getDefaultAttribution(e){const t=e.match(/^https?:\/\/(?:basemaps|basemapsbeta|basemapsdev)(?:-api)?\.arcgis\.com(\/[^\/]+)?\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/vectortileserver/i),r=["OpenStreetMap_v2","OpenStreetMap_Daylight_v2","OpenStreetMap_Export_v2","OpenStreetMap_FTS_v2","OpenStreetMap_GCS_v2","World_Basemap","World_Basemap_v2","World_Basemap_Export_v2","World_Basemap_GCS_v2","World_Basemap_WGS84","World_Contours_v2"];if(!t)return;const i=t[2]&&t[2].toLowerCase();if(!i)return;const o=t[1]||"";for(const e of r)if(e.toLowerCase().includes(i))return(0,h.normalize)(`//static.arcgis.com/attribution/Vector${o}/${e}`)}async _loadStyle(e){var t,r;return null!=(t=null==(r=this._loadingTask)?void 0:r.promise)?t:this.loadStyle(null,e)}constructor(...e){super(...e),this._spriteSourceMap=new Map,this.currentStyleInfo=null,this.style=null,this.isReference=null,this.operationalLayerType="VectorTileLayer",this.type="vector-tile",this.url=null,this.symbolCollisionBoxesVisible=!1,this.path=null}};(0,n._)([(0,S.property)({readOnly:!0})],D.prototype,"attributionDataUrl",null),(0,n._)([(0,S.property)({type:["show","hide"]})],D.prototype,"listMode",void 0),(0,n._)([(0,S.property)({readOnly:!0,json:{read:!1}})],D.prototype,"capabilities",null),(0,n._)([(0,S.property)({readOnly:!0})],D.prototype,"currentStyleInfo",void 0),(0,n._)([(0,S.property)({json:{read:!1},readOnly:!0,type:v.default})],D.prototype,"fullExtent",null),(0,n._)([(0,S.property)()],D.prototype,"style",void 0),(0,n._)([(0,S.property)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],D.prototype,"isReference",void 0),(0,n._)([(0,S.property)({type:["VectorTileLayer"]})],D.prototype,"operationalLayerType",void 0),(0,n._)([(0,S.property)({readOnly:!0})],D.prototype,"parsedUrl",null),(0,n._)([(0,S.property)({readOnly:!0})],D.prototype,"serviceUrl",null),(0,n._)([(0,S.property)({type:_.default,readOnly:!0})],D.prototype,"spatialReference",null),(0,n._)([(0,S.property)({readOnly:!0})],D.prototype,"styleRepository",void 0),(0,n._)([(0,S.property)({readOnly:!0})],D.prototype,"sourceNameToSource",void 0),(0,n._)([(0,S.property)({readOnly:!0})],D.prototype,"primarySource",void 0),(0,n._)([(0,S.property)({type:String,readOnly:!0,json:{write:{ignoreOrigin:!0},origins:{"web-document":{write:{ignoreOrigin:!0,isRequired:!0}}}}})],D.prototype,"styleUrl",null),(0,n._)([(0,m.writer)(["portal-item","web-document"],"styleUrl")],D.prototype,"writeStyleUrl",null),(0,n._)([(0,S.property)({json:{read:!1,origins:{service:{read:!1}}},readOnly:!0,type:j.default})],D.prototype,"tileInfo",null),(0,n._)([(0,S.property)({json:{read:!1},readOnly:!0,value:"vector-tile"})],D.prototype,"type",void 0),(0,n._)([(0,S.property)({json:{origins:{"web-document":{read:{source:"styleUrl"}},"portal-item":{read:{source:"url"}}},write:!1,read:!1}})],D.prototype,"url",void 0),(0,n._)([(0,S.property)({readOnly:!0})],D.prototype,"version",void 0),(0,n._)([(0,f.reader)("version",["version","currentVersion"])],D.prototype,"readVersion",null),(0,n._)([(0,S.property)({type:Boolean})],D.prototype,"symbolCollisionBoxesVisible",void 0),(0,n._)([(0,S.property)({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],D.prototype,"path",void 0),D=(0,n._)([(0,g.subclass)("esri.layers.VectorTileLayer")],D);const B=D}));
//# sourceMappingURL=VectorTileLayer.22dbfc1c.js.map
