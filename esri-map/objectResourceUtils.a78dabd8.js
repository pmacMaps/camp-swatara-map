!function(){function e(e,t,r,i){Object.defineProperty(e,t,{get:r,set:i,enumerable:!0,configurable:!0})}var t=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire594f;t.register("8aBT4",(function(r,i){e(r.exports,"Texture",(function(){return m}));var o=t("kyj08");t("2VlWd");var a=t("iVfa0"),s=t("kGNC4"),n=t("7O1P4"),l=t("8JzMA"),d=t("hjBtD"),c=t("dDu9k"),u=t("iNo7d");let m=class{get glName(){return this._glName}get descriptor(){return this._descriptor}get gpuMemoryUsage(){return R.delete(this),(0,c.estimateMemory)(this._descriptor)}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._descriptor.context.gl&&this._glName&&(this._descriptor.context.unbindTexture(this),this._descriptor.context.gl.deleteTexture(this._glName),this._glName=null,this._descriptor.context.instanceCounter.decrement(l.ResourceType.Texture,this))}release(){this.dispose()}resize(e,t){const r=this._descriptor;if(r.width!==e||r.height!==t){if(this._wasImmutablyAllocated)throw new(0,o.default)("Immutable textures can't be resized!");r.width=e,r.height=t,this._descriptor.target===l.TextureType.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(e=null){for(let t=l.TextureType.TEXTURE_CUBE_MAP_POSITIVE_X;t<=l.TextureType.TEXTURE_CUBE_MAP_NEGATIVE_Z;t++)this._setData(e,t)}setData(e){this._setData(e)}_setData(e,t){if(!this._descriptor.context||!this._descriptor.context.gl)return;const r=this._descriptor.context.gl;(0,s.checkWebGLError)(r),this._glName||(this._glName=r.createTexture()),void 0===e&&(e=null);const i=this._descriptor,a=null!=t?t:i.target,n=E(a);var d;null===e&&(i.width=i.width||4,i.height=i.height||4,n&&(i.depth=null!==(d=i.depth)&&void 0!==d?d:1));const c=this._descriptor.context.bindTexture(this,m.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(m.TEXTURE_UNIT_FOR_UPDATES),p(this._descriptor.context,i),this._configurePixelStorage(),(0,s.checkWebGLError)(r);const u=this._deriveInternalFormat();if(T(e)){let t=e.width,o=e.height;const l=1;e instanceof HTMLVideoElement&&(t=e.videoWidth,o=e.videoHeight),i.width&&i.height,n&&i.depth,i.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,u,i.hasMipmap,t,o,l),this._texImage(a,0,u,t,o,l,e),(0,s.checkWebGLError)(r),i.hasMipmap&&this.generateMipmap(),i.width||(i.width=t),i.height||(i.height=o),n&&!i.depth&&(i.depth=l)}else{const{width:t,height:d,depth:c}=i;if(null==t||null==d)throw new(0,o.default)("Width and height must be specified!");if(n&&null==c)throw new(0,o.default)("Depth must be specified!");if(i.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,u,i.hasMipmap,t,d,c),x(e)){const s=e.levels,n=f(a,t,d,c),m=Math.min(n-1,s.length-1);null!=this._descriptor.context.gl2?r.texParameteri(i.target,this._descriptor.context.gl2.TEXTURE_MAX_LEVEL,m):i.hasMipmap=i.hasMipmap&&n===s.length;const p=u;if(!(p in l.CompressedTextureFormat))throw new(0,o.default)("Attempting to use compressed data with an uncompressed format!");this._forEachMipmapLevel(((e,t,r,i)=>{const o=s[Math.min(e,s.length-1)];this._compressedTexImage(a,e,p,t,r,i,o)}),m)}else this._texImage(a,0,u,t,d,c,e),(0,s.checkWebGLError)(r),i.hasMipmap&&this.generateMipmap()}h(r,this._descriptor),_(r,this._descriptor),function(e,t){const r=e.capabilities.textureFilterAnisotropic;if(!r)return;var i;e.gl.texParameterf(t.target,r.TEXTURE_MAX_ANISOTROPY,null!==(i=t.maxAnisotropy)&&void 0!==i?i:1)}(this._descriptor.context,this._descriptor),(0,s.checkWebGLError)(r),this._descriptor.context.bindTexture(c,m.TEXTURE_UNIT_FOR_UPDATES)}updateData(e,t,r,i,a,s,n=0){s||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const l=this._descriptor.context.gl,d=this._descriptor.context.gl2,c=this._descriptor,u=this._deriveInternalFormat(),{pixelFormat:p,dataType:h,target:_,isImmutable:E}=c;if(E&&!this._wasImmutablyAllocated)throw new(0,o.default)("Cannot update immutable texture before allocation!");const f=this._descriptor.context.bindTexture(this,m.TEXTURE_UNIT_FOR_UPDATES,!0);if((t<0||r<0||i>c.width||a>c.height||t+i>c.width||r+a>c.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),n){if(!d)return void console.error("Webgl2 must be enabled to use dataRowOffset!");l.pixelStorei(d.UNPACK_SKIP_ROWS,n)}if(T(s)?d?d.texSubImage2D(_,e,t,r,i,a,p,h,s):l.texSubImage2D(_,e,t,r,p,h,s):x(s)?l.compressedTexSubImage2D(_,e,t,r,i,a,u,s.levels[e]):l.texSubImage2D(_,e,t,r,i,a,p,h,s),n){if(!d)return void console.error("Webgl2 must be enabled to use dataRowOffset!");l.pixelStorei(d.UNPACK_SKIP_ROWS,0)}this._descriptor.context.bindTexture(f,m.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(e,t,r,i,a,s,n,l){l||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const d=this._descriptor.context.gl2;if(null==d)throw new(0,o.default)("3D textures are not supported in WebGL1");const c=this._descriptor,u=this._deriveInternalFormat(),{pixelFormat:p,dataType:h,isImmutable:_,target:T}=c;if(_&&!this._wasImmutablyAllocated)throw new(0,o.default)("Cannot update immutable texture before allocation!");E(T)||console.warn("Attempting to set 3D texture data on a non-3D texture");const f=this._descriptor.context.bindTexture(this,m.TEXTURE_UNIT_FOR_UPDATES);if(this._descriptor.context.setActiveTexture(m.TEXTURE_UNIT_FOR_UPDATES),(t<0||r<0||i<0||a>c.width||s>c.height||n>c.depth||t+a>c.width||r+s>c.height||i+n>c.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),x(l))l=l.levels[e],d.compressedTexSubImage3D(T,e,t,r,i,a,s,n,u,l);else{const o=l;d.texSubImage3D(T,e,t,r,i,a,s,n,p,h,o)}this._descriptor.context.bindTexture(f,m.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const e=this._descriptor;if(!e.hasMipmap){if(this._wasImmutablyAllocated)throw new(0,o.default)("Cannot add mipmaps to immutable texture after allocation");e.hasMipmap=!0,this._samplingModeDirty=!0,p(this._descriptor.context,e)}e.samplingMode===l.TextureSamplingMode.LINEAR?(this._samplingModeDirty=!0,e.samplingMode=l.TextureSamplingMode.LINEAR_MIPMAP_NEAREST):e.samplingMode===l.TextureSamplingMode.NEAREST&&(this._samplingModeDirty=!0,e.samplingMode=l.TextureSamplingMode.NEAREST_MIPMAP_NEAREST);const t=this._descriptor.context.bindTexture(this,m.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(m.TEXTURE_UNIT_FOR_UPDATES),this._descriptor.context.gl.generateMipmap(e.target),this._descriptor.context.bindTexture(t,m.TEXTURE_UNIT_FOR_UPDATES)}setSamplingMode(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)}setWrapMode(e){e!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=e,p(this._descriptor.context,this._descriptor),this._wrapModeDirty=!0)}applyChanges(){const e=this._descriptor.context.gl,t=this._descriptor;this._samplingModeDirty&&(h(e,t),this._samplingModeDirty=!1),this._wrapModeDirty&&(_(e,t),this._wrapModeDirty=!1)}_deriveInternalFormat(){if(this._descriptor.context.type===n.ContextType.WEBGL1)return this._descriptor.internalFormat=this._descriptor.pixelFormat;if(null!=this._descriptor.internalFormat)return this._descriptor.internalFormat===l.PixelFormat.DEPTH_STENCIL&&(this._descriptor.internalFormat=l.PixelFormat.DEPTH24_STENCIL8),this._descriptor.internalFormat;switch(this._descriptor.dataType){case l.PixelType.FLOAT:switch(this._descriptor.pixelFormat){case l.PixelFormat.RGBA:return this._descriptor.internalFormat=l.SizedPixelFormat.RGBA32F;case l.PixelFormat.RGB:return this._descriptor.internalFormat=l.SizedPixelFormat.RGB32F;default:throw new(0,o.default)("Unable to derive format")}case l.PixelType.UNSIGNED_BYTE:switch(this._descriptor.pixelFormat){case l.PixelFormat.RGBA:return this._descriptor.internalFormat=l.SizedPixelFormat.RGBA8;case l.PixelFormat.RGB:return this._descriptor.internalFormat=l.SizedPixelFormat.RGB8}}return this._descriptor.internalFormat=this._descriptor.pixelFormat===l.PixelFormat.DEPTH_STENCIL?l.PixelFormat.DEPTH24_STENCIL8:this._descriptor.pixelFormat}_configurePixelStorage(){const e=this._descriptor.context.gl,{unpackAlignment:t,flipped:r,preMultiplyAlpha:i}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,t),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,r?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i?1:0)}_texStorage(e,t,r,i,a,s){const n=this._descriptor.context.gl2;if(null==n)throw new(0,o.default)("Immutable textures are not supported in WebGL1");if(!(t in l.SizedPixelFormat))throw new(0,o.default)("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const d=r?f(e,i,a,s):1;if(E(e)){if(null==s)throw new(0,o.default)("Missing depth dimension for 3D texture upload");n.texStorage3D(e,d,t,i,a,s)}else n.texStorage2D(e,d,t,i,a);this._wasImmutablyAllocated=!0}_texImage(e,t,r,i,a,s,l){const d=this._descriptor.context.gl,c=E(e),{isImmutable:u,pixelFormat:m,dataType:p}=this._descriptor,h=this._descriptor.context.type===n.ContextType.WEBGL2,_=h?d:null;if(h||!T(l))if(u){if(null!=l){const r=l;if(c){if(null==s)throw new(0,o.default)("Missing depth dimension for 3D texture upload");_.texSubImage3D(e,t,0,0,0,i,a,s,m,p,r)}else d.texSubImage2D(e,t,0,0,i,a,m,p,r)}}else{const n=l;if(c){if(null==s)throw new(0,o.default)("Missing depth dimension for 3D texture upload");_.texImage3D(e,t,r,i,a,s,0,m,p,n)}else d.texImage2D(e,t,r,i,a,0,m,p,n)}else d.texImage2D(e,0,r,m,p,l)}_compressedTexImage(e,t,r,i,a,s,l){const d=this._descriptor.context.gl;let c=null;const u=E(e),m=this._descriptor.isImmutable;if(u){if(this._descriptor.context.type!==n.ContextType.WEBGL2)throw new(0,o.default)("3D textures are not supported in WebGL1");c=d}if(m){if(null!=l)if(u){if(null==s)throw new(0,o.default)("Missing depth dimension for 3D texture upload");c.compressedTexSubImage3D(e,t,0,0,0,i,a,s,r,l)}else d.compressedTexSubImage2D(e,t,0,0,i,a,r,l)}else if(u){if(null==s)throw new(0,o.default)("Missing depth dimension for 3D texture upload");c.compressedTexImage3D(e,t,r,i,a,s,0,l)}else d.compressedTexImage2D(e,t,r,i,a,0,l)}_forEachMipmapLevel(e,t=1/0){let{width:r,height:i,depth:a,hasMipmap:s,target:n}=this._descriptor;const d=n===l.TextureType.TEXTURE_3D;if(null==r||null==i||d&&null==a)throw new(0,o.default)("Missing texture dimensions for mipmap calculation");for(let o=0;e(o,r,i,a),s&&(1!==r||1!==i||d&&1!==a)&&!(o>=t);++o)r=Math.max(1,r>>1),i=Math.max(1,i>>1),d&&(a=Math.max(1,a>>1))}constructor(e,t=null,r=null){if(this.type=d.GLObjectType.Texture,this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,"context"in e)this._descriptor=e,r=t;else{const r=u.ValidatedTextureDescriptor.validate(e,t);if(!r)throw new(0,o.default)("Texture descriptor invalid");this._descriptor=r}if(this._descriptor.context.instanceCounter.increment(l.ResourceType.Texture,this),this._descriptor.context.type!==n.ContextType.WEBGL2&&(this._descriptor.isImmutable&&(this._descriptor.isImmutable=!1),E(this._descriptor.target)))throw new(0,o.default)("3D and array textures are not supported in WebGL1");this._descriptor.target===l.TextureType.TEXTURE_CUBE_MAP?this._setDataCubeMap(r):this.setData(r)}};function p(e,t){(null!=t.width&&t.width<0||null!=t.height&&t.height<0||null!=t.depth&&t.depth<0)&&console.error("Negative dimension parameters are not allowed!");const r=e.type===n.ContextType.WEBGL2;r||!t.isImmutable&&!E(t.target)||console.error("Immutable and 3D-like textures are not supported in WebGL1!"),r||null!=t.width&&(0,a.isPowerOfTwo)(t.width)&&null!=t.height&&(0,a.isPowerOfTwo)(t.height)||("number"==typeof t.wrapMode?t.wrapMode!==l.TextureWrapMode.CLAMP_TO_EDGE&&console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"):t.wrapMode.s===l.TextureWrapMode.CLAMP_TO_EDGE&&t.wrapMode.t===l.TextureWrapMode.CLAMP_TO_EDGE||console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"),t.hasMipmap&&console.error("Mipmapping requires power-of-two textures!"))}function h(e,t){let r=t.samplingMode,i=t.samplingMode;r===l.TextureSamplingMode.LINEAR_MIPMAP_NEAREST||r===l.TextureSamplingMode.LINEAR_MIPMAP_LINEAR?(r=l.TextureSamplingMode.LINEAR,t.hasMipmap||(i=l.TextureSamplingMode.LINEAR)):r!==l.TextureSamplingMode.NEAREST_MIPMAP_NEAREST&&r!==l.TextureSamplingMode.NEAREST_MIPMAP_LINEAR||(r=l.TextureSamplingMode.NEAREST,t.hasMipmap||(i=l.TextureSamplingMode.NEAREST)),e.texParameteri(t.target,e.TEXTURE_MAG_FILTER,r),e.texParameteri(t.target,e.TEXTURE_MIN_FILTER,i)}function _(e,t){"number"==typeof t.wrapMode?(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode)):(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode.s),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode.t))}function x(e){return null!=e&&"type"in e&&"compressed"===e.type}function T(e){return null!=e&&!x(e)&&!function(e){return null!=e&&"byteLength"in e}(e)}function E(e){return e===l.TextureType.TEXTURE_3D||e===l.TextureType.TEXTURE_2D_ARRAY}function f(e,t,r,i=1){let o=Math.max(t,r);return e===l.TextureType.TEXTURE_3D&&(o=Math.max(o,i)),Math.round(Math.log(o)/Math.LN2)+1}m.TEXTURE_UNIT_FOR_UPDATES=0;const R=new Map})),t.register("kGNC4",(function(r,i){e(r.exports,"webglDebugEnabled",(function(){return l})),e(r.exports,"webglValidateShadersEnabled",(function(){return d})),e(r.exports,"checkWebGLError",(function(){return c}));var o=t("kyj08"),a=t("2VlWd");const s=t("jHOLN").default.getLogger("esri.views.webgl.checkWebGLError");const n=!!(0,a.default)("enable-feature:webgl-debug");function l(){return n}function d(){return n}function c(e){if(l()){const t=e.getError();if(t){const r=function(e,t){switch(t){case e.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case e.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case e.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case e.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case e.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case e.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}(e,t),i=(new Error).stack;s.error(new(0,o.default)("webgl-error","WebGL error occured",{message:r,stack:i}))}}}})),t.register("hjBtD",(function(t,r){var i,o;e(t.exports,"GLObjectType",(function(){return i})),(o=i||(i={}))[o.Texture=0]="Texture",o[o.RenderBuffer=1]="RenderBuffer"})),t.register("dDu9k",(function(r,i){e(r.exports,"TextureDescriptor",(function(){return s})),e(r.exports,"estimateMemory",(function(){return n}));var o=t("8JzMA"),a=t("7yLcd");class s{constructor(e=0,t=e){this.width=e,this.height=t,this.target=o.TextureType.TEXTURE_2D,this.pixelFormat=o.PixelFormat.RGBA,this.dataType=o.PixelType.UNSIGNED_BYTE,this.samplingMode=o.TextureSamplingMode.LINEAR,this.wrapMode=o.TextureWrapMode.REPEAT,this.maxAnisotropy=1,this.flipped=!1,this.hasMipmap=!1,this.isOpaque=!1,this.unpackAlignment=4,this.preMultiplyAlpha=!1,this.depth=1,this.isImmutable=!1}}function n(e){return e.width<=0||e.height<=0||null==e.internalFormat?0:e.width*e.height*(e.hasMipmap?4/3:1)*(0,a.getBytesPerElementFormat)(e.internalFormat)}})),t.register("7yLcd",(function(r,i){e(r.exports,"getErrorString",(function(){return a})),e(r.exports,"vertexCount",(function(){return s})),e(r.exports,"bindVertexBufferLayout",(function(){return n})),e(r.exports,"unbindVertexBufferLayout",(function(){return l})),e(r.exports,"getBytesPerElementFormat",(function(){return d})),t("2VlWd");var o=t("8JzMA");function a(e){const t=e.gl;switch(t.getError()){case t.NO_ERROR:return null;case t.INVALID_ENUM:return"An unacceptable value has been specified for an enumerated argument";case t.INVALID_VALUE:return"An unacceptable value has been specified for an argument";case t.INVALID_OPERATION:return"The specified command is not allowed for the current state";case t.INVALID_FRAMEBUFFER_OPERATION:return"The currently bound framebuffer is not framebuffer complete";case t.OUT_OF_MEMORY:return"Not enough memory is left to execute the command";case t.CONTEXT_LOST_WEBGL:return"WebGL context is lost"}return"Unknown error"}function s(e,t){return e.vertexBuffers[t].byteLength/function(e){return e[0].stride}(e.layout[t])}function n(e,t,r,i,o=0){const a=e.gl,s=e.capabilities.instancing;e.bindBuffer(r);for(const e of i){const r=t.get(e.name);void 0===r&&console.error(`There is no location for vertex attribute '${e.name}' defined.`);const i=o*e.stride;if(e.count<=4)a.vertexAttribPointer(r,e.count,e.type,e.normalized,e.stride,e.offset+i),a.enableVertexAttribArray(r),e.divisor>0&&s&&s.vertexAttribDivisor(r,e.divisor);else if(9===e.count)for(let t=0;t<3;t++)a.vertexAttribPointer(r+t,3,e.type,e.normalized,e.stride,e.offset+12*t+i),a.enableVertexAttribArray(r+t),e.divisor>0&&s&&s.vertexAttribDivisor(r+t,e.divisor);else if(16===e.count)for(let t=0;t<4;t++)a.vertexAttribPointer(r+t,4,e.type,e.normalized,e.stride,e.offset+16*t+i),a.enableVertexAttribArray(r+t),e.divisor>0&&s&&s.vertexAttribDivisor(r+t,e.divisor);else console.error("Unsupported vertex attribute element count: "+e.count)}}function l(e,t,r,i){const a=e.gl,s=e.capabilities.instancing;e.bindBuffer(r);for(const e of i){const r=t.get(e.name);if(e.count<=4)a.disableVertexAttribArray(r),e.divisor&&e.divisor>0&&s&&s.vertexAttribDivisor(r,0);else if(9===e.count)for(let t=0;t<3;t++)a.disableVertexAttribArray(r+t),e.divisor&&e.divisor>0&&s&&s.vertexAttribDivisor(r+t,0);else if(16===e.count)for(let t=0;t<4;t++)a.disableVertexAttribArray(r+t),e.divisor&&e.divisor>0&&s&&s.vertexAttribDivisor(r+t,0);else console.error("Unsupported vertex attribute element count: "+e.count)}e.unbindBuffer(o.BufferType.ARRAY_BUFFER)}function d(e){switch(e){case o.PixelFormat.ALPHA:case o.PixelFormat.LUMINANCE:case o.PixelFormat.RED:case o.PixelFormat.RED_INTEGER:case o.SizedPixelFormat.R8:case o.SizedPixelFormat.R8I:case o.SizedPixelFormat.R8UI:case o.SizedPixelFormat.R8_SNORM:case o.RenderbufferFormat.STENCIL_INDEX8:return 1;case o.PixelFormat.LUMINANCE_ALPHA:case o.PixelFormat.RG:case o.PixelFormat.RG_INTEGER:case o.SizedPixelFormat.RGBA4:case o.SizedPixelFormat.R16F:case o.SizedPixelFormat.R16I:case o.SizedPixelFormat.R16UI:case o.SizedPixelFormat.RG8:case o.SizedPixelFormat.RG8I:case o.SizedPixelFormat.RG8UI:case o.SizedPixelFormat.RG8_SNORM:case o.SizedPixelFormat.RGB565:case o.SizedPixelFormat.RGB5_A1:case o.RenderbufferFormat.DEPTH_COMPONENT16:return 2;case o.PixelFormat.DEPTH_COMPONENT:case o.PixelFormat.RGB:case o.PixelFormat.RGB_INTEGER:case o.SizedPixelFormat.RGB8:case o.SizedPixelFormat.RGB8I:case o.SizedPixelFormat.RGB8UI:case o.SizedPixelFormat.RGB8_SNORM:case o.SizedPixelFormat.SRGB8:case o.RenderbufferFormat.DEPTH_COMPONENT24:return 3;case o.PixelFormat.DEPTH_STENCIL:case o.PixelFormat.DEPTH24_STENCIL8:case o.PixelFormat.RGBA:case o.PixelFormat.RGBA_INTEGER:case o.SizedPixelFormat.RGBA8:case o.SizedPixelFormat.R32F:case o.SizedPixelFormat.R11F_G11F_B10F:case o.SizedPixelFormat.RG16F:case o.SizedPixelFormat.R32I:case o.SizedPixelFormat.R32UI:case o.SizedPixelFormat.RG16I:case o.SizedPixelFormat.RG16UI:case o.SizedPixelFormat.RGBA8I:case o.SizedPixelFormat.RGBA8UI:case o.SizedPixelFormat.RGBA8_SNORM:case o.SizedPixelFormat.SRGB8_ALPHA8:case o.SizedPixelFormat.RGB9_E5:case o.SizedPixelFormat.RGB10_A2UI:case o.SizedPixelFormat.RGB10_A2:case o.RenderbufferFormat.DEPTH_STENCIL:case o.RenderbufferFormat.DEPTH_COMPONENT32F:case o.RenderbufferFormat.DEPTH24_STENCIL8:return 4;case o.RenderbufferFormat.DEPTH32F_STENCIL8:return 5;case o.SizedPixelFormat.RGB16F:case o.SizedPixelFormat.RGB16I:case o.SizedPixelFormat.RGB16UI:return 6;case o.SizedPixelFormat.RG32F:case o.SizedPixelFormat.RG32I:case o.SizedPixelFormat.RG32UI:case o.SizedPixelFormat.RGBA16F:case o.SizedPixelFormat.RGBA16I:case o.SizedPixelFormat.RGBA16UI:return 8;case o.SizedPixelFormat.RGB32F:case o.SizedPixelFormat.RGB32I:case o.SizedPixelFormat.RGB32UI:return 12;case o.SizedPixelFormat.RGBA32F:case o.SizedPixelFormat.RGBA32I:case o.SizedPixelFormat.RGBA32UI:return 16;case o.CompressedTextureFormat.COMPRESSED_RGB_S3TC_DXT1_EXT:case o.CompressedTextureFormat.COMPRESSED_RGBA_S3TC_DXT1_EXT:return.5;case o.CompressedTextureFormat.COMPRESSED_RGBA_S3TC_DXT3_EXT:case o.CompressedTextureFormat.COMPRESSED_RGBA_S3TC_DXT5_EXT:return 1;case o.CompressedTextureFormat.COMPRESSED_R11_EAC:case o.CompressedTextureFormat.COMPRESSED_SIGNED_R11_EAC:case o.CompressedTextureFormat.COMPRESSED_RGB8_ETC2:case o.CompressedTextureFormat.COMPRESSED_SRGB8_ETC2:case o.CompressedTextureFormat.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:case o.CompressedTextureFormat.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:return.5;case o.CompressedTextureFormat.COMPRESSED_RG11_EAC:case o.CompressedTextureFormat.COMPRESSED_SIGNED_RG11_EAC:case o.CompressedTextureFormat.COMPRESSED_RGBA8_ETC2_EAC:case o.CompressedTextureFormat.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:return 1}return 0}})),t.register("iNo7d",(function(r,i){e(r.exports,"ValidatedTextureDescriptor",(function(){return s}));var o=t("8JzMA"),a=t("dDu9k");class s extends a.TextureDescriptor{static validate(e,t){return new s(e,t)}constructor(e,t){switch(super(),this.context=e,Object.assign(this,t),this.internalFormat){case o.SizedPixelFormat.R16F:case o.SizedPixelFormat.R16I:case o.SizedPixelFormat.R16UI:case o.SizedPixelFormat.R32F:case o.SizedPixelFormat.R32I:case o.SizedPixelFormat.R32UI:case o.SizedPixelFormat.R8_SNORM:case o.SizedPixelFormat.R8:case o.SizedPixelFormat.R8I:case o.SizedPixelFormat.R8UI:this.pixelFormat=o.PixelFormat.RED}}}}))}();
//# sourceMappingURL=objectResourceUtils.a78dabd8.js.map
